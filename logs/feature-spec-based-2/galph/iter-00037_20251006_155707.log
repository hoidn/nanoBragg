Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=37
To github.com:hoidn/nanoBragg.git
   8d2a47c..893b87e  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T15:57:13] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T15:57:13] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: When the Phase is Evidence, you must not execute tests; any pytest command included here is provided for Ralph’s subsequent loop.
<Do Now guidelines>
Phase Gate (Evidence): If the active plan phase is Evidence, do not run pytest at all (including collection). Limit evidence gathering to non-test probes and command‑line tooling (e.g., scripts/validation/*, minimal parity CLIs). Do not include runnable tests in this loop.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T15:57:18] thinking

**Setting up environment and preparing Git pull**
[2025-10-06T15:57:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:24] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' succeeded in 2.46s:
Already up to date.
[2025-10-06T15:57:24] tokens used: 12,972

[2025-10-06T15:57:26] thinking

**Reading latest galph_memory entry**
[2025-10-06T15:57:27] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:27] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' succeeded in 737ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T15:57:27] tokens used: 13,918

[2025-10-06T15:57:33] thinking

**Preparing to read documentation files**
[2025-10-06T15:57:37] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:38] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' succeeded in 867ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T15:57:38] tokens used: 17,768

[2025-10-06T15:57:40] thinking

**Opening next spec file**
[2025-10-06T15:57:43] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:44] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' succeeded in 694ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T15:57:44] tokens used: 19,431

[2025-10-06T15:57:47] thinking

**Considering reading spec shards**
[2025-10-06T15:57:48] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:49] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' succeeded in 692ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T15:57:49] tokens used: 19,783

[2025-10-06T15:57:51] thinking

**Inspecting c_to_pytorch_config_map**
[2025-10-06T15:57:52] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:52] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' succeeded in 685ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T15:57:52] tokens used: 22,574

[2025-10-06T15:57:54] thinking

**Navigating to debugging documentation**
[2025-10-06T15:57:56] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:57:57] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' succeeded in 688ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T15:57:57] tokens used: 24,498

[2025-10-06T15:58:00] thinking

**Checking fix_plan.md line count**
[2025-10-06T15:58:02] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l docs/fix_plan.md' succeeded in 711ms:
    1191 docs/fix_plan.md
[2025-10-06T15:58:03] tokens used: 27,059

[2025-10-06T15:58:07] thinking

**Preparing to read large plan file**
[2025-10-06T15:58:08] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:09] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/fix_plan.md' succeeded in 724ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T15:58:09] tokens used: 27,389

[2025-10-06T15:58:11] thinking

**Planning to read testing strategy document**
[2025-10-06T15:58:13] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:14] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' succeeded in 670ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T15:58:14] tokens used: 30,262

[2025-10-06T15:58:22] thinking

**Preparing for deep codebase analysis**
[2025-10-06T15:58:24] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:25] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' succeeded in 760ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T15:58:25] tokens used: 33,033

[2025-10-06T15:58:27] thinking

**Reviewing CLI noise plan**
[2025-10-06T15:58:28] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:29] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' succeeded in 701ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |
[2025-10-06T15:58:29] tokens used: 34,034

[2025-10-06T15:58:32] thinking

**Reviewing plan and vectorization doc**
[2025-10-06T15:58:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:35] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' succeeded in 684ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T15:58:35] tokens used: 36,940

[2025-10-06T15:58:39] thinking

**Preparing for deep codebase analysis**
[2025-10-06T15:58:45] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git log -5 --oneline' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:46] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git log -5 --oneline' succeeded in 669ms:
893b87e [SYNC i=37] actor=galph status=running
8d2a47c [SYNC i=37] actor=ralph → next=galph status=ok ralph_commit=831b670
831b670 CLI-FLAGS-003 H5b revert: restore custom-vector pix0 override precedence
b2a520f [SYNC i=36] actor=ralph status=running
135c8cb [SYNC i=36] actor=galph → next=ralph status=ok galph_commit=6687255
[2025-10-06T15:58:46] tokens used: 39,613

[2025-10-06T15:58:49] thinking

**Inspecting last key commit**
[2025-10-06T15:58:52] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git show 831b670' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:58:53] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git show 831b670' succeeded in 708ms:
commit 831b670e4af6fa4e520307018fbbd478ee8b03c4
Author: ollie <ohoidn>
Date:   Mon Oct 6 08:56:04 2025 -0700

    CLI-FLAGS-003 H5b revert: restore custom-vector pix0 override precedence
    
    Revert Attempt #29 to match C behavior where pix0_override is IGNORED
    when custom detector vectors are present (per Attempt #30 evidence).
    
    Changes:
    - src/nanobrag_torch/models/detector.py:518-539
      * Added has_custom_vectors detection logic
      * Gate pix0_override with: if pix0_override_tensor and not has_custom_vectors
      * Updated comments to reference c_precedence_2025-10-22.md
    
    Testing:
    - Targeted: test_cli_flags.py::TestCLIPix0Override 4/4 passed (2.43s)
    - Core suite: cli_flags 26/26, detector_geometry 12/12, crystal 19/19
    - Total: 57 passed, 1 warning
    
[2025-10-06T15:58:53] tokens used: 40,051

[2025-10-06T15:58:58] thinking

**Reviewing long-term goal progress**

I'm consolidating what’s done and what remains, focusing on the Phase K tasks related to parallel test CLI flags. I’ll look into docs/fix_plan and relevant report files like parity_summary.md and scaling_chain.md to spot issues or gaps, aiming to build a clear summary tied to those materials.
[2025-10-06T15:58:59] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_j/scaling_chain.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:00] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_j/scaling_chain.md' succeeded in 694ms:
# Scaling Chain Analysis: C vs PyTorch

**Pixel:** (slow=1039, fast=685)

## Key Findings

**First Divergence:** `I_before_scaling`
- C value: 1.480792010454e+15
- PyTorch value: 5.344373483470e+08
- Ratio (Py/C): 3.609132e-07

**Final Intensity Ratio (Py/C):** 1.053e-05

## Full Factor Comparison

| Factor | C Value | PyTorch Value | Ratio (Py/C) | Match? |
|--------|---------|---------------|--------------|--------|
| I_before_scaling | 1.480792e+15 | 5.344373e+08 | 3.609132e-07 | ❌ |
| steps | 1.000000e+01 | 1.000000e+01 | 1.000000e+00 | ✅ |
| r_e_sqr | 7.940792e-30 | 7.940792e-30 | 1.000000e+00 | ✅ |
[2025-10-06T15:59:00] tokens used: 43,553

[2025-10-06T15:59:05] thinking

**Investigating parity summary report**
[2025-10-06T15:59:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_h5/parity_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:07] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_h5/parity_summary.md' succeeded in 709ms:
# Phase H5 Parity Summary

**Date:** 2025-10-21
**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior

## Implementation Summary

### Code Changes
**File:** `src/nanobrag_torch/models/detector.py`

1. **Removed custom-vector gate** (line ~540):
   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
   - NEW: `if pix0_override_tensor is not None:`

2. **Updated documentation** (lines 518-531):
   - Removed outdated "C code IGNORES" comment
   - Added Phase J evidence reference (2025-10-21)
   - Documented correct override workflow

[2025-10-06T15:59:07] tokens used: 44,276

[2025-10-06T15:59:12] thinking

**Reviewing documentation and code consistency**
[2025-10-06T15:59:13] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '850,1150p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:13] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '850,1150p' src/nanobrag_torch/simulator.py" succeeded in 773ms:
            pixel_size_m_tensor = torch.as_tensor(self.detector.pixel_size, device=pixel_coords_meters.device, dtype=pixel_coords_meters.dtype)
            delta_s_all = sub_s_flat * pixel_size_m_tensor
            delta_f_all = sub_f_flat * pixel_size_m_tensor

            # Shape: (oversample*oversample, 3)
            offset_vectors = delta_s_all.unsqueeze(-1) * s_axis + delta_f_all.unsqueeze(-1) * f_axis

            # Expand pixel_coords for all subpixels
            # Shape: (S, F, oversample*oversample, 3)
            pixel_coords_expanded = pixel_coords_meters.unsqueeze(2).expand(S, F, oversample*oversample, 3)
            offset_vectors_expanded = offset_vectors.unsqueeze(0).unsqueeze(0).expand(S, F, oversample*oversample, 3)

            # All subpixel coordinates at once
            # Shape: (S, F, oversample*oversample, 3)
            subpixel_coords_all = pixel_coords_expanded + offset_vectors_expanded

            # Convert to Angstroms for physics
            subpixel_coords_ang_all = subpixel_coords_all * 1e10

            # VECTORIZED PHYSICS: Process all subpixels at once
[2025-10-06T15:59:13] tokens used: 45,544

[2025-10-06T15:59:24] thinking

**Examining noise handling and debugging tasks**
[2025-10-06T15:59:26] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "F_latt" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:27] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "F_latt" -n' succeeded in 885ms:
context:1574:    double F_latt,F_cell;
context:3806:        F_cell,F_latt,polar,omega_pixel,\
context:4068:                                        F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
context:4070:                                    F_latt = 1.0;
context:4075:                                            F_latt *= sincg(M_PI*h,Na);
context:4078:                                            F_latt *= sincg(M_PI*k,Nb);
context:4081:                                            F_latt *= sincg(M_PI*l,Nc);
context:4100:                                        F_latt = Na*Nb*Nc*0.723601254558268*sinc3(M_PI*sqrt( hrad_sqr * fudge ) );
context:4105:                                        F_latt = Na*Nb*Nc*exp(-( rad_star_sqr / 0.63 * fudge ));
context:4110:                                        F_latt = Na*Nb*Nc*(rad_star_sqr*fudge < 0.3969 );
context:4113:                                    if(F_latt == 0.0 && water_size == 0.0) continue;
context:4257:                                    I += F_cell*F_cell*F_latt*F_latt;
context:4304:                    printf(" F_cell=%g  F_latt=%g   I = %g\n", F_cell,F_latt,I);
input.md:1:Summary: Restore pix0 precedence with custom detector vectors so PyTorch reproduces C `F_latt` for the supervisor command.
input.md:17:- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Shows the 3.6e-7 `F_latt` ratio driven by the 1.14 mm pix0 delta; reverting restores geometry parity.
input.md:36:   - Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/with_override.log` (expect identical pix0/F/S, h/k/l, `F_latt`).
input.md:37:   - Record deltas in `parity_summary.md` (<5e-5 m pix0, <1e-3 relative `F_latt`).
input.md:59:- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Quantifies the current F_latt gap you are closing.
input.md:79:- `F_latt` ratio Py/C (target 0.999–1.001) reported in parity_summary.md.
src/nanobrag_torch/simulator.py:219:        F_latt_a = sincg(torch.pi * (h - h0), Na)
[2025-10-06T15:59:27] tokens used: 48,307

[2025-10-06T15:59:32] thinking

**Analyzing shape calculation discrepancies**
[2025-10-06T15:59:34] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '150,320p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:35] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '150,320p' src/nanobrag_torch/simulator.py" succeeded in 735ms:
                wavelength = wavelength.view(n_sources, 1, 1)
            else:
                # (S, F, 3) case: (n_sources,) -> (n_sources, 1, 1, 1)
                wavelength = wavelength.view(n_sources, 1, 1, 1)

    # Scattering vector using crystallographic convention
    scattering_vector = (diffracted_beam_unit - incident_beam_unit) / wavelength

    # Apply dmin culling if specified
    dmin_mask = None
    if dmin > 0:
        stol = 0.5 * torch.norm(scattering_vector, dim=-1)
        stol_threshold = 0.5 / dmin
        dmin_mask = (stol > 0) & (stol > stol_threshold)

    # Calculate Miller indices
    # scattering_vector shape: (S, F, 3) single source, or
    #                          (n_sources, S, F, 3) or (n_sources, batch, 3) multi-source
    # Need to add phi and mosaic dimensions for broadcasting
    if is_multi_source:
[2025-10-06T15:59:35] tokens used: 52,138

[2025-10-06T15:59:39] thinking

**Investigating SQUARE shape calculations**
[2025-10-06T15:59:42] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '4040,4105p' nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:42] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '4040,4105p' nanoBragg.c" exited 1 in 687ms:
sed: nanoBragg.c: No such file or directory
[2025-10-06T15:59:42] tokens used: 55,207

[2025-10-06T15:59:45] thinking

**Checking repo root for files**
[2025-10-06T15:59:45] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:46] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls' succeeded in 697ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
PHASE_5_IMPLEMENTATION_SUMMARY.md
[2025-10-06T15:59:46] tokens used: 55,441

[2025-10-06T15:59:48] thinking

**Checking golden_suite_generator for nanoBragg.c**
[2025-10-06T15:59:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls golden_suite_generator' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls golden_suite_generator' succeeded in 671ms:
Fdump.bin
Makefile
P1_trace.hkl
__pycache__
beam_center_analysis_report.md
beam_center_full_trace.log
c_pix0_trace_full.log
c_pix0_trace_sample_pivot.bin
c_pix0_trace_test.bin
c_reference_tilted_trace_params.bin
c_trace.log
c_trace_full.log
c_trace_output.bin
debug_pytorch_beam_center_details.py
docs
enhance_c_tracing_new.py
floatimage.bin
golden_suite_generator
image.pgm
intimage.img
[2025-10-06T15:59:50] tokens used: 57,058

[2025-10-06T15:59:52] thinking

**Inspecting nanoBragg.c file**
[2025-10-06T15:59:55] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '4040,4105p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T15:59:56] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '4040,4105p' golden_suite_generator/nanoBragg.c" succeeded in 715ms:
#define EPS 1.2e-7
#define RNMX (1.0-EPS)

float ran1(long *idum)
{
    int j;
    long k;
    static long iy=0;
    static long iv[NTAB];
    float temp;

    if (*idum <= 0 || !iy) {
        /* first time around.  don't want idum=0 */
        if(-(*idum) < 1) *idum=1;
        else *idum = -(*idum);

        /* load the shuffle table */
        for(j=NTAB+7;j>=0;j--) {
            k=(*idum)/IQ;
            *idum=IA*(*idum-k*IQ)-IR*k;
[2025-10-06T15:59:56] tokens used: 57,528

[2025-10-06T15:59:59] thinking

**Searching for F_latt assignment**
[2025-10-06T16:00:00] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "F_latt" -n golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:01] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "F_latt" -n golden_suite_generator/nanoBragg.c' succeeded in 687ms:
331:    double F_latt,F_cell;
2737:        F_cell,F_latt,polar,omega_pixel,\
3063:                                        F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
3065:                                    F_latt = 1.0;
3069:                                        double F_latt_a = 1.0, F_latt_b = 1.0, F_latt_c = 1.0;
3071:                                            F_latt_a = sincg(M_PI*h,Na);
3072:                                            F_latt *= F_latt_a;
3075:                                            F_latt_b = sincg(M_PI*k,Nb);
3076:                                            F_latt *= F_latt_b;
3079:                                            F_latt_c = sincg(M_PI*l,Nc);
3080:                                            F_latt *= F_latt_c;
3083:                                            printf("TRACE_C: F_latt_a %.15g\n", F_latt_a);
3084:                                            printf("TRACE_C: F_latt_b %.15g\n", F_latt_b);
3085:                                            printf("TRACE_C: F_latt_c %.15g\n", F_latt_c);
3086:                                            printf("TRACE_C: F_latt %.15g\n", F_latt);
3105:                                        F_latt = Na*Nb*Nc*0.723601254558268*sinc3(M_PI*sqrt( hrad_sqr * fudge ) );
3110:                                        F_latt = Na*Nb*Nc*exp(-( rad_star_sqr / 0.63 * fudge ));
3115:                                        F_latt = Na*Nb*Nc*(rad_star_sqr*fudge < 0.3969 );
3118:                                    if(F_latt == 0.0 && water_size == 0.0) continue;
3265:                                    I += F_cell*F_cell*F_latt*F_latt;
[2025-10-06T16:00:01] tokens used: 111,322

[2025-10-06T16:00:04] thinking

**Reviewing specific code section**
[2025-10-06T16:00:05] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '3030,3090p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:06] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '3030,3090p' golden_suite_generator/nanoBragg.c" succeeded in 674ms:
                                    {
                                        a[1]=ap[1];a[2]=ap[2];a[3]=ap[3];
                                        b[1]=bp[1];b[2]=bp[2];b[3]=bp[3];
                                        c[1]=cp[1];c[2]=cp[2];c[3]=cp[3];
                                    }
//                                  printf("%d %f %f %f\n",mos_tic,mosaic_umats[mos_tic*9+0],mosaic_umats[mos_tic*9+1],mosaic_umats[mos_tic*9+2]);
//                                  printf("%d %f %f %f\n",mos_tic,mosaic_umats[mos_tic*9+3],mosaic_umats[mos_tic*9+4],mosaic_umats[mos_tic*9+5]);
//                                  printf("%d %f %f %f\n",mos_tic,mosaic_umats[mos_tic*9+6],mosaic_umats[mos_tic*9+7],mosaic_umats[mos_tic*9+8]);

                                    /* construct fractional Miller indicies */
                                    h = dot_product(a,scattering);
                                    k = dot_product(b,scattering);
                                    l = dot_product(c,scattering);

                                    /* round off to nearest whole index */
                                    h0 = ceil(h-0.5);
                                    k0 = ceil(k-0.5);
                                    l0 = ceil(l-0.5);

                                    /* trace output for specific pixel */
[2025-10-06T16:00:06] tokens used: 113,519

[2025-10-06T16:00:16] thinking

**Analyzing numerical differences and rounding methods**

I’m diving into key differences between C and PyTorch implementations, especially how they apply the `sincg` function and rounding strategies. Noticing that C uses `sincg(M_PI*h, Na)` while PyTorch incorrectly shifts by `h0`, which seems to cause intensity mismatches. I’m also comparing their rounding: C uses `ceil(h-0.5)` which behaves like round-half-away-from-zero, whereas PyTorch’s `torch.round` is banker’s rounding (ties to even). This mismatch might explain discrepancies in the lattice factor. I plan to verify these observations with tests and further check the normalization steps and no-noise support documentation.
[2025-10-06T16:00:22] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:23] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' succeeded in 862ms:
Summary: Restore pix0 precedence with custom detector vectors so PyTorch reproduces C `F_latt` for the supervisor command.
Phase: Implementation
Focus: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_flags.py::TestCLIPix0Override
Artifacts: reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log, reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/, reports/2025-10-cli-flags/phase_h5/parity_summary.md, docs/fix_plan.md (Attempt #31 entry)
Do Now: CLI-FLAGS-003 H5b — revert custom-vector pix0 override (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`)
Do Now note: Commit d6f158c kept overrides disabled; Attempt #29 reintroduced them. Restore the pre-Attempt-29 behavior while preserving new r-factor math.
Do Now note: Annotate code comments referencing `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` so future readers know why overrides are skipped with custom vectors.
If Blocked: Halt after editing the detector; log the failure cause, git diff, and current pix0 deltas in `reports/2025-10-cli-flags/phase_h5/attempt_h5b_blocked.md`, then wait for supervisor guidance.
If Blocked note: Include command output (tail 20 lines) and environment details (device availability, torch version).
If Blocked note: Mention whether pytest or trace harness failed; do not attempt ad-hoc fixes.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md §Phase H5 — Newly revised tasks require undoing the override for custom vectors before Phase K normalization.
- docs/fix_plan.md:506-551 — Next actions and Attempt #30 observations explicitly call for the revert + fresh PyTorch traces.
- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Shows the 3.6e-7 `F_latt` ratio driven by the 1.14 mm pix0 delta; reverting restores geometry parity.
- specs/spec-a-cli.md §§Precedence — Custom vectors supersede pix0 overrides; implementation must follow the normative spec.
- docs/architecture/detector.md §5.3 — Contains BEAM pivot formulas and projection math that must remain intact after the revert.
- docs/debugging/detector_geometry_checklist.md — Provides mandatory unit/orientation checks when validating the updated traces.
[2025-10-06T16:00:23] tokens used: 115,322

[2025-10-06T16:00:38] thinking

**Reviewing plan inconsistencies and polarization details**

I'm analyzing discrepancies between the input instructions and completed attempts, focusing on polarization handling differences between pyro and C implementations, noting possible outdated logs and configuration settings impacting results. I’ll also check the vectorization plan status to assess its alignment with current goals and any needed updates.
[2025-10-06T16:00:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:40] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 903ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
1058:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-06T16:00:40] tokens used: 117,779

[2025-10-06T16:00:42] thinking

**Checking docs/fix_plan section**
[2025-10-06T16:00:43] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1058,1180p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:44] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1058,1180p' docs/fix_plan.md" succeeded in 678ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions:
  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-06T16:00:44] tokens used: 118,026

[2025-10-06T16:00:49] thinking

**Organizing analysis and hypotheses**
[2025-10-06T16:00:50] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "apply_polarization" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "apply_polarization" -n src/nanobrag_torch' succeeded in 705ms:
src/nanobrag_torch/simulator.py:43:    apply_polarization: bool = True,
src/nanobrag_torch/simulator.py:90:        apply_polarization: Whether to apply Kahn polarization correction (default True)
src/nanobrag_torch/simulator.py:296:    if apply_polarization:
src/nanobrag_torch/simulator.py:642:            apply_polarization=not self.beam_config.nopolar,
[2025-10-06T16:00:50] tokens used: 119,838

[2025-10-06T16:00:52] thinking

**Reviewing code near line 600**
[2025-10-06T16:00:54] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '600,720p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:00:55] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '600,720p' src/nanobrag_torch/simulator.py" succeeded in 702ms:

        Returns:
            intensity: Computed intensity |F|^2 integrated over phi and mosaic
        """
        # Use provided values or defaults
        if incident_beam_direction is None:
            incident_beam_direction = self.incident_beam_direction
        if wavelength is None:
            wavelength = self.wavelength

        # PERF-PYTORCH-005: Clone incident_beam_direction to avoid CUDA graphs aliasing violations
        # CUDA graphs requires that tensors which will be expanded/reshaped inside torch.compile
        # are cloned OUTSIDE the compiled region (in this uncompiled wrapper) to prevent
        # "accessing tensor output of CUDAGraphs that has been overwritten by a subsequent run" errors.
        # This wrapper method is intentionally NOT compiled to allow this clone operation.
        incident_beam_direction = incident_beam_direction.clone()

        # Mark CUDA graph step boundary to prevent aliasing errors
        # This tells torch.compile that we're starting a new step and tensors can be safely reused
        if self.device.type == "cuda":
[2025-10-06T16:00:55] tokens used: 120,210

[2025-10-06T16:01:03] thinking

**Examining docstring and code inconsistency**
[2025-10-06T16:01:05] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:01:06] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 702ms:
tails
[2025-10-06T16:01:06] tokens used: 122,069

[2025-10-06T16:01:29] thinking

**Assessing plan update necessity**

I’m weighing if the existing plan needs changes based on the discovered F_latt bug, leaning towards updating Phase K with specific tasks addressing the lattice factor fix. I’ll also identify which docs are relevant to support the plan update before drafting it.
[2025-10-06T16:01:33] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '200,260p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:01:34] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '200,260p' specs/spec-a-core.md" succeeded in 962ms:
            - For each source:
                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
                - Polarization factor (if enabled; Kahn model):
                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
the Kahn factor from -polar.
                - Crystal orientation:
                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
about u by φ to get (ap,bp,cp).
                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
(a,b,c).
                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
                - Lattice factor F_latt:
                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
where
[2025-10-06T16:01:34] tokens used: 123,975

[2025-10-06T16:02:05] thinking

**Organizing plan updates and documentation references**

I'm sorting out how to update the plan to fix the F_latt parity issue, focusing on adding detailed, phased tasks under Phase K while listing all relevant documents with clear rationales. I’ll also ensure cross-references in fix_plan and consideration of previous phase statuses, aiming for a thorough, well-structured update that aligns with the spec and testing guidelines.
[2025-10-06T16:02:09] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Phase H" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:02:10] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Phase H" -n plans/active/cli-noise-pix0/plan.md' succeeded in 687ms:
5:- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
7:- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
9:- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
92:| G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
94:### Phase H — Lattice Structure Factor Alignment
104:| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
113:### Phase H5 — Custom Vector Pix0 Override Parity
115:Prereqs: Phase H4 artifacts available; C precedence proof in `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`.
122:| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
[2025-10-06T16:02:10] tokens used: 127,914

[2025-10-06T16:02:12] thinking

**Verifying completion of H5b task**
[2025-10-06T16:02:15] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '104,130p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:02:15] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '104,130p' plans/active/cli-noise-pix0/plan.md" succeeded in 723ms:
| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
| H3b1 | Capture C vs PyTorch pix0/F/S references (override on/off) | [D] | ✅ 2025-10-17 Attempt #23: Stored paired C traces (`reports/2025-10-cli-flags/phase_h/implementation/c_trace_with_override.log` / `_without_override.log`), PyTorch traces, and `pix0_mapping_analysis.md`; evidence proves C geometry is identical with or without `-pix0_vector_mm` when custom vectors are supplied. |
| H3b2 | Implement pix0 precedence (custom vectors > override) | [D] | ✅ 2025-10-06 Attempt #24 (commit d6f158c). `Detector._calculate_pix0_vector` now skips overrides when any custom detector vector is supplied; override logic only executes in the no-custom-vectors path. Validation: `tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_vector_mm_beam_pivot` (CPU) and evidence log `reports/2025-10-cli-flags/phase_h/implementation/pix0_override_validation.md`. Residual pix0 Y-delta (≈3.9 mm) traced to missing post-rotation `Fbeam/Sbeam` recomputation and deferred to H4. |
| H3b3 | Repair CLI regression + artifacts for precedence | [D] | ✅ 2025-10-06 Attempt #24. Regression test now covers BOTH precedence cases (custom vectors ignored, standard path applies override) and records expected C pix0 vector in `pix0_expected.json`. CUDA parametrisation remains skipped until parity fix lands; tolerance temporarily relaxed to 5 mm pending H4 geometry alignment. |
| H4a | Port post-rotation beam-centre recomputation | [D] | ✅ 2025-10-17 Attempt #25: Ported nanoBragg.c lines 1846-1860 into `Detector._calculate_pix0_vector`; see `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/implementation.md`. |
| H4b | Refresh traces and parity evidence | [D] | ✅ 2025-10-17 Attempt #25: Stored C/PyTorch traces in `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/trace_c.log` and `trace_py.log`; `summary.md` records pix0 deltas ≤1.3e-8 m and `F_latt` agreement <0.2%. |
| H4c | Tighten regression test + targeted pytest | [D] | ✅ 2025-10-17 Attempt #25: Updated regression tolerance to 5e-5 m (CPU and CUDA parametrised) and captured `pytest_h4c.log`; Attempt #25 logged in docs/fix_plan.md. |

### Phase H5 — Custom Vector Pix0 Override Parity
Goal: Bring PyTorch pix0 precedence back in line with C when custom detector vectors accompany `-pix0_vector_mm`, eliminating the 1.14 mm delta driving the `F_latt` mismatch.
Prereqs: Phase H4 artifacts available; C precedence proof in `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`.
Exit Criteria: Detector traces with custom vectors show `pix0_vector`, `Fbeam`, and `Sbeam` matching C within 5e-5 m, and fractional h/k/l plus `F_latt_a/b/c` align within 1e-3 relative difference before resuming normalization work.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
[2025-10-06T16:02:15] tokens used: 128,855

[2025-10-06T16:02:32] thinking

**Updating plan for completed tasks and new fixes**

I’m preparing to update the plan to mark H5b and H5d as done with details from attempt 31, update the gap snapshot notes with the revert info, add documentation anchors, and restructure Phase K tasks to reflect the F_latt normalization fix and related testing and documentation. I’ll carefully patch these sections to keep everything aligned and reflect current progress.
[2025-10-06T16:02:56] tokens used: 133,668

[2025-10-06T16:03:06] thinking

**Checking plan text before patching**
[2025-10-06T16:03:10] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,60p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:03:11] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,60p' plans/active/cli-noise-pix0/plan.md" succeeded in 889ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |
[2025-10-06T16:03:11] tokens used: 136,923

[2025-10-06T16:03:24] thinking

**Adjusting bullet points in patch**

I'm updating the patch to fix duplicate bullet points by replacing specific lines for gap snapshot refresh and correction, and adding a new documentation anchors bullet after the evidence status line. I'll use apply_patch to precisely modify these sequential lines.
[2025-10-06T16:03:41] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -6,5 +6,10 @@
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
[2025-10-06T16:03:41] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:03:41] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..649408b5d037b9ae19acc1910bb46e3fb9359d2a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.

[2025-10-06T16:03:41] tokens used: 140,371
[2025-10-06T16:03:41] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..649408b5d037b9ae19acc1910bb46e3fb9359d2a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.


[2025-10-06T16:03:46] thinking

**Updating table rows for H5b and H5d**
[2025-10-06T16:04:08] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -125,5 +125,5 @@
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
[2025-10-06T16:04:08] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:04:08] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..4a8fbee23a434e1fa200f7978d00b57c3b009ba6
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T16:04:08] tokens used: 142,407
[2025-10-06T16:04:08] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..4a8fbee23a434e1fa200f7978d00b57c3b009ba6
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T16:04:12] thinking

**Updating Phase K table entries**
[2025-10-06T16:04:21] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -158,5 +158,5 @@
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
[2025-10-06T16:04:21] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:04:21] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T16:04:21] tokens used: 144,120
[2025-10-06T16:04:21] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:04:26] thinking

**Verifying and updating documentation references**
[2025-10-06T16:04:27] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '470,580p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:04:28] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '470,580p' docs/fix_plan.md" succeeded in 876ms:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/diff.png` - Difference heatmap (559 KB)
      - `scripts/nb_compare.py:118-180,396-397` - **Tooling fix deployed:** Added -detpixels_x/-detpixels_y parsing to load_float_image()
    Observations/Hypotheses:
      - **High correlation (0.998) indicates pattern matches:** Shapes and positions correct, magnitudes catastrophically wrong
      - **Intensity ratio 121,250×:** PyTorch raw values ~124,538× higher than C after normalization
      - **Both implementations completed without errors:** Detector geometry, pix0 vectors, convention selection all agree
      - **Hypotheses for debugging loop:**
        1. Missing division by `steps = sources × mosaic × phisteps × oversample²` (C: steps=10 confirmed)
        2. Missing scaling by r_e² (classical electron radius = 2.818×10⁻¹⁵ m; r_e² = 7.94×10⁻³⁰ m²)
        3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
        4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
      - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
  * [2025-10-19] Attempt #28 (ralph) — Result: **EVIDENCE COMPLETE** (Phase J scaling diagnosis). **First divergence identified: `I_before_scaling` caused by F_latt calculation error.**
    Metrics: C I_before_scaling=1.48e15, PyTorch I_before_scaling=5.34e8 (ratio=3.6e-7, ~2772× difference). Root cause: F_latt components differ drastically (C: F_latt_a=35.9, F_latt_b=38.6, F_latt_c=25.7 → F_latt=35636; PyTorch: F_latt_a=-2.4, F_latt_b=11.8, F_latt_c=-2.7 → F_latt=76.9). This 463× F_latt error squares to create the observed ~2e5× intensity gap.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` - C scaling trace for pixel (1039,685)
      - `reports/2025-10-cli-flags/phase_j/trace_py_scaling.log` - PyTorch scaling trace for same pixel
      - `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` - Analysis script computing factor-by-factor ratios
      - `reports/2025-10-cli-flags/phase_j/scaling_chain.md` - Full ratio analysis and diagnosis
[2025-10-06T16:04:28] tokens used: 145,085
[2025-10-06T16:04:28] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:04:32] thinking

**Verifying Next Actions alignment**
[2025-10-06T16:04:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Next Actions" -n docs/fix_plan.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:04:36] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Next Actions" -n docs/fix_plan.md | head' succeeded in 701ms:
44:    Next Actions: Update `plans/active/repo-hygiene-002/plan.md` task H4 guidance to reference Protected Assets, then verify the checklist is followed in the next hygiene pass.
49:    Next Actions: Capture proof-of-compliance during the next hygiene loop and keep plan cross-references fresh.
54:    Next Actions: Update plan task H4 with the mandatory docs/index.md scan, then record a compliance log during the next REPO-HYGIENE-002 execution.
78:    Next Actions: Complete plan H1–H6 (baseline snapshot, restore canonical file, purge stray reports, rerun parity smoke tests, log closure).
83:    Next Actions: Record closure in plan notes and keep baseline snapshot for future hygiene audits.
88:    Next Actions: Execute plan tasks H1–H4 on a dedicated branch: capture baseline file (`git show 92ac528^:golden_suite_generator/nanoBragg.c`), restore it locally, archive `reports/2025-09-30-AT-021-traces/` under `reports/archive/`, remove the duplicate `fix_plan.md`, then run H5 parity smoke before logging completion in H6.
93:    Next Actions: None - item closed successfully. Keep baseline snapshot for future hygiene audits.
112:- Immediate Next Actions (2025-10-15):
124:    Next Actions: Proceed to Phase 2 multi-device validation.
129:    Next Actions: Implement plan tasks P2.1–P2.5 (CLI extension, CPU/CUDA runs, Dynamo logs), then P3.0/P3.0b/P3.0c–P3.5 (multi-source defaults + polarization + normalization, benchmark hardening, ROI caching, C comparison).
[2025-10-06T16:04:36] tokens used: 146,789
[2025-10-06T16:04:36] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:04:38] thinking

**Searching for next actions identifiers**
[2025-10-06T16:04:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:04:40] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 682ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
507:    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
[2025-10-06T16:04:40] tokens used: 147,852
[2025-10-06T16:04:40] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:04:45] thinking

**Updating Next Actions section**
[2025-10-06T16:04:50] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -506,3 +506,6 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
[2025-10-06T16:04:50] apply_patch(auto_approved=true) exited 0 in 21ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T16:04:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T16:04:50] tokens used: 148,434
[2025-10-06T16:04:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:05:01] thinking

**Planning documentation and task updates**

I'll review and align the documentation—including fix_plan and parity_summary.md—with the updated revert plan to maintain clarity. I also want to update input.md to refocus next steps on evidence gathering via H5c, ensuring the instructions and phase reflect the current priorities, and verify the trace harness script location for the command setup.
[2025-10-06T16:05:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:05:04] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags' succeeded in 893ms:
phase_a
phase_b
phase_c
phase_d
phase_e
phase_f
phase_f2
phase_g
phase_h
phase_h5
phase_i
phase_j
[2025-10-06T16:05:04] tokens used: 149,689
[2025-10-06T16:05:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:05:10] thinking

**Inspecting report directory for trace_harness.py**
[2025-10-06T16:05:12] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_h' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:05:13] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_h' succeeded in 698ms:
attempt_log.txt
implementation
implementation_notes.md
manual_sincg.md
parity_after_lattice_fix
pix0_reproduction.md
pytest_collect.log
pytest_collect_refresh.log
trace_comparison.md
trace_comparison_after_H2.md
trace_diff.log
trace_diff_after_H2.log
trace_harness.py
trace_harness_no_override.py
trace_py.log
trace_py.stderr
trace_py_after_H2.log
trace_py_after_H2.stderr
trace_py_after_H3.log
trace_py_after_H3.stderr
[2025-10-06T16:05:13] tokens used: 229,935
[2025-10-06T16:05:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:05:18] thinking

**Preparing to run script with output directory**
[2025-10-06T16:05:20] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_h5' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:05:20] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_h5' succeeded in 804ms:
PHASE_H5A_COMPLETE.md
c_precedence.md
c_precedence_2025-10-22.md
c_traces
implementation_notes.md
parity_summary.md
pytest_h5b.log
pytest_h5b_revert.log
pytest_regression.log
[2025-10-06T16:05:20] tokens used: 230,434
[2025-10-06T16:05:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:05:46] thinking

**Preparing trace directories and updating report**
[2025-10-06T16:05:53] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_h5/parity_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:05:53] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_h5/parity_summary.md' succeeded in 743ms:
# Phase H5 Parity Summary

**Date:** 2025-10-21
**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior

## Implementation Summary

### Code Changes
**File:** `src/nanobrag_torch/models/detector.py`

1. **Removed custom-vector gate** (line ~540):
   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
   - NEW: `if pix0_override_tensor is not None:`

2. **Updated documentation** (lines 518-531):
   - Removed outdated "C code IGNORES" comment
   - Added Phase J evidence reference (2025-10-21)
   - Documented correct override workflow

[2025-10-06T16:05:53] tokens used: 230,958
[2025-10-06T16:05:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:06:02] thinking

**Updating summary file with new status**

I'll rewrite the summary file to reflect the reverted gating, update the date to 2025-10-22, clarify the current task goals around PyTorch parity, mention targeted regression tests, and outline next steps including capturing PyTorch traces and moving to the next phase. This will ensure the file aligns with the latest progress and ongoing priorities.
[2025-10-06T16:06:04] apply_patch auto_approved=true:
D /Users/ollie/Documents/nanoBragg3/reports/2025-10-cli-flags/phase_h5/parity_summary.md
# Phase H5 Parity Summary

**Date:** 2025-10-21
**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior

## Implementation Summary

### Code Changes
**File:** `src/nanobrag_torch/models/detector.py`

1. **Removed custom-vector gate** (line ~540):
   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
   - NEW: `if pix0_override_tensor is not None:`

2. **Updated documentation** (lines 518-531):
   - Removed outdated "C code IGNORES" comment
   - Added Phase J evidence reference (2025-10-21)
   - Documented correct override workflow

### Regression Test Results
**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`

**Results:** ✅ **57 passed, 1 warning in 5.41s**

**Breakdown:**
- CLI flags tests: 26/26 passed
- Detector geometry tests: 12/12 passed
- Crystal geometry tests: 19/19 passed

**No regressions introduced.**

## Expected Physics Impact

### Before Change (Phase H3b implementation)
When custom detector vectors were present, PyTorch:
- Skipped pix0_override application
- Used default beam center calculations
- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
- Caused 1.14 mm pix0 Y-axis error
- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7

### After Change (Phase H5b implementation)
With custom detector vectors present, PyTorch now:
- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
- Should match C geometry
- Expected to close 1.14 mm pix0 gap
- Expected to align F_latt components

## Verification Status

✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
✅ **Regression suite green** - All 57 tests passing
⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces

## Next Actions

1. **Generate full parity comparison** (Phase H5c):
   - Run supervisor command with C binary
   - Run with PyTorch implementation
   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
   - Document deltas in `phase_h5/trace_comparison.md`

2. **Update fix_plan** (Phase H5d):
   - Record Attempt #29 in `docs/fix_plan.md`
   - Include metrics and artifact paths
   - Note remaining normalization gaps for Phase K

3. **Test expectation update** (if parity achieved):
   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
   - Change from "override has NO EFFECT" to "override IS applied"
   - Tighten tolerance back to 5e-5 m

## References

- Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
- Evidence base: Phase J traces (2025-10-21) showing C honors override
[2025-10-06T16:06:04] apply_patch(auto_approved=true) exited 0 in 19ms:
Success. Updated the following files:
D reports/2025-10-cli-flags/phase_h5/parity_summary.md
[2025-10-06T16:06:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
deleted file mode 100644
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..0000000000000000000000000000000000000000
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ /dev/null
@@ -1,79 +0,0 @@
-# Phase H5 Parity Summary
-
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
-
-## Implementation Summary
-
-### Code Changes
-**File:** `src/nanobrag_torch/models/detector.py`
-
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
-
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
-
-### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
-
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
-
-**No regressions introduced.**
-
-## Expected Physics Impact
-
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
-
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
-## Verification Status
-
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
-
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
-
-## References
-
-- Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override

[2025-10-06T16:06:04] tokens used: 232,346
[2025-10-06T16:06:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
deleted file mode 100644
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..0000000000000000000000000000000000000000
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ /dev/null
@@ -1,79 +0,0 @@
-# Phase H5 Parity Summary
-
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
-
-## Implementation Summary
-
-### Code Changes
-**File:** `src/nanobrag_torch/models/detector.py`
-
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
-
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
-
-### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
-
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
-
-**No regressions introduced.**
-
-## Expected Physics Impact
-
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
-
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
-## Verification Status
-
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
-
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
-
-## References
-
-- Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override


[2025-10-06T16:06:07] thinking

**Recreating deleted file**
[2025-10-06T16:06:21] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > reports/2025-10-cli-flags/phase_h5/parity_summary.md
# Phase H5 Parity Summary

**Date:** 2025-10-22
**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
**Goal:** Confirm the revert that skips "'`-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.

## Implementation Snapshot

### Code Changes
**File:** `src/nanobrag_torch/models/detector.py`

1. **Restored custom-vector guard** (lines ≈518-540):
   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).

2. **Doc updates**:
   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.

### Regression Test Results
**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`

**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)

Breakdown:
- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
- Overrides still applied without custom vectors (CPU + CUDA)

Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.

## Observed Physics Impact (Post-Revert)
- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
- `F_latt` disparity persists until Phase K aligns the sincg usage.

## Verification Status

✅ **Implementation complete** — precedence matches C behavior again.
✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.

## Immediate Next Steps (Phase H5c)
1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
2. Run the PyTorch trace harness:
   ```bash
   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE '"\\
   python reports/2025-10-cli-flags/phase_h/trace_harness.py \\
     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
   "'```
3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.

## References
- Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:06:22] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > reports/2025-10-cli-flags/phase_h5/parity_summary.md
# Phase H5 Parity Summary

**Date:** 2025-10-22
**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
**Goal:** Confirm the revert that skips "'`-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.

## Implementation Snapshot

### Code Changes
**File:** `src/nanobrag_torch/models/detector.py`

1. **Restored custom-vector guard** (lines ≈518-540):
   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).

2. **Doc updates**:
   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.

### Regression Test Results
**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`

**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)

Breakdown:
- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
- Overrides still applied without custom vectors (CPU + CUDA)

Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.

## Observed Physics Impact (Post-Revert)
- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
- `F_latt` disparity persists until Phase K aligns the sincg usage.

## Verification Status

✅ **Implementation complete** — precedence matches C behavior again.
✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.

## Immediate Next Steps (Phase H5c)
1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
2. Run the PyTorch trace harness:
   ```bash
   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE '"\\
   python reports/2025-10-cli-flags/phase_h/trace_harness.py \\
     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
   "'```
3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.

## References
- Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]
EOF
' succeeded in 915ms:

[2025-10-06T16:06:22] tokens used: 233,819
[2025-10-06T16:06:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:06:35] thinking

**Preparing input.md update**
[2025-10-06T16:06:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git branch --show-current' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:06:36] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git branch --show-current' succeeded in 807ms:
feature/spec-based-2
[2025-10-06T16:06:36] tokens used: 235,915
[2025-10-06T16:06:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:06:53] thinking

**Outlining input.md structure and content**

I'm mapping out the sections and key details for a new input.md file on branch feature/spec-based-2, including summary, phase, artifacts, commands, fallback instructions, priorities with doc references, how-to steps, pitfalls, pointers with line anchors, and optional next steps. I want to ensure about 100–200 lines total and clarify running commands without pytest, prepping dirs, and verifying instructions. I'll also find line numbers for referenced plan docs to provide precise anchors.
[2025-10-06T16:06:57] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '110,150p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:06:58] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '110,150p'" succeeded in 904ms:
   110	| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
   111	| H3b1 | Capture C vs PyTorch pix0/F/S references (override on/off) | [D] | ✅ 2025-10-17 Attempt #23: Stored paired C traces (`reports/2025-10-cli-flags/phase_h/implementation/c_trace_with_override.log` / `_without_override.log`), PyTorch traces, and `pix0_mapping_analysis.md`; evidence proves C geometry is identical with or without `-pix0_vector_mm` when custom vectors are supplied. |
   112	| H3b2 | Implement pix0 precedence (custom vectors > override) | [D] | ✅ 2025-10-06 Attempt #24 (commit d6f158c). `Detector._calculate_pix0_vector` now skips overrides when any custom detector vector is supplied; override logic only executes in the no-custom-vectors path. Validation: `tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_vector_mm_beam_pivot` (CPU) and evidence log `reports/2025-10-cli-flags/phase_h/implementation/pix0_override_validation.md`. Residual pix0 Y-delta (≈3.9 mm) traced to missing post-rotation `Fbeam/Sbeam` recomputation and deferred to H4. |
   113	| H3b3 | Repair CLI regression + artifacts for precedence | [D] | ✅ 2025-10-06 Attempt #24. Regression test now covers BOTH precedence cases (custom vectors ignored, standard path applies override) and records expected C pix0 vector in `pix0_expected.json`. CUDA parametrisation remains skipped until parity fix lands; tolerance temporarily relaxed to 5 mm pending H4 geometry alignment. |
   114	| H4a | Port post-rotation beam-centre recomputation | [D] | ✅ 2025-10-17 Attempt #25: Ported nanoBragg.c lines 1846-1860 into `Detector._calculate_pix0_vector`; see `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/implementation.md`. |
   115	| H4b | Refresh traces and parity evidence | [D] | ✅ 2025-10-17 Attempt #25: Stored C/PyTorch traces in `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/trace_c.log` and `trace_py.log`; `summary.md` records pix0 deltas ≤1.3e-8 m and `F_latt` agreement <0.2%. |
   116	| H4c | Tighten regression test + targeted pytest | [D] | ✅ 2025-10-17 Attempt #25: Updated regression tolerance to 5e-5 m (CPU and CUDA parametrised) and captured `pytest_h4c.log`; Attempt #25 logged in docs/fix_plan.md. |
   117	
   118	### Phase H5 — Custom Vector Pix0 Override Parity
   119	Goal: Bring PyTorch pix0 precedence back in line with C when custom detector vectors accompany `-pix0_vector_mm`, eliminating the 1.14 mm delta driving the `F_latt` mismatch.
   120	Prereqs: Phase H4 artifacts available; C precedence proof in `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`.
   121	Exit Criteria: Detector traces with custom vectors show `pix0_vector`, `Fbeam`, and `Sbeam` matching C within 5e-5 m, and fractional h/k/l plus `F_latt_a/b/c` align within 1e-3 relative difference before resuming normalization work.
   122	
   123	| ID | Task Description | State | How/Why & Guidance |
   124	| --- | --- | --- | --- |
   125	| H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
   126	| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
   127	| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
   128	| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
   129	
[2025-10-06T16:06:58] tokens used: 237,931
[2025-10-06T16:06:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:01] thinking

**Considering line number references**
[2025-10-06T16:07:05] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba specs/spec-a-core.md | sed -n '210,250p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:06] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba specs/spec-a-core.md | sed -n '210,250p'" succeeded in 720ms:
   210	                - Crystal orientation:
   211	                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
   212	about u by φ to get (ap,bp,cp).
   213	                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
   214	(a,b,c).
   215	                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
   216	                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
   217	                - Lattice factor F_latt:
   218	                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
   219	where
   220	                        - sincg(x,N) = N if x = 0; otherwise sin(N·x)/sin(x).
   221	                    - ROUND (sinc3 sphere): hrad^2 = (h−h0)^2·Na^2 + (k−k0)^2·Nb^2 + (l−l0)^2·Nc^2.
   222	                        - F_latt = Na·Nb·Nc·0.723601254558268 · sinc3(π·sqrt(fudge·hrad^2)), where
   223	                            - sinc3(x) = 3·[(sin x)/x − cos x]/x^2 (with sinc3(0)=1).
   224	                    - GAUSS (in reciprocal space): Let Δr*^2 = ||(h−h0)·a* + (k−k0)·b* + (l−l0)·c*||
   225	^2 · Na^2·Nb^2·Nc^2,
   226	                        - F_latt = Na·Nb·Nc·exp(−(Δr*^2 / 0.63)·fudge).
   227	                    - TOPHAT: F_latt = Na·Nb·Nc if (Δr*^2 · fudge < 0.3969); else 0.
   228	                - Structure factor F_cell:
   229	                    - If interpolation is on:
[2025-10-06T16:07:06] tokens used: 241,198
[2025-10-06T16:07:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:09] thinking

**Preparing line references for specs**
[2025-10-06T16:07:10] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba golden_suite_generator/nanoBragg.c | sed -n '3048,3088p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:10] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba golden_suite_generator/nanoBragg.c | sed -n '3048,3088p'" succeeded in 706ms:
  3048	
  3049	                                    /* trace output for specific pixel */
  3050	                                    if(fpixel==trace_fpixel && spixel==trace_spixel && source==0 && mos_tic==0 && phi_tic==0) {
  3051	                                        printf("TRACE_C: rot_a_angstroms %.15g %.15g %.15g\n", a[1]*1e10, a[2]*1e10, a[3]*1e10);
  3052	                                        printf("TRACE_C: rot_b_angstroms %.15g %.15g %.15g\n", b[1]*1e10, b[2]*1e10, b[3]*1e10);
  3053	                                        printf("TRACE_C: rot_c_angstroms %.15g %.15g %.15g\n", c[1]*1e10, c[2]*1e10, c[3]*1e10);
  3054	                                        printf("TRACE_C: rot_a_star_A_inv %.15g %.15g %.15g\n", a_star[1], a_star[2], a_star[3]);
  3055	                                        printf("TRACE_C: rot_b_star_A_inv %.15g %.15g %.15g\n", b_star[1], b_star[2], b_star[3]);
  3056	                                        printf("TRACE_C: rot_c_star_A_inv %.15g %.15g %.15g\n", c_star[1], c_star[2], c_star[3]);
  3057	                                        printf("TRACE_C: hkl_frac %.15g %.15g %.15g\n", h, k, l);
  3058	                                        printf("TRACE_C: hkl_rounded %d %d %d\n", h0, k0, l0);
  3059	                                    }
  3060	
  3061	
  3062	                                    /* structure factor of the lattice (paralelpiped crystal)
  3063	                                        F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
  3064	                                    */
  3065	                                    F_latt = 1.0;
  3066	                                    if(xtal_shape == SQUARE)
  3067	                                    {
[2025-10-06T16:07:10] tokens used: 242,437
[2025-10-06T16:07:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:14] thinking

**Identifying relevant documentation lines**
[2025-10-06T16:07:15] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/development/testing_strategy.md | sed -n '60,110p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:15] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/development/testing_strategy.md | sed -n '60,110p'" succeeded in 722ms:
    60	This allows for direct, line-by-line comparison of the entire physics calculation, making it possible to pinpoint the exact line of code where a divergence occurs.
    61	### 2.2 Instrumenting the C Code
    62	
    63	The `nanoBragg.c` source in `golden_suite_generator/` must be instrumented with a `-dump_pixel <slow> <fast>` command-line flag. When run with this flag, the program must write a detailed log file (`<test_case_name>_C_trace.log`) containing key intermediate variables (e.g., `scattering_vector`, `h`, `k`, `l`, `F_cell`, `F_latt`, `omega_pixel`, `polar`) for the specified pixel. This provides the ground truth for component-level testing.
    64	
    65	### 2.3 Golden Test Cases
    66	
    67	The following test cases will be defined, and all three artifacts (image, C trace, PyTorch trace) will be generated and stored in `tests/golden_data/`.
    68	
    69	| Test Case Name | Description | Purpose |
    70	| :--- | :--- | :--- |
    71	| `simple_cubic` | A 100Å cubic cell, single wavelength, no mosaicity, no oscillation. | The "hello world" test for basic geometry and spot calculation. |
    72	| `triclinic_P1` | A low-symmetry triclinic cell with misset orientation. | To stress-test the reciprocal space and geometry calculations. |
    73	| `simple_cubic_mosaic` | The `simple_cubic` case with mosaic spread. | To test the mosaic domain implementation. |
    74	| `cubic_tilted_detector` | Cubic cell with rotated and tilted detector. | To test general detector geometry implementation. |
    75	
    76	### 2.4 Canonical Generation Commands
    77	
    78	**⚠️ CRITICAL:** The following commands are the **single source of truth** for reproducing the golden data. All parallel verification MUST use these exact parameters. These commands must be run from within the `golden_suite_generator/` directory.
    79	
[2025-10-06T16:07:15] tokens used: 243,680
[2025-10-06T16:07:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:18] thinking

**Marking lines for citation**
[2025-10-06T16:07:22] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '180,220p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:23] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '180,220p'" succeeded in 723ms:

[2025-10-06T16:07:23] tokens used: 244,849
[2025-10-06T16:07:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:25] thinking

**Extending range to include Phase K**
[2025-10-06T16:07:27] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,260p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:28] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,260p'" succeeded in 678ms:

[2025-10-06T16:07:28] tokens used: 245,131
[2025-10-06T16:07:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:32] thinking

**Searching for "Phase K" location**
[2025-10-06T16:07:34] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "Phase K" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:34] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "Phase K" plans/active/cli-noise-pix0/plan.md' succeeded in 688ms:
7:- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
11:  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
127:| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
128:| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
150:| J3 | Update fix_plan Attempt log | [D] | ✅ 2025-10-19: Attempt #28 logged in `docs/fix_plan.md` with complete metrics, artifacts, and hypothesis (F_latt calculation error in sincg lattice shape factor). Phase I3 remains blocked pending Phase K F_latt fix. |
152:### Phase K — Normalization Implementation
[2025-10-06T16:07:34] tokens used: 245,379
[2025-10-06T16:07:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:39] thinking

**Checking lines near Phase K**
[2025-10-06T16:07:41] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '152,210p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:42] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '152,210p'" succeeded in 679ms:
   152	### Phase K — Normalization Implementation
   153	Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
   154	Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
   155	Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
   156	
   157	| ID | Task Description | State | How/Why & Guidance |
   158	| --- | --- | --- | --- |
   159	| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
   160	| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
   161	| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
   162	
   163	### Phase L — Final Parity & Regression Sweep
   164	Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
   165	Prereqs: Phases J–K complete; scaling regression tests green.
   166	Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
   167	
   168	| ID | Task Description | State | How/Why & Guidance |
   169	| --- | --- | --- | --- |
   170	| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
   171	| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
[2025-10-06T16:07:42] tokens used: 246,011
[2025-10-06T16:07:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:07:45] thinking

**Preparing to gather line numbers for docs**
[2025-10-06T16:07:48] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '448,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:07:49] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '448,520p'" succeeded in 679ms:
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A-H complete; polarization Phase I pending)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
   458	- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
   459	  1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   460	  2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
   461	  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
   462	- Attempts History:
   463	  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
   464	    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
   465	    Artifacts:
   466	      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
   467	      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-06T16:07:49] tokens used: 247,028
[2025-10-06T16:07:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:08:02] thinking

**Planning structured input.md assembly**

I’m organizing the `input.md` with carefully structured sections: a concise header line, a prioritized bullet list referencing exact file locations, clear how-to mapping commands, a list of pitfalls to avoid, pointers with line-numbered docs, and an optional next-up note—all aiming for about 120 purposeful lines following mania’s guidelines.
[2025-10-06T16:08:21] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Capture post-revert PyTorch traces so pix0/F_latt parity is documented before Phase K starts.
Phase: Evidence
Focus: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log; reports/2025-10-cli-flags/phase_h5/parity_summary.md
Do Now: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm — PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
If Blocked: Capture stdout/stderr plus traceback to reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/attempt_h5c_blocked.md, include device availability + torch version, then halt for supervisor review.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:118 — H5c is the remaining checklist item before Phase K can start; without the trace log we cannot prove pix0 parity post-revert.
- docs/fix_plan.md:507 — Next actions call for regenerating PyTorch traces and updating parity_summary.md before tackling the lattice-factor fix.
- reports/2025-10-cli-flags/phase_h5/parity_summary.md — Updated 2025-10-22 to demand new TRACE_PY logs and quantified deltas (<5e-5 m, <1e-3).
- specs/spec-a-core.md:217 — Confirms SQUARE lattice factor must use sincg(π·h, Na); upcoming Phase K verification hinges on the traces you will record now.
- golden_suite_generator/nanoBragg.c:3063 — C reference for the sincg(M_PI*h, Na) call you must match; trace diffing needs the PyTorch log generated in this loop.

How-To Map:
1. Prepare output directory:
   - "'`mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22`
2. Run trace harness (no pytest during Evidence phase):
   - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log`
3. Capture comparison notes:
   - Diff TRACE_PY vs `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log`
   - Append the observed deltas (pix0, F/S beams, h/k/l, F_latt) to `reports/2025-10-cli-flags/phase_h5/parity_summary.md`

Pitfalls To Avoid:
- Do not run pytest or nb-compare in this loop; Evidence phase forbids test execution.
- Leave C-side logs untouched under reports/2025-10-cli-flags/phase_h5/c_traces/; copy them if you need scratch space.
- Ensure the trace harness inherits `KMP_DUPLICATE_LIB_OK=TRUE` or it will crash on MKL duplication.
- Keep tensors on their original device/dtype; avoid `.cpu()` when post-processing results.
- Record the exact command invocation in parity_summary.md; lack of provenance stalls Phase K.
- Do not modify Detector code; H5b implementation is already merged and under test coverage.
- Respect Protected Assets: no edits to docs/index.md or loop.sh as part of this loop.
- Store diffs and notes inside the new py_traces directory; avoid scattering files across repo root.
- Use existing harness scripts only; no ad-hoc inline Python beyond mkdir.
- Run `git status` before finishing to ensure only reports and parity_summary.md changed.

Pointers:
- plans/active/cli-noise-pix0/plan.md:159 — Phase K1 task description you will unblock with today’s evidence.
- docs/fix_plan.md:448 — CLI-FLAGS-003 ledger for logging Attempt #32 after traces land.
- specs/spec-a-core.md:217 — Normative lattice-factor equation needed when analysing trace deltas.
- golden_suite_generator/nanoBragg.c:3063 — C sincg implementation for cross-checking PyTorch output.
- docs/development/testing_strategy.md:63 — Reminder that trace-driven validation precedes code edits.

Next Up:
- Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to swap the SQUARE lattice-factor calculation once H5c evidence is archived.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:08:22] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Capture post-revert PyTorch traces so pix0/F_latt parity is documented before Phase K starts.
Phase: Evidence
Focus: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log; reports/2025-10-cli-flags/phase_h5/parity_summary.md
Do Now: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm — PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
If Blocked: Capture stdout/stderr plus traceback to reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/attempt_h5c_blocked.md, include device availability + torch version, then halt for supervisor review.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:118 — H5c is the remaining checklist item before Phase K can start; without the trace log we cannot prove pix0 parity post-revert.
- docs/fix_plan.md:507 — Next actions call for regenerating PyTorch traces and updating parity_summary.md before tackling the lattice-factor fix.
- reports/2025-10-cli-flags/phase_h5/parity_summary.md — Updated 2025-10-22 to demand new TRACE_PY logs and quantified deltas (<5e-5 m, <1e-3).
- specs/spec-a-core.md:217 — Confirms SQUARE lattice factor must use sincg(π·h, Na); upcoming Phase K verification hinges on the traces you will record now.
- golden_suite_generator/nanoBragg.c:3063 — C reference for the sincg(M_PI*h, Na) call you must match; trace diffing needs the PyTorch log generated in this loop.

How-To Map:
1. Prepare output directory:
   - "'`mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22`
2. Run trace harness (no pytest during Evidence phase):
   - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log`
3. Capture comparison notes:
   - Diff TRACE_PY vs `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log`
   - Append the observed deltas (pix0, F/S beams, h/k/l, F_latt) to `reports/2025-10-cli-flags/phase_h5/parity_summary.md`

Pitfalls To Avoid:
- Do not run pytest or nb-compare in this loop; Evidence phase forbids test execution.
- Leave C-side logs untouched under reports/2025-10-cli-flags/phase_h5/c_traces/; copy them if you need scratch space.
- Ensure the trace harness inherits `KMP_DUPLICATE_LIB_OK=TRUE` or it will crash on MKL duplication.
- Keep tensors on their original device/dtype; avoid `.cpu()` when post-processing results.
- Record the exact command invocation in parity_summary.md; lack of provenance stalls Phase K.
- Do not modify Detector code; H5b implementation is already merged and under test coverage.
- Respect Protected Assets: no edits to docs/index.md or loop.sh as part of this loop.
- Store diffs and notes inside the new py_traces directory; avoid scattering files across repo root.
- Use existing harness scripts only; no ad-hoc inline Python beyond mkdir.
- Run `git status` before finishing to ensure only reports and parity_summary.md changed.

Pointers:
- plans/active/cli-noise-pix0/plan.md:159 — Phase K1 task description you will unblock with today’s evidence.
- docs/fix_plan.md:448 — CLI-FLAGS-003 ledger for logging Attempt #32 after traces land.
- specs/spec-a-core.md:217 — Normative lattice-factor equation needed when analysing trace deltas.
- golden_suite_generator/nanoBragg.c:3063 — C sincg implementation for cross-checking PyTorch output.
- docs/development/testing_strategy.md:63 — Reminder that trace-driven validation precedes code edits.

Next Up:
- Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to swap the SQUARE lattice-factor calculation once H5c evidence is archived.
EOF
' succeeded in 868ms:

[2025-10-06T16:08:22] tokens used: 252,113
[2025-10-06T16:08:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:08:26] thinking

**Verifying and planning file expansion**
[2025-10-06T16:08:27] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:08:27] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 695ms:
      46 input.md
[2025-10-06T16:08:27] tokens used: 254,410
[2025-10-06T16:08:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:08:37] thinking

**Expanding content to meet length**
[2025-10-06T16:09:02] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Capture post-revert PyTorch traces so pix0/F_latt parity is documented before Phase K starts.
Phase: Evidence
Focus: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log; reports/2025-10-cli-flags/phase_h5/parity_summary.md; reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md
Do Now: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm — PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
If Blocked: Capture stdout/stderr plus traceback to reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/attempt_h5c_blocked.md, note device availability ("'`torch.cuda.is_available()`), active commit, and rerun guidance instead of improvising a fix.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:118 — H5c is the final gating task before Phase K; without the refreshed PyTorch trace we cannot prove pix0/Fbeam/Sbeam parity after Attempt #31.
  The plan explicitly requires storing TRACE_PY output under `phase_h5/py_traces/2025-10-22/` and updating parity_summary.md before normalization can resume.
- docs/fix_plan.md:507 — Next actions list H5c evidence first, followed by the lattice-factor correction; adhering keeps fix_plan chronology synchronized with plan execution.
  Logging Attempt #32 hinges on producing the trace and metrics this loop.
- reports/2025-10-cli-flags/phase_h5/parity_summary.md — Updated on 2025-10-22 to reflect the revert; it now contains explicit thresholds (<5e-5 m pix0, <1e-3 F_latt ratio) that must be populated with fresh numbers.
  Leaving the table empty blocks Phase K sign-off.
- specs/spec-a-core.md:217 — Canonical definition for the SQUARE lattice factor (sincg(π·h, Na)); today’s trace will help confirm PyTorch still feeds `(h - h0)` so we can justify the upcoming fix.
  Cross-referencing the spec while inspecting the log prevents accidental formula drift.
- golden_suite_generator/nanoBragg.c:3063 — C implementation of the same sincg calls; diffing TRACE_PY against TRACE_C requires pointing engineers to this snippet to understand the expected values.
  Maintaining this evidence loop is part of the parallel trace SOP.

Context Snapshot:
- Attempt #31 reverted the override logic and restored C precedence; Phase H5b/H5d are closed.
- The outstanding gap is purely evidentiary—the PyTorch trace needs to be recaptured to prove pix0, Fbeam/Sbeam, and h/k/l match the C baseline captured on 2025-10-22.
- Once that parity is confirmed, Phase K1 will modify the lattice-factor formula; having before/after logs prevents regressions and streamlines review.

How-To Map:
1. Prepare the workspace
   - `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22`
   - Confirm the directory is empty or archive old scratch files to avoid mixing evidence.
2. Run the PyTorch trace harness exactly once (Evidence phase ⇒ no pytest):
   - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log`
   - The harness prints progress to stdout; tee output into `trace_py.stdout` if you want quick reference, but keep logs inside the py_traces folder.
3. Generate comparison notes for parity_summary.md:
   - `python - <<'"'PY'"'` snippet suggestion: load both trace files, compute per-field deltas, and write them to `diff_notes.md`.
   - Highlight pix0 components, Fbeam/Sbeam, fractional h/k/l, each F_latt component, and the aggregate F_latt product.
4. Update documentation artifacts:
   - Append the metric table + command provenance to `reports/2025-10-cli-flags/phase_h5/parity_summary.md`.
   - Draft Attempt #32 summary (even if partial) so docs/fix_plan.md can record the outcome next loop.
5. Housekeeping commands before handoff:
   - `ls -R reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` to verify only expected files exist.
   - `git status --short` to review staged/unstaged files.

Pitfalls To Avoid:
- Do not run pytest, nb-compare, or any CLI parity commands; Evidence phase forbids test execution.
- Leave C-side logs untouched; they are the reference for diffing and must not be edited or rewritten.
- Keep `KMP_DUPLICATE_LIB_OK=TRUE` in the environment; forgetting it causes MKL duplicate symbol crashes mid-run.
- Avoid `.cpu()` or `.item()` when post-processing tensors inside the harness; copy numbers using `.detach().clone()` if necessary.
- Record the exact command in parity_summary.md; undocumented commands break reproducibility.
- Do not modify Detector or Simulator code; today is evidence-only, not implementation.
- Respect Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md); no edits outside assigned files.
- Store new artifacts only inside the `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` directory to keep evidence tidy.
- No ad-hoc scripts in the repo root; reuse `reports/2025-10-cli-flags/phase_h/trace_harness.py` exclusively.
- Capture command failures verbatim in attempt_h5c_blocked.md if anything goes wrong; partial fixes without documentation force rework.

Pointers:
- plans/active/cli-noise-pix0/plan.md:159 — Phase K1 description you will unblock after recording today’s trace.
- docs/fix_plan.md:448 — CLI-FLAGS-003 ledger where Attempt #32 must be logged once metrics are computed.
- specs/spec-a-core.md:217 — Normative lattice-factor formula that the upcoming code change must follow.
- golden_suite_generator/nanoBragg.c:3063 — C sincg implementation for cross-checking TRACE_PY values.
- docs/development/testing_strategy.md:63 — Parallel trace SOP mandating trace comparison before implementation work.
- reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md — Evidence baseline you must match when interpreting today’s logs.
- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Prior scaling analysis showing the 3.6e-7 ratio; use it to verify improvements once Phase K begins.

Next Up:
- Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:09:03] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Capture post-revert PyTorch traces so pix0/F_latt parity is documented before Phase K starts.
Phase: Evidence
Focus: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log; reports/2025-10-cli-flags/phase_h5/parity_summary.md; reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md
Do Now: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm — PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
If Blocked: Capture stdout/stderr plus traceback to reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/attempt_h5c_blocked.md, note device availability ("'`torch.cuda.is_available()`), active commit, and rerun guidance instead of improvising a fix.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:118 — H5c is the final gating task before Phase K; without the refreshed PyTorch trace we cannot prove pix0/Fbeam/Sbeam parity after Attempt #31.
  The plan explicitly requires storing TRACE_PY output under `phase_h5/py_traces/2025-10-22/` and updating parity_summary.md before normalization can resume.
- docs/fix_plan.md:507 — Next actions list H5c evidence first, followed by the lattice-factor correction; adhering keeps fix_plan chronology synchronized with plan execution.
  Logging Attempt #32 hinges on producing the trace and metrics this loop.
- reports/2025-10-cli-flags/phase_h5/parity_summary.md — Updated on 2025-10-22 to reflect the revert; it now contains explicit thresholds (<5e-5 m pix0, <1e-3 F_latt ratio) that must be populated with fresh numbers.
  Leaving the table empty blocks Phase K sign-off.
- specs/spec-a-core.md:217 — Canonical definition for the SQUARE lattice factor (sincg(π·h, Na)); today’s trace will help confirm PyTorch still feeds `(h - h0)` so we can justify the upcoming fix.
  Cross-referencing the spec while inspecting the log prevents accidental formula drift.
- golden_suite_generator/nanoBragg.c:3063 — C implementation of the same sincg calls; diffing TRACE_PY against TRACE_C requires pointing engineers to this snippet to understand the expected values.
  Maintaining this evidence loop is part of the parallel trace SOP.

Context Snapshot:
- Attempt #31 reverted the override logic and restored C precedence; Phase H5b/H5d are closed.
- The outstanding gap is purely evidentiary—the PyTorch trace needs to be recaptured to prove pix0, Fbeam/Sbeam, and h/k/l match the C baseline captured on 2025-10-22.
- Once that parity is confirmed, Phase K1 will modify the lattice-factor formula; having before/after logs prevents regressions and streamlines review.

How-To Map:
1. Prepare the workspace
   - `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22`
   - Confirm the directory is empty or archive old scratch files to avoid mixing evidence.
2. Run the PyTorch trace harness exactly once (Evidence phase ⇒ no pytest):
   - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log`
   - The harness prints progress to stdout; tee output into `trace_py.stdout` if you want quick reference, but keep logs inside the py_traces folder.
3. Generate comparison notes for parity_summary.md:
   - `python - <<'"'PY'"'` snippet suggestion: load both trace files, compute per-field deltas, and write them to `diff_notes.md`.
   - Highlight pix0 components, Fbeam/Sbeam, fractional h/k/l, each F_latt component, and the aggregate F_latt product.
4. Update documentation artifacts:
   - Append the metric table + command provenance to `reports/2025-10-cli-flags/phase_h5/parity_summary.md`.
   - Draft Attempt #32 summary (even if partial) so docs/fix_plan.md can record the outcome next loop.
5. Housekeeping commands before handoff:
   - `ls -R reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` to verify only expected files exist.
   - `git status --short` to review staged/unstaged files.

Pitfalls To Avoid:
- Do not run pytest, nb-compare, or any CLI parity commands; Evidence phase forbids test execution.
- Leave C-side logs untouched; they are the reference for diffing and must not be edited or rewritten.
- Keep `KMP_DUPLICATE_LIB_OK=TRUE` in the environment; forgetting it causes MKL duplicate symbol crashes mid-run.
- Avoid `.cpu()` or `.item()` when post-processing tensors inside the harness; copy numbers using `.detach().clone()` if necessary.
- Record the exact command in parity_summary.md; undocumented commands break reproducibility.
- Do not modify Detector or Simulator code; today is evidence-only, not implementation.
- Respect Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md); no edits outside assigned files.
- Store new artifacts only inside the `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` directory to keep evidence tidy.
- No ad-hoc scripts in the repo root; reuse `reports/2025-10-cli-flags/phase_h/trace_harness.py` exclusively.
- Capture command failures verbatim in attempt_h5c_blocked.md if anything goes wrong; partial fixes without documentation force rework.

Pointers:
- plans/active/cli-noise-pix0/plan.md:159 — Phase K1 description you will unblock after recording today’s trace.
- docs/fix_plan.md:448 — CLI-FLAGS-003 ledger where Attempt #32 must be logged once metrics are computed.
- specs/spec-a-core.md:217 — Normative lattice-factor formula that the upcoming code change must follow.
- golden_suite_generator/nanoBragg.c:3063 — C sincg implementation for cross-checking TRACE_PY values.
- docs/development/testing_strategy.md:63 — Parallel trace SOP mandating trace comparison before implementation work.
- reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md — Evidence baseline you must match when interpreting today’s logs.
- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Prior scaling analysis showing the 3.6e-7 ratio; use it to verify improvements once Phase K begins.

Next Up:
- Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
EOF
' succeeded in 942ms:

[2025-10-06T16:09:03] tokens used: 256,746
[2025-10-06T16:09:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:09:06] thinking

**Checking line count**
[2025-10-06T16:09:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:09:11] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 728ms:
      66 input.md
[2025-10-06T16:09:11] tokens used: 259,220
[2025-10-06T16:09:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:09:17] thinking

**Planning to expand file with detailed sections**
[2025-10-06T16:09:29] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -66 +66,32 @@
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
[2025-10-06T16:09:29] apply_patch(auto_approved=true) exited 0 in 29ms:
Success. Updated the following files:
M input.md
[2025-10-06T16:09:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..8e399c0bce54aeaed3e2d6b996a44edea048b5ba
--- a/input.md
+++ b/input.md
@@ -64,3 +64,34 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]

[2025-10-06T16:09:29] tokens used: 260,226
[2025-10-06T16:09:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..8e399c0bce54aeaed3e2d6b996a44edea048b5ba
--- a/input.md
+++ b/input.md
@@ -64,3 +64,34 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:09:33] thinking

**Verifying line count**
[2025-10-06T16:09:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:09:36] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 947ms:
      97 input.md
[2025-10-06T16:09:36] tokens used: 261,744
[2025-10-06T16:09:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..8e399c0bce54aeaed3e2d6b996a44edea048b5ba
--- a/input.md
+++ b/input.md
@@ -64,3 +64,34 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:09:40] thinking

**Planning content expansion**
[2025-10-06T16:09:44] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -97 +97,7 @@
 - Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
[2025-10-06T16:09:44] apply_patch(auto_approved=true) exited 0 in 46ms:
Success. Updated the following files:
M input.md
[2025-10-06T16:09:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]

[2025-10-06T16:09:44] tokens used: 262,489
[2025-10-06T16:09:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:09:48] thinking

**Counting lines**
[2025-10-06T16:09:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:09:49] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 718ms:
     103 input.md
[2025-10-06T16:09:49] tokens used: 263,396
[2025-10-06T16:09:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:02] thinking

**Preparing to update galph_memory.md**
[2025-10-06T16:10:08] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-10-24 (galph loop — H5c evidence prep)
- Refreshed CLI-FLAGS-003 plan: marked H5b/H5d done, inserted doc anchor list, and rewrote Phase K tasks to target the sincg(h) bug ("'`plans/active/cli-noise-pix0/plan.md`).
- Updated fix_plan next actions to focus on H5c traces then Phase K1 lattice-factor fix (`docs/fix_plan.md:448-510`).
- Replaced `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with post-revert guidance pointing Ralph to regenerate TRACE_PY logs (2025-10-22 baseline).
- Issued new input.md (Evidence phase) directing Ralph to run the trace harness and archive metrics before code changes.
- Key finding: PyTorch SQUARE lattice factor still feeds sincg with `(h-h0)` (src/nanobrag_torch/simulator.py) vs C’s `sincg(M_PI*h, Na)` (`golden_suite_generator/nanoBragg.c:3063-3080`); Phase K1 must correct this.
- Follow-up expectations: Ralph generates H5c PyTorch traces under `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`, updates parity_summary metrics, and drafts Attempt #32.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:08] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-10-24 (galph loop — H5c evidence prep)
- Refreshed CLI-FLAGS-003 plan: marked H5b/H5d done, inserted doc anchor list, and rewrote Phase K tasks to target the sincg(h) bug ("'`plans/active/cli-noise-pix0/plan.md`).
- Updated fix_plan next actions to focus on H5c traces then Phase K1 lattice-factor fix (`docs/fix_plan.md:448-510`).
- Replaced `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with post-revert guidance pointing Ralph to regenerate TRACE_PY logs (2025-10-22 baseline).
- Issued new input.md (Evidence phase) directing Ralph to run the trace harness and archive metrics before code changes.
- Key finding: PyTorch SQUARE lattice factor still feeds sincg with `(h-h0)` (src/nanobrag_torch/simulator.py) vs C’s `sincg(M_PI*h, Na)` (`golden_suite_generator/nanoBragg.c:3063-3080`); Phase K1 must correct this.
- Follow-up expectations: Ralph generates H5c PyTorch traces under `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`, updates parity_summary metrics, and drafts Attempt #32.
EOF
' succeeded in 821ms:

[2025-10-06T16:10:08] tokens used: 264,399
[2025-10-06T16:10:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:12] thinking

**Preparing to commit changes**
[2025-10-06T16:10:14] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:15] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 751ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
 M reports/2025-10-cli-flags/phase_h5/parity_summary.md
[2025-10-06T16:10:15] tokens used: 265,420
[2025-10-06T16:10:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:18] thinking

**Reviewing diffs before commit**
[2025-10-06T16:10:22] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:23] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff plans/active/cli-noise-pix0/plan.md' succeeded in 775ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b4..d92b693 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
[2025-10-06T16:10:23] tokens used: 265,736
[2025-10-06T16:10:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:27] thinking

**Reviewing documentation changes**
[2025-10-06T16:10:28] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:29] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff docs/fix_plan.md' succeeded in 757ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697..2931e48 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
[2025-10-06T16:10:29] tokens used: 268,194
[2025-10-06T16:10:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:32] thinking

**Reviewing specific markdown diff**
[2025-10-06T16:10:33] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff reports/2025-10-cli-flags/phase_h5/parity_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff reports/2025-10-cli-flags/phase_h5/parity_summary.md' succeeded in 694ms:
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709..35b299e 100644
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
[2025-10-06T16:10:33] tokens used: 269,015
[2025-10-06T16:10:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:36] thinking

**Reviewing input.md changes**
[2025-10-06T16:10:37] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:38] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff input.md' succeeded in 727ms:
diff --git a/input.md b/input.md
index 403fde0..386ec5e 100644
--- a/input.md
+++ b/input.md
@@ -1,131 +1,103 @@
-Summary: Restore pix0 precedence with custom detector vectors so PyTorch reproduces C `F_latt` for the supervisor command.
-Phase: Implementation
+Summary: Capture post-revert PyTorch traces so pix0/F_latt parity is documented before Phase K starts.
+Phase: Evidence
 Focus: CLI-FLAGS-003 / Handle -nonoise and -pix0_vector_mm
 Branch: feature/spec-based-2
-Mapped tests: tests/test_cli_flags.py::TestCLIPix0Override
-Artifacts: reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log, reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/, reports/2025-10-cli-flags/phase_h5/parity_summary.md, docs/fix_plan.md (Attempt #31 entry)
-Do Now: CLI-FLAGS-003 H5b — revert custom-vector pix0 override (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`)
-Do Now note: Commit d6f158c kept overrides disabled; Attempt #29 reintroduced them. Restore the pre-Attempt-29 behavior while preserving new r-factor math.
-Do Now note: Annotate code comments referencing `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` so future readers know why overrides are skipped with custom vectors.
-If Blocked: Halt after editing the detector; log the failure cause, git diff, and current pix0 deltas in `reports/2025-10-cli-flags/phase_h5/attempt_h5b_blocked.md`, then wait for supervisor guidance.
-If Blocked note: Include command output (tail 20 lines) and environment details (device availability, torch version).
-If Blocked note: Mention whether pytest or trace harness failed; do not attempt ad-hoc fixes.
+Mapped tests: none — evidence-only
[2025-10-06T16:10:38] tokens used: 271,071
[2025-10-06T16:10:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:40] thinking

**Reviewing galph_memory diff**
[2025-10-06T16:10:42] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:42] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff galph_memory.md' succeeded in 709ms:
diff --git a/galph_memory.md b/galph_memory.md
index f096e27..0930787 100644
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1177,3 +1177,11 @@ Follow-ups for Ralph:
 - Reissued `input.md` (131 lines, Implementation phase) directing Ralph to remove the override for custom vectors, rerun targeted pytest + trace harness, update parity_summary.md, and log Attempt #31 before touching Phase K.
 - Hypotheses for remaining intensity gap now hinge on normalization once geometry parity returns; no new plan beyond existing Phase K tasks.
 - Follow-ups for Ralph: execute Do Now revert + tests, capture PyTorch traces under `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`, update parity_summary.md and docs/fix_plan Attempt history, then pause for supervisor review before Phase K work.
+
+## 2025-10-24 (galph loop — H5c evidence prep)
+- Refreshed CLI-FLAGS-003 plan: marked H5b/H5d done, inserted doc anchor list, and rewrote Phase K tasks to target the sincg(h) bug (`plans/active/cli-noise-pix0/plan.md`).
+- Updated fix_plan next actions to focus on H5c traces then Phase K1 lattice-factor fix (`docs/fix_plan.md:448-510`).
+- Replaced `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with post-revert guidance pointing Ralph to regenerate TRACE_PY logs (2025-10-22 baseline).
+- Issued new input.md (Evidence phase) directing Ralph to run the trace harness and archive metrics before code changes.
+- Key finding: PyTorch SQUARE lattice factor still feeds sincg with `(h-h0)` (src/nanobrag_torch/simulator.py) vs C’s `sincg(M_PI*h, Na)` (`golden_suite_generator/nanoBragg.c:3063-3080`); Phase K1 must correct this.
+- Follow-up expectations: Ralph generates H5c PyTorch traces under `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`, updates parity_summary metrics, and drafts Attempt #32.
[2025-10-06T16:10:42] tokens used: 273,958
[2025-10-06T16:10:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:46] thinking

**Staging all modified files**
[2025-10-06T16:10:48] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md reports/2025-10-cli-flags/phase_h5/parity_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:49] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md reports/2025-10-cli-flags/phase_h5/parity_summary.md' succeeded in 703ms:

[2025-10-06T16:10:49] tokens used: 275,324
[2025-10-06T16:10:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:51] thinking

**Checking status**
[2025-10-06T16:10:52] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:53] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 778ms:
M  docs/fix_plan.md
M  galph_memory.md
M  input.md
M  plans/active/cli-noise-pix0/plan.md
M  reports/2025-10-cli-flags/phase_h5/parity_summary.md
[2025-10-06T16:10:53] tokens used: 275,773
[2025-10-06T16:10:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:10:56] thinking

**Committing with descriptive message**
[2025-10-06T16:10:58] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI-FLAGS-003 guidance - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:10:59] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI-FLAGS-003 guidance - tests: not run"' succeeded in 724ms:
[feature/spec-based-2 35ac6f4] SUPERVISOR: CLI-FLAGS-003 guidance - tests: not run
 5 files changed, 148 insertions(+), 182 deletions(-)
[2025-10-06T16:10:59] tokens used: 276,071
[2025-10-06T16:10:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:11:01] thinking

**Confirming files staged for push**
[2025-10-06T16:11:02] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:11:05] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.23s:
To github.com:hoidn/nanoBragg.git
   893b87e..35ac6f4  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T16:11:05] tokens used: 276,394
[2025-10-06T16:11:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:11:20] thinking

**Finalizing detailed Step 1 summary**

I'm putting together a comprehensive final response that covers the Step 1 deep analysis, including key issues like the F_latt formula and polarization differences, plus hypotheses and next steps ranked by priority. I'll also reference specific file lines for clarity, update about changes in input.md and other docs, and outline the updated plan and guidance for Ralph—all in a concise, approachable tone.
[2025-10-06T16:11:22] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_h5/parity_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:11:23] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_h5/parity_summary.md' succeeded in 810ms:
     1	# Phase H5 Parity Summary
     2	
     3	**Date:** 2025-10-22
     4	**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
     5	**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
     6	
     7	## Implementation Snapshot
     8	
     9	### Code Changes
    10	**File:** `src/nanobrag_torch/models/detector.py`
    11	
    12	1. **Restored custom-vector guard** (lines ≈518-540):
    13	   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
    14	   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
    15	   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
    16	
    17	2. **Doc updates**:
    18	   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
    19	
    20	### Regression Test Results
[2025-10-06T16:11:23] tokens used: 277,949
[2025-10-06T16:11:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:11:29] thinking

**Preparing file references with line numbers**
[2025-10-06T16:11:30] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba src/nanobrag_torch/simulator.py | sed -n '200,240p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:11:31] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba src/nanobrag_torch/simulator.py | sed -n '200,240p'" succeeded in 719ms:
   200	    k0 = torch.round(k)
   201	    l0 = torch.round(l)
   202	
   203	    # Look up structure factors
   204	    F_cell = crystal_get_structure_factor(h0, k0, l0)
   205	
   206	    # Ensure F_cell is on the same device as h (device-neutral implementation per Core Rule #16)
   207	    # The crystal.get_structure_factor may return CPU tensors even when h0/k0/l0 are on CUDA
   208	    if F_cell.device != h.device:
   209	        F_cell = F_cell.to(device=h.device)
   210	
   211	    # Calculate lattice structure factor
   212	    Na = N_cells_a
   213	    Nb = N_cells_b
   214	    Nc = N_cells_c
   215	    shape = crystal_shape
   216	    fudge = crystal_fudge
   217	
   218	    if shape == CrystalShape.SQUARE:
   219	        F_latt_a = sincg(torch.pi * (h - h0), Na)
[2025-10-06T16:11:31] tokens used: 279,404
[2025-10-06T16:11:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:11:36] thinking

**Referencing bug and plans documents**
[2025-10-06T16:11:37] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/vectorization.md | sed -n '1,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:11:38] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/vectorization.md | sed -n '1,80p'" succeeded in 673ms:
     1	## Context
     2	- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
     3	- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
     4	- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
     5	
     6	### Phase A — Evidence & Baseline Capture
     7	Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
     8	Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
     9	Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.
    10	
    11	| ID | Task Description | State | How/Why & Guidance |
    12	| --- | --- | --- | --- |
    13	| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
    14	| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
    15	| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
    16	
    17	### Phase B — Tricubic Vectorization Design
    18	Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
    19	Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
    20	Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T16:11:38] tokens used: 280,427
[2025-10-06T16:11:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:11:45] thinking

**Outlining hypotheses and next steps**
[2025-10-06T16:11:47] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_j/scaling_chain.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:11:48] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_j/scaling_chain.md' succeeded in 871ms:
     1	# Scaling Chain Analysis: C vs PyTorch
     2	
     3	**Pixel:** (slow=1039, fast=685)
     4	
     5	## Key Findings
     6	
     7	**First Divergence:** `I_before_scaling`
     8	- C value: 1.480792010454e+15
     9	- PyTorch value: 5.344373483470e+08
    10	- Ratio (Py/C): 3.609132e-07
    11	
    12	**Final Intensity Ratio (Py/C):** 1.053e-05
    13	
    14	## Full Factor Comparison
    15	
    16	| Factor | C Value | PyTorch Value | Ratio (Py/C) | Match? |
    17	|--------|---------|---------------|--------------|--------|
    18	| I_before_scaling | 1.480792e+15 | 5.344373e+08 | 3.609132e-07 | ❌ |
    19	| steps | 1.000000e+01 | 1.000000e+01 | 1.000000e+00 | ✅ |
    20	| r_e_sqr | 7.940792e-30 | 7.940792e-30 | 1.000000e+00 | ✅ |
[2025-10-06T16:11:48] tokens used: 282,155
[2025-10-06T16:11:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]


[2025-10-06T16:11:57] thinking

**Drafting final hypothesis message**

I'm organizing the final message to include key updates like CLI-FLAGS plan changes and lattice-factor bug documentation, followed by two ranked hypotheses with verification steps, and finishing with next steps and long-term plan status to clearly address the debugging task requirements.
[2025-10-06T16:11:58] codex

Refocused CLI-FLAGS work on the pending H5c evidence and documented the lattice-factor disparity that blocks Phase K normalization.

- `plans/active/cli-noise-pix0/plan.md:118-161` now marks H5b/H5d done, adds the required doc anchors, and rewrites Phase K1–K3 to target the sincg(h) fix and follow-on scaling checks.
- `docs/fix_plan.md:448-510` points Ralph to regenerate H5c PyTorch traces first, then tackle the SQUARE lattice-factor correction before rerunning supervisor parity.
- `reports/2025-10-cli-flags/phase_h5/parity_summary.md:3-51` was rebuilt with post-revert guidance, explicitly listing the trace harness command and tolerances that must be met before Phase K starts.
- `input.md:1-103` switches the loop to Evidence phase; Do Now is the trace harness command, with a detailed checklist/templates so Ralph archives metrics under `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
- `galph_memory.md` logs today’s decisions plus the outstanding follow-up, keeping future supervisor turns aligned.

Hypotheses & triage:
1. **Primary gap — SQUARE lattice uses fractional indices.** Evidence: `src/nanobrag_torch/simulator.py:218-222` multiplies sincg by `(h-h0)`, while both spec (`specs/spec-a-core.md:217`) and C (`golden_suite_generator/nanoBragg.c:3063-3080`) require full `h`. Confidence: high. Next confirming step: after H5c traces land, patch the SQUARE branch to use full `h/k/l` and rerun the Phase J scaling script to confirm `F_latt` parity.
2. **Secondary gap — Polarization ratio still off by ~9.6%.** Evidence: `reports/2025-10-cli-flags/phase_j/scaling_chain.md:18-24`. Confidence: medium (may resolve once lattice factor is fixed). Next step: rerun the scaling-chain analysis after the sincg fix; if the ratio persists, resume Phase I3 polarization checks.

Long-term goal status reminders:
- Goal #1 (parallel CLI parity): H5c trace capture is the immediate blocker; Phase K work must implement the sincg(h) change and add regression coverage before reattempting the full supervisor command.
- Goal #2 (vectorization) remains at Phase A; `plans/active/vectorization.md:6-35` still needs baseline pytest logs and benchmark harnesses before any implementation begins.

Next steps for Ralph: follow the new `input.md` Evidence loop, archive the trace metrics, and draft Attempt #32; once H5c passes, move directly into Phase K1 as outlined.
[2025-10-06T16:12:11] tokens used: 284,007
[2025-10-06T16:12:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index fe65697787ed5a83194a8e6d57df94b2e34885ff..2931e48f5748ad6438b501349a96c10773273e06
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -504,7 +504,10 @@
       - **C Reference:** golden_suite_generator/nanoBragg.c:308-309 sets polar=1.0, polarization=0.0, nopolar=0
       - **Test Coverage:** Validates default matches C (1.0), -nopolar flag behavior, and -polar <value> override
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
-    Next Actions: Execute Phase I3 final parity sweep by running the supervisor command end-to-end (PyTorch CLI + C reference), stash logs under `reports/2025-10-cli-flags/phase_i/supervisor_command/`, document polarization metrics in Attempt #27, then close CLI-FLAGS-003.
+    Next Actions:
+      1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
+      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
+      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/input.md b/input.md
index db4db99950502fec7a33f12e3d8ceb55146f12fa..386ec5e7af1e982ec7e3c6dda23d37b055ceda72
--- a/input.md
+++ b/input.md
@@ -64,3 +64,40 @@
 
 Next Up:
 - Begin Phase K1 (`plans/active/cli-noise-pix0/plan.md:159`) to replace `(h - h0)` with full-`h` sincg usage in Simulator once H5c metrics are published.
+
+Trace Fields Checklist:
+- pix0_vector (meters) — confirm Δ < 5e-5 m per component; document absolute and relative differences.
+- Fbeam/Sbeam (meters) — expect ≈0.2179 m; record signed deltas for each axis.
+- Fractional h/k/l — capture both rounded integers and residuals; highlight any deviation beyond 1e-6.
+- F_latt components — list F_latt_a/b/c plus the product; contrast against C values (35636 baseline).
+- I_before_scaling — optional sanity check to show improvement versus Phase J ratios.
+- Polarization & omega — note values even if unchanged to provide complete trace context.
+
+Evidence Logging Template (fill inside diff_notes.md):
+```
+Command:
+  PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+
+Metrics Summary:
+  pix0 ΔS = _____ m, ΔF = _____ m, ΔO = _____ m
+  Fbeam Δ = _____ m; Sbeam Δ = _____ m
+  h/k/l residuals = (____, ____, ____)
+  F_latt components: PyTorch (____, ____, ____), product = ____
+  C reference: reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log
+
+Notes:
+  - …
+```
+
+Post-Run Review Steps:
+- Validate that `trace_py.log` includes TRACE_PY headers for every variable listed above; rerun harness if truncated.
+- Double-check timestamps on generated files to ensure they reflect the current loop (should match today’s date).
+- Stage artifacts with `git add reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22` once satisfied; leave parity_summary.md unstaged until wording is final.
+- Update Attempt history draft (docs/fix_plan.md) in a temporary note so the supervisor can promote it during the next review cycle.
+- Snapshot `git diff --stat` for personal reference; attach to Attempt entry if anomalies appear.
+
+Attempt Naming Guidance:
+- Title new entry “Attempt #32 — Phase H5c PyTorch trace refresh” when drafting in docs/fix_plan.md.
+- Include the command, timestamp, and a one-line verdict (e.g., “pix0 parity achieved / pending”).
+- Reference both trace files explicitly so reviewers can reproduce the diff without guessing file paths.
+- Note any unexpected deltas even if they fall within tolerance; these inform Phase K prioritisation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 5c3e5b436b2e22134def6a137eddb13ef4089daa..d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -4,9 +4,14 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-21): Phase H5b implementation reinstated the pix0 override for custom detector vectors (`reports/2025-10-cli-flags/phase_h5/parity_summary.md`); pending work is to refresh C precedence traces (H5a) and capture PyTorch parity logs (H5c) before resuming Phase K normalization tasks.
-- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because H5b applied the override unconditionally, yielding a 1.14 mm pix0 delta and the 3.6e-7 `F_latt` ratio. Revert the override in the custom-vector path and reconfirm parity before entering Phase K.
+- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
+- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
+- Documentation anchors for this focus:
+  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
+  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
+  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
+  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
 
 ### Phase A — Requirements & Trace Alignment
 Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
@@ -118,9 +123,9 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
-| H5b | Revert PyTorch override when custom vectors supplied | [ ] | Undo the unconditional override path introduced in Attempt #29. In `Detector._calculate_pix0_vector`, gate the pix0_override projection so it runs only when **no** custom detector vectors are provided. Preserve device/dtype neutrality and keep regression coverage by updating `tests/test_cli_flags.py::TestCLIPix0Override` if expectations change. Capture targeted pytest output in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` and summarise the implementation in `phase_h5/implementation_notes.md`. |
-| H5c | Capture updated PyTorch traces & compare | [ ] | After reverting, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
-| H5d | Update fix_plan Attempt log | [ ] | Log the revert and trace parity metrics in `docs/fix_plan.md` (new attempt), explicitly noting how the change restores `F_latt` agreement and unblocks Phase K normalization work. |
+| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
+| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
+| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -151,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
-| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
-| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
diff --git a/reports/2025-10-cli-flags/phase_h5/parity_summary.md b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
index 1aac709b3af2e3acf0d33bfccb551ff11663fd8a..35b299e2049a5279b6469451eb175b935b5221cc
--- a/reports/2025-10-cli-flags/phase_h5/parity_summary.md
+++ b/reports/2025-10-cli-flags/phase_h5/parity_summary.md
@@ -1,79 +1,57 @@
 # Phase H5 Parity Summary
 
-**Date:** 2025-10-21
-**Task:** CLI-FLAGS-003 Phase H5 — Restore pix0 override in custom-vector path
-**Goal:** Ensure PyTorch applies `-pix0_vector_mm` override even when custom detector vectors are present, matching C behavior
+**Date:** 2025-10-22
+**Task:** CLI-FLAGS-003 Phase H5 — Reinstate C precedence for pix0 overrides when custom detector vectors are supplied
+**Goal:** Confirm the revert that skips `-pix0_vector_mm` whenever custom detector vectors are present, then capture matching PyTorch traces so Phase K normalization work starts from a geometry-accurate baseline.
 
-## Implementation Summary
+## Implementation Snapshot
 
 ### Code Changes
 **File:** `src/nanobrag_torch/models/detector.py`
 
-1. **Removed custom-vector gate** (line ~540):
-   - OLD: `if pix0_override_tensor is not None and not has_custom_vectors:`
-   - NEW: `if pix0_override_tensor is not None:`
+1. **Restored custom-vector guard** (lines ≈518-540):
+   - Added `has_custom_vectors = any([...])` helper mirroring C precedence.
+   - Gated pix0 override projection with `if pix0_override_tensor is not None and not has_custom_vectors:`.
+   - Refreshed comments to cite `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` (evidence that C ignores the override in this configuration).
 
-2. **Updated documentation** (lines 518-531):
-   - Removed outdated "C code IGNORES" comment
-   - Added Phase J evidence reference (2025-10-21)
-   - Documented correct override workflow
+2. **Doc updates**:
+   - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` now records the revert (Attempt #31) and supersedes Attempt #29 notes.
 
 ### Regression Test Results
-**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_detector_geometry.py tests/test_crystal_geometry.py -v`
-
-**Results:** ✅ **57 passed, 1 warning in 5.41s**
+**Command:** `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override -v`
 
-**Breakdown:**
-- CLI flags tests: 26/26 passed
-- Detector geometry tests: 12/12 passed
-- Crystal geometry tests: 19/19 passed
+**Results:** ✅ **4 passed in 2.43s** (`reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`)
 
-**No regressions introduced.**
+Breakdown:
+- Overrides skipped when custom vectors present (CPU + CUDA parameterisations)
+- Overrides still applied without custom vectors (CPU + CUDA)
 
-## Expected Physics Impact
+Core CLI/geometry suites were not rerun in this loop; last recorded run (2025-10-17) remained green.
 
-### Before Change (Phase H3b implementation)
-When custom detector vectors were present, PyTorch:
-- Skipped pix0_override application
-- Used default beam center calculations
-- Resulted in Fbeam/Sbeam ≈ 0.037 m (wrong)
-- Caused 1.14 mm pix0 Y-axis error
-- Produced F_latt mismatch: PyTorch -2.4/11.8/-2.7 vs C 35.9/38.6/25.7
+## Observed Physics Impact (Post-Revert)
+- pix0 deltas vs C (pre-traces): expected to return to <5e-5 m once PyTorch traces are refreshed.
+- Fbeam/Sbeam: should revert to ≈0.218 m after re-running trace harness.
+- `F_latt` disparity persists until Phase K aligns the sincg usage.
 
-### After Change (Phase H5b implementation)
-With custom detector vectors present, PyTorch now:
-- Applies pix0_override → derives Fbeam/Sbeam ≈ 0.218 m
-- Should match C geometry
-- Expected to close 1.14 mm pix0 gap
-- Expected to align F_latt components
-
 ## Verification Status
 
-✅ **Code implementation complete** - Removed gate, preserved device/dtype neutrality
-✅ **Regression suite green** - All 57 tests passing
-⏳ **Parity verification pending** - Need to run supervisor command and compare C vs PyTorch traces
-
-## Next Actions
-
-1. **Generate full parity comparison** (Phase H5c):
-   - Run supervisor command with C binary
-   - Run with PyTorch implementation
-   - Extract pix0_vector, Fbeam, Sbeam, h/k/l, F_latt from both
-   - Document deltas in `phase_h5/trace_comparison.md`
-
-2. **Update fix_plan** (Phase H5d):
-   - Record Attempt #29 in `docs/fix_plan.md`
-   - Include metrics and artifact paths
-   - Note remaining normalization gaps for Phase K
+✅ **Implementation complete** — precedence matches C behavior again.
+✅ **Regression coverage restored** — targeted CLI tests verify both override paths.
+⏳ **Parity evidence pending** — need updated PyTorch traces (post-revert) to confirm pix0/Fbeam/Sbeam/hkl/`F_latt` align with the C logs captured on 2025-10-22.
 
-3. **Test expectation update** (if parity achieved):
-   - Update `tests/test_cli_flags.py::test_pix0_vector_mm_beam_pivot`
-   - Change from "override has NO EFFECT" to "override IS applied"
-   - Tighten tolerance back to 5e-5 m
+## Immediate Next Steps (Phase H5c)
+1. Create output directory: `mkdir -p reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`.
+2. Run the PyTorch trace harness:
+   ```bash
+   PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE \
+   python reports/2025-10-cli-flags/phase_h/trace_harness.py \
+     --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
+   ```
+3. Diff against `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/trace_c_with_override.log` and record deltas in a refreshed `parity_summary.md` table (<5e-5 m pix0, <1e-3 relative `F_latt`).
+4. Log the outcome in docs/fix_plan.md Attempt history when metrics land.
 
 ## References
-
 - Implementation notes: `reports/2025-10-cli-flags/phase_h5/implementation_notes.md`
-- Test log: `reports/2025-10-cli-flags/phase_h5/pytest_regression.log`
-- Plan: `plans/active/cli-noise-pix0/plan.md` Phase H5
-- Evidence base: Phase J traces (2025-10-21) showing C honors override
+- C precedence proof: `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`
+- Plan checkpoint: `plans/active/cli-noise-pix0/plan.md` Phase H5/H5c
+- Fix plan entry: `docs/fix_plan.md` §[CLI-FLAGS-003]

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   35ac6f4..b31b1f3  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=37...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=37
Updating b31b1f3..54b9004
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   b31b1f3..54b9004  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=37
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 54b9004..ed1a905
Fast-forward
 docs/fix_plan.md                                   | 41 +++++++---
 .../2025-10-cli-flags/phase_h5/parity_summary.md   | 50 +++++++++++-
 .../phase_h5/py_traces/2025-10-22/diff_notes.md    | 93 ++++++++++++++++++++++
 .../phase_h5/py_traces/2025-10-22/trace_py.log     | 40 ++++++++++
 .../phase_h5/py_traces/2025-10-22/trace_py.stdout  | 51 ++++++++++++
 5 files changed, 261 insertions(+), 14 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md
 create mode 100644 reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
 create mode 100644 reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.stdout
From github.com:hoidn/nanoBragg
   54b9004..ed1a905  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating ed1a905..1697e53
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   ed1a905..1697e53  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=38
Ralph completed iteration 37; proceeding to 38
