Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=103
To github.com:hoidn/nanoBragg.git
   292ce44..9d3f90d  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T15:16:10] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T15:16:10] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T15:16:13] thinking

**Preparing to update repository**
[2025-10-07T15:16:14] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:17] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' succeeded in 2.57s:
Already up to date.
[2025-10-07T15:16:17] tokens used: 14,062

[2025-10-07T15:16:19] thinking

**Preparing to review galph_memory.md**
[2025-10-07T15:16:20] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && test -f galph_memory.md && tail -n 200 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:20] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && test -f galph_memory.md && tail -n 200 galph_memory.md' succeeded in 710ms:
- Authored new input.md (100 lines) directing Ralph to adapt the harness to the `(F_grid, metadata)` API, rerun the supervisor command capture, and archive refreshed TRACE_PY artifacts before Phase L2c resumes.
- Focus next loop: confirm harness patch lands, collect live trace data, then execute compare_scaling_traces.py to re-enter normalization analysis.

## 2025-11-14 (galph loop — Phase L2b orientation fix)
- Verified repo up to date; reviewed core docs plus CLI plan & latest scaling artifacts.
- Diagnosed F_cell=0 in trace harness: `trace_harness.py` feeds all MOSFLM vectors into `mosflm_a_star` and leaves the other slots `None`, so Crystal falls back to default orientation during Phase L2b.
- Updated `plans/active/cli-noise-pix0/plan.md` L2b guidance and `docs/fix_plan.md` Next Actions / Attempt notes to call out the MOSFLM injection bug as the gating fix.
- Rewrote `input.md` directing Ralph to patch the harness, rerun the supervisor trace command, refresh artifacts, then proceed to L2c comparison.
- Follow-up for Ralph: apply the harness fix (`mosflm_a_star/b_star/c_star` assignments), rerun trace harness with supervisor flags, archive refreshed `trace_py_scaling.log`, execute `compare_scaling_traces.py`, and log the new Attempt entry before tackling normalization.

## 2025-11-14 (galph loop — L2b HKL wiring)
- `git pull --rebase` clean; reviewed core docs plus CLI plan and fix_plan before analysis.
- Evidence run (`reports/.../harness_hkl_state.txt`) shows `trace_harness.py` never assigns `Crystal.hkl_data`/`hkl_metadata`, leaving structure factors at default_F=0 and keeping F_cell=0 in TRACE_PY.
- Updated docs/fix_plan.md (Attempt #73) and plans/active/cli-noise-pix0/plan.md L2b guidance to call out the missing HKL attachment; next action is to set `crystal.hkl_data = F_grid` and `crystal.hkl_metadata = metadata` before simulator construction.
- Authored new input.md instructing Ralph to wire HKL metadata into the harness, rerun the supervisor trace command, refresh scaling_audit_summary.md, and validate via targeted pytest collection + compare_scaling_traces.
- Follow-up for Ralph: patch harness HKL assignment, rerun L2b command, update artifacts (trace_py_scaling.log, notes.md, harness_hkl_state.txt), then rerun the comparison tool to re-enter Phase L2c.
## 2025-10-06 (galph loop — CLI-FLAGS structure-factor probe)
- Marked Phase L2 as complete in plans/active/cli-noise-pix0/plan.md and refreshed Phase L3 task list (L3a/L3b now target supervisor pixel F_cell evidence).
- Updated docs/fix_plan.md Next Actions to focus on structure-factor ingestion; clarified divergence as F_cell=0 vs 190.27 at hkl≈(-7,-1,-14).
- Authored new input.md (L3a instructions) directing Ralph to build a probe under reports/.../structure_factor and log HKL vs Fdump amplitudes.
[2025-10-07T15:16:20] tokens used: 28,242

[2025-10-07T15:16:30] thinking

**Preparing to review documentation files**
[2025-10-07T15:16:31] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:32] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/index.md" succeeded in 788ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T15:16:32] tokens used: 32,243

[2025-10-07T15:16:35] thinking

**Preparing to review specifications**
[2025-10-07T15:16:35] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:36] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' specs/spec-a.md" succeeded in 673ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T15:16:36] tokens used: 33,999

[2025-10-07T15:16:38] thinking

**Considering shard reading instructions**
[2025-10-07T15:16:39] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:39] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' arch.md" succeeded in 705ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T15:16:39] tokens used: 34,344

[2025-10-07T15:16:42] thinking

**Opening configuration documentation**
[2025-10-07T15:16:44] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:44] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 694ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T15:16:44] tokens used: 36,893

[2025-10-07T15:16:47] thinking

**Identifying missing documentation file**
[2025-10-07T15:16:48] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:48] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/debugging/debugging.md" succeeded in 723ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T15:16:48] tokens used: 38,837

[2025-10-07T15:16:51] thinking

**Identifying missing documentation**
[2025-10-07T15:16:52] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:52] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 739ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T15:16:52] tokens used: 41,160

[2025-10-07T15:16:56] thinking

**Reviewing fix_plan documentation**
[2025-10-07T15:16:57] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:16:58] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/fix_plan.md" succeeded in 761ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T15:16:58] tokens used: 43,682

[2025-10-07T15:17:00] thinking

**Navigating to relevant CLI flags section**
[2025-10-07T15:17:01] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --line-number "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:02] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --line-number "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 704ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-07T15:17:02] tokens used: 47,013

[2025-10-07T15:17:04] thinking

**Preparing to review section**
[2025-10-07T15:17:04] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:05] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,620p' docs/fix_plan.md" succeeded in 690ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-21 refresh → galph):
1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T15:17:05] tokens used: 47,348

[2025-10-07T15:17:08] thinking

**Starting deep codebase analysis**
[2025-10-07T15:17:09] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:10] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' succeeded in 739ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T15:17:10] tokens used: 51,076

[2025-10-07T15:17:13] thinking

**Preparing for documentation review**
[2025-10-07T15:17:13] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:14] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 697ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T15:17:14] tokens used: 51,454

[2025-10-07T15:17:18] thinking

**Checking vectorization plan status**
[2025-10-07T15:17:20] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:20] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/vectorization.md" succeeded in 720ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T15:17:20] tokens used: 54,481

[2025-10-07T15:17:32] thinking

**Preparing for deep codebase analysis**
[2025-10-07T15:17:33] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '620,980p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:34] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '620,980p' docs/fix_plan.md" succeeded in 915ms:
  * [2025-10-07] Attempt #94 (ralph loop i=94, documentation) — Result: **SUCCESS** (Phase L3j documentation loop COMPLETE). **Checklist and correction memo updated; ready for implementation loop.**
    Metrics: Documentation-only; no code changes; pytest --collect-only passed (test imports validated).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:57-208` - Added "Post-L3i Findings" section with H3 ruling, H5-H7 hypotheses, quantitative deltas, φ sampling requirements, and C/PyTorch reference lines
      - `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` - Created 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates) with thresholds and command templates
      - `plans/active/cli-noise-pix0/plan.md:271-273` - Updated L3j.1–L3j.3 rows to [D] status
      - `docs/fix_plan.md` (this entry) - Attempt #94 logged
      - `reports/2025-10-cli-flags/phase_l/rot_vector/test_collect_L3j.log` - Pytest collection log (not generated this loop; deferred to VG validation)
    Observations/Hypotheses:
      - **H3 (MOSFLM matrix) confirmed ruled out:** Component-level diff (Attempt #93) proved b_Y matches at φ=0 to O(1e-7) Å
      - **H5 (φ rotation) primary suspect:** +6.8% Y-drift (Phase L3f) must emerge during `Crystal.get_rotated_real_vectors()` when φ transitions from 0° → 0.05° → 0.1°
      - **Quantitative deltas documented:** b_Y +6.8% (+4.573e-02 Å), k_frac Δ≈0.018, I_before_scaling ratio 0.755 (24.5% under)
      - **φ sampling specified:** φ=0°/0.05°/0.1° per supervisor command (phisteps=10, osc=0.1)
      - **Verification thresholds set:** b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01, k_frac ≤1e-6 absolute
      - **Implementation prerequisites complete:** Checklist created, correction memo extended, plan/fix_plan synced
    Next Actions: Implementation loop — Execute Phase L3 fix per `fix_checklist.md` gates; isolate rotation matrix construction in `Crystal.get_rotated_real_vectors` (src/nanobrag_torch/models/crystal.py:1000-1050); compare against C rotation semantics (nanoBragg.c:3006-3098); apply surgical patch with C-code docstring references; validate against all VG gates before merging.
  * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
    Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-41` - Refreshed trace with live values (polar=0.91464138, omega_pixel=4.20404859e-07 sr, F_cell=0, I_before_scaling=0)
[2025-10-07T15:17:34] tokens used: 56,935

[2025-10-07T15:17:38] thinking

**Analyzing long-term goals and task status**
[2025-10-07T15:17:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --line-number "Attempt #97" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:40] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --line-number "Attempt #97" docs/fix_plan.md' succeeded in 745ms:
492:  * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
521:      - **VG-2.2 PASS**: test_f_latt_square_matches_c passed without regressions (5.79s runtime matches Attempt #97)
523:      - **Implementation validated**: φ rotation fix (Attempt #97) maintains lattice factor parity with C code
543:      - **Root cause hypothesis**: Attempt #97's φ rotation fix (rotate only real, recompute reciprocal) is incomplete or incorrect
547:      1. Escalate to galph supervisor: VG-1.4/VG-3 failures indicate Attempt #97 implementation incomplete; requires deeper investigation
[2025-10-07T15:17:40] tokens used: 60,226

[2025-10-07T15:17:41] thinking

**Reviewing extensive lines**
[2025-10-07T15:17:42] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '480,560p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:43] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '480,560p' docs/fix_plan.md" succeeded in 715ms:
      - C reference extracted: `golden_suite_generator/nanoBragg.c:3044-3066` (φ rotation loop)
    Observations/Hypotheses:
      - **Root cause identified**: Current PyTorch implementation rotates real AND reciprocal vectors independently during φ rotation (crystal.py:1008-1022)
      - **C semantics**: C code rotates ONLY real vectors (nanoBragg.c:3056-3058), reciprocal vectors implicit through Miller index calculation
      - **Proposed fix**: Rotate only real vectors, recompute reciprocal from rotated real using cross products and V_actual (preserves metric duality per CLAUDE Rule #13)
      - **Implementation strategy**: Remove lines 1014-1022 (independent reciprocal rotation), add cross product computation after real rotation (lines ~1012)
      - **Verification thresholds documented**: b_Y drift ≤1e-6, k_frac ≤1e-6, correlation ≥0.9995, sum_ratio 0.99–1.01 (fix_checklist.md VG-1⇢VG-5)
      - Mode: Docs → implementation deferred to next code-focused loop per input.md guidance
    Next Actions:
      1. Implementation loop (Mode: TDD or standard): Execute Phase L3k.2 (add C-code docstring per CLAUDE Rule #11, implement reciprocal recomputation)
      2. After code changes: Execute Phase L3k.3 (VG-1⇢VG-5 verification gates with per-φ traces, pytest lattice, nb-compare, delta audit)
      3. After gates pass: Execute Phase L3k.4 (log implementation Attempt with metrics, update plan/fix_plan, prepare Phase L4)
  * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
    Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
    Artifacts:
      - `src/nanobrag_torch/models/crystal.py:1008-1035` — Fixed φ rotation implementation (Step 1: rotate only real vectors; Step 2: recompute reciprocal via cross products and V_actual)
      - `src/nanobrag_torch/models/crystal.py:1010-1013` — Added C-code reference comment (nanoBragg.c:3056-3058)
      - Test results: tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c PASSED (5.79s)
      - Test results: 57 crystal/geometry tests PASSED (test_at_geo*.py, test_crystal_geometry.py, test_at_crystal_absolute.py)
      - Collection: 653 tests collected successfully
[2025-10-07T15:17:43] tokens used: 61,129

[2025-10-07T15:17:47] thinking

**Tracking test attempts**
[2025-10-07T15:17:50] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '980,1200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:50] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '980,1200p' docs/fix_plan.md" succeeded in 687ms:
      - **Actual values:** Fclose=0.217742 m, Sclose=0.213907 m, close_distance=0.231272 m, ratio=0.999988, distance=0.231275 m
      - **C pix0 result:** (-0.216476, 0.216343, -0.230192) meters matching DETECTOR_PIX0_VECTOR output
      - **Instrumentation coverage:** Captured convention, angles, beam_center (Xclose/Yclose), Fclose/Sclose/close_distance/ratio/distance, term decomposition, pix0 before/after rotations, basis vectors before/after rotations/twotheta
      - **Next critical step:** Phase H6b must generate matching PyTorch trace with identical variable names/units to enable line-by-line diff and identify first divergence
    Next Actions: Proceed to Phase H6b (extend PyTorch trace harness to emit matching TRACE_PY lines from `_calculate_pix0_vector()`), then Phase H6c (diff traces and document first divergence in analysis.md).
  * [2025-10-06] Attempt #37 (ralph) — Result: **EVIDENCE COMPLETE** (Phase H6b PyTorch trace harness instrumented). **PyTorch pix0 trace captured with TRACE_PY lines matching C format.**
    Metrics: Evidence-only loop. Wall-clock ~8s. PyTorch harness executed with PYTHONPATH=src (editable install) and detector_pivot auto-selection. Trace output 73 lines (21 TRACE_PY pix0 lines + 52 simulator trace lines).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_h6/py_trace/trace_py_pix0.log` - Full PyTorch trace (73 lines, TRACE_PY format matching C)
      - `reports/2025-10-cli-flags/phase_h6/py_trace/trace_py_pix0.stderr` - Stderr confirming pixel (1039, 685) trace completed
      - `reports/2025-10-cli-flags/phase_h6/py_trace/env_snapshot.txt` - Environment variables snapshot (55 lines)
      - `reports/2025-10-cli-flags/phase_h6/py_trace/git_context.txt` - Git commit reference (cb5daae)
      - `reports/2025-10-cli-flags/phase_h/trace_harness.py:30-122` - Patched Detector.__init__ to emit TRACE_PY lines post-geometry-setup
    Observations/Hypotheses:
      - **PyTorch pix0:** (-0.216337, 0.215207, -0.230198) meters
      - **C pix0 (reference):** (-0.216476, 0.216343, -0.230192) meters
      - **Deltas:** ΔX = +139 µm, ΔY = -1136 µm, ΔZ = -6 µm
      - **Large ΔS persists:** 1.1 mm slow-axis error remains after Phase H5e unit fix, indicating deeper divergence in pix0 calculation
      - **Instrumentation complete:** Captured detector_convention, angles (radians), beam_center_m (Xclose/Yclose), initial basis vectors, Fclose/Sclose, close_distance, ratio, distance, term_fast/slow/close_before_rot, pix0 (before/after rotations), final basis vectors, twotheta_axis
      - **Harness improvements:** Removed hard-coded DetectorPivot.BEAM (line 114) to allow natural SAMPLE pivot selection; patched Detector.__init__ instead of non-existent _configure_geometry method; added term_* emission for all CUSTOM cases with custom vectors (not pivot-gated)
[2025-10-07T15:17:50] tokens used: 64,002

[2025-10-07T15:17:55] thinking

**Outlining initial analysis and next steps**
[2025-10-07T15:17:55] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:17:56] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 731ms:
tails
[2025-10-07T15:17:56] tokens used: 67,580

[2025-10-07T15:18:20] thinking

**Evaluating need for plan updates**
[2025-10-07T15:18:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "L3k" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:18:22] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "L3k" plans/active/cli-noise-pix0/plan.md' succeeded in 952ms:
32:- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
274:| L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-11-21 Attempt #96: Updated `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #96 entry documenting Phase L3k.1 completion (implementation memo), artifact paths, root cause analysis, proposed fix strategy, and next actions for code implementation loop. Documented Mode: Docs constraint (no code changes this loop). Updated this plan to mark L3k.1 complete. pytest --collect-only deferred to implementation loop. |
276:### Phase L3k — φ Rotation Fix Implementation
283:| L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
284:| L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
285:| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
286:| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
[2025-10-07T15:18:22] tokens used: 68,542

[2025-10-07T15:18:31] thinking

**Reevaluating plan with recent failures**
[2025-10-07T15:18:32] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --line-number "Attempt #10[1-9]" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:18:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --line-number "Attempt #10[1-9]" docs/fix_plan.md' exited 1 in 895ms:

[2025-10-07T15:18:33] tokens used: 117,169

[2025-10-07T15:18:52] thinking

**Evaluating plan update focus**
[2025-10-07T15:18:53] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/architecture/detector.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:18:54] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/architecture/detector.md" succeeded in 902ms:
# Detector Architecture Deep Dive

**Status:** Authoritative Specification  
**Last Updated:** Phase 5 Implementation

**⚠️ CRITICAL:** This component uses a [hybrid unit system](#61-critical-hybrid-unit-system-overrides-global-rule) that overrides the global Angstrom-only rule.

This document provides the complete technical specification for the Detector component. For global project rules on units and coordinate systems, see [Global Conventions](./conventions.md).

---

## 1. Overview

The Detector class manages the detector geometry for diffraction simulations, including:
- Position and orientation (basis vectors)
- Pixel coordinate generation and caching
- Support for various detector conventions (MOSFLM, XDS)
- Dynamic geometry with rotations and tilts
- Full differentiability for optimization workflows

[2025-10-07T15:18:54] tokens used: 119,708

[2025-10-07T15:19:00] thinking

**Reviewing relevant documentation**
[2025-10-07T15:19:02] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' specs/spec-a-cli.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:19:03] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' specs/spec-a-cli.md" succeeded in 745ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-07T15:19:03] tokens used: 121,767

[2025-10-07T15:19:10] thinking

**Revising plan with test alignment tasks**
[2025-10-07T15:19:12] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,220p' tests/test_cli_scaling_phi0.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:19:13] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,220p' tests/test_cli_scaling_phi0.py" succeeded in 716ms:
"""
CLI Scaling φ=0 Parity Tests for CLI-FLAGS-003 Phase L3k.3

Tests φ=0 rotated lattice vectors and Miller indices to capture the base-vector
drift before implementing the fix for independent real/reciprocal rotation.

Evidence base: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
Plan reference: plans/active/cli-noise-pix0/plan.md Phase L3k.3
Supervisor memo: input.md:22-45 (Do Now for Phase L3k.3)
"""
import os
import sys
from pathlib import Path
import pytest
import torch
import numpy as np

# Set required environment variable
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-07T15:19:13] tokens used: 125,115

[2025-10-07T15:19:34] thinking

**Designing detailed plan extensions**

I'm mapping out how to restructure Phase L3k to add new diagnostic and verification tasks following failures, aiming to keep the plan organized with new sub-phases and task rows using established ID conventions. I want to carefully align updates in both the main plan and related docs like fix_plan.md, ensuring consistent formatting, clear statuses, and that next actions reflect these newly added investigation and verification tasks.
[2025-10-07T15:19:36] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Attempt #100" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:19:37] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Attempt #100" docs/fix_plan.md' succeeded in 886ms:
  * [2025-10-07] Attempt #100 (ralph loop i=100) — Result: **SPINDLE AXIS ALIGNED** (Phase L3k.3 VG-1 preflight). **Updated tests to match supervisor command spindle_axis = (-1, 0, 0).**
[2025-10-07T15:19:37] tokens used: 128,692

[2025-10-07T15:19:54] thinking

**Updating detailed plan tasks with subtables**

I’m preparing to enhance the plan by adding a multi-line subtable under step L3k.3 to capture new verification subtasks reflecting recent attempt outcomes. This includes updating the gap snapshot, restructuring tasks for clarity and checklist compliance, and ensuring guidance references relevant artifacts. I’ll apply these edits carefully to maintain plan consistency and phased structure.
[2025-10-07T15:20:09] tokens used: 131,271

[2025-10-07T15:20:14] thinking

**Inspecting segment for accurate modification**
[2025-10-07T15:20:15] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '260,320p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:20:16] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '260,320p' plans/active/cli-noise-pix0/plan.md" succeeded in 990ms:

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3a | Verify structure-factor coverage for supervisor pixel | [D] | ✅ 2025-11-17 Attempt #77: `reports/2025-10-cli-flags/phase_l/structure_factor/probe.py` recorded `probe_20251117.log` showing scaled.hkl returns `F_cell=190.270004` for hkl=(-7,-1,-14). Keep the log + timestamped copies alongside a brief summary in `analysis.md`, then proceed to L3c to thread the same attachment pattern through the harness/CLI path. |
| L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
| L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
| L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
| L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
| L3g | Fractional Miller alignment plan | [D] | ✅ 2025-10-07 Attempt #91: Instrumented simulator.py:1313-1322 to emit `spindle_axis_raw/normalized/magnitude`, reran φ=0 trace (43 TRACE_PY lines), confirmed Δ(magnitude)=0.0 (tolerance ≤5e-4). H1 **RULED OUT**: spindle is exact unit vector [-1,0,0], normalization is no-op. H3 (MOSFLM matrix semantics) promoted to primary suspect. Artifacts: `rot_vector/spindle_audit.log`, `analysis.md` (updated with H3 ranking). |
| L3h | MOSFLM matrix probe & diff | [D] | ✅ Attempt #92 (2025-10-07, ralph evidence loop i=92): Created `trace_harness.py` in rot_vector/, captured 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals), proved V_formula ≈ V_actual (Δ=1.5e-11 Å³), **ruled out Hypothesis H2**. Reciprocal re-derivation exact to 15 digits. Artifacts: `mosflm_matrix_probe.md` (primary doc), `mosflm_matrix_probe_output.log`, `trace_harness.py`, `harness_run.log`. pytest: 579 tests collected. Next: Phase L3i C instrumentation to complete C vs PyTorch diff. |
| L3i | C instrumentation & diff | [D] | ✅ Attempt #93 (2025-10-07, ralph loop i=93): Captured full C MOSFLM pipeline trace (291 lines) via instrumented `golden_suite_generator/nanoBragg.c:2050-2199`, executed supervisor command, performed component-level diff. **H3 (MOSFLM transpose) RULED OUT** — real-space b_Y matches to O(1e-7) Å. Artifacts: `c_trace_mosflm.log`, `c_trace_extract.txt`, `mosflm_matrix_diff.md`, `analysis.md` (updated with H5-H7 hypotheses). pytest: 652 tests collected. Next: L3j fix checklist focusing on H5 (phi rotation) verification. |
| L3j.1 | Refresh correction memo | [D] | ✅ 2025-10-07 Attempt #94 (ralph, documentation loop): Extended `mosflm_matrix_correction.md` with "Post-L3i Findings" section citing H3 ruling (b_Y matches C at φ=0 to 1.35e-07 Å), promoted H5 (φ rotation application) as primary suspect, documented quantitative deltas (b_Y +6.8%, k_frac Δ≈0.018, I_ratio 0.755), and spelled out φ samples (0°, 0.05°, 0.1°) with supervisor command context. Artifact: `mosflm_matrix_correction.md` lines 57-208. |
| L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
| L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-11-21 Attempt #96: Updated `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #96 entry documenting Phase L3k.1 completion (implementation memo), artifact paths, root cause analysis, proposed fix strategy, and next actions for code implementation loop. Documented Mode: Docs constraint (no code changes this loop). Updated this plan to mark L3k.1 complete. pytest --collect-only deferred to implementation loop. |

### Phase L3k — φ Rotation Fix Implementation
Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
[2025-10-07T15:20:16] tokens used: 133,459

[2025-10-07T15:20:19] thinking

**Preparing patch for updates**
[2025-10-07T15:20:32] tokens used: 137,778

[2025-10-07T15:20:37] thinking

**Checking multiline row formatting**
[2025-10-07T15:20:38] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '300,320p' plans/active/cli-noise-pix0/plan.md | cat -vet" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:20:38] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '300,320p' plans/active/cli-noise-pix0/plan.md | cat -vet" succeeded in 838ms:

[2025-10-07T15:20:38] tokens used: 206,023

[2025-10-07T15:20:52] thinking

**Investigating missing file content**
[2025-10-07T15:20:52] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '260,360p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:20:53] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '260,360p' plans/active/cli-noise-pix0/plan.md" succeeded in 942ms:

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3a | Verify structure-factor coverage for supervisor pixel | [D] | ✅ 2025-11-17 Attempt #77: `reports/2025-10-cli-flags/phase_l/structure_factor/probe.py` recorded `probe_20251117.log` showing scaled.hkl returns `F_cell=190.270004` for hkl=(-7,-1,-14). Keep the log + timestamped copies alongside a brief summary in `analysis.md`, then proceed to L3c to thread the same attachment pattern through the harness/CLI path. |
| L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
| L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
| L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
| L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
| L3g | Fractional Miller alignment plan | [D] | ✅ 2025-10-07 Attempt #91: Instrumented simulator.py:1313-1322 to emit `spindle_axis_raw/normalized/magnitude`, reran φ=0 trace (43 TRACE_PY lines), confirmed Δ(magnitude)=0.0 (tolerance ≤5e-4). H1 **RULED OUT**: spindle is exact unit vector [-1,0,0], normalization is no-op. H3 (MOSFLM matrix semantics) promoted to primary suspect. Artifacts: `rot_vector/spindle_audit.log`, `analysis.md` (updated with H3 ranking). |
| L3h | MOSFLM matrix probe & diff | [D] | ✅ Attempt #92 (2025-10-07, ralph evidence loop i=92): Created `trace_harness.py` in rot_vector/, captured 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals), proved V_formula ≈ V_actual (Δ=1.5e-11 Å³), **ruled out Hypothesis H2**. Reciprocal re-derivation exact to 15 digits. Artifacts: `mosflm_matrix_probe.md` (primary doc), `mosflm_matrix_probe_output.log`, `trace_harness.py`, `harness_run.log`. pytest: 579 tests collected. Next: Phase L3i C instrumentation to complete C vs PyTorch diff. |
| L3i | C instrumentation & diff | [D] | ✅ Attempt #93 (2025-10-07, ralph loop i=93): Captured full C MOSFLM pipeline trace (291 lines) via instrumented `golden_suite_generator/nanoBragg.c:2050-2199`, executed supervisor command, performed component-level diff. **H3 (MOSFLM transpose) RULED OUT** — real-space b_Y matches to O(1e-7) Å. Artifacts: `c_trace_mosflm.log`, `c_trace_extract.txt`, `mosflm_matrix_diff.md`, `analysis.md` (updated with H5-H7 hypotheses). pytest: 652 tests collected. Next: L3j fix checklist focusing on H5 (phi rotation) verification. |
| L3j.1 | Refresh correction memo | [D] | ✅ 2025-10-07 Attempt #94 (ralph, documentation loop): Extended `mosflm_matrix_correction.md` with "Post-L3i Findings" section citing H3 ruling (b_Y matches C at φ=0 to 1.35e-07 Å), promoted H5 (φ rotation application) as primary suspect, documented quantitative deltas (b_Y +6.8%, k_frac Δ≈0.018, I_ratio 0.755), and spelled out φ samples (0°, 0.05°, 0.1°) with supervisor command context. Artifact: `mosflm_matrix_correction.md` lines 57-208. |
| L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
| L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-11-21 Attempt #96: Updated `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #96 entry documenting Phase L3k.1 completion (implementation memo), artifact paths, root cause analysis, proposed fix strategy, and next actions for code implementation loop. Documented Mode: Docs constraint (no code changes this loop). Updated this plan to mark L3k.1 complete. pytest --collect-only deferred to implementation loop. |

### Phase L3k — φ Rotation Fix Implementation
Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
[2025-10-07T15:20:53] tokens used: 206,419

[2025-10-07T15:20:59] thinking

**Applying patch with unique snippet**
[2025-10-07T15:21:02] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -284,3 +284,3 @@
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
[2025-10-07T15:21:02] apply_patch(auto_approved=true) exited 0 in 16ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:21:02] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..b812a8b3baee0b25cfa3cfe0d74a677a7275c48f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -282,7 +282,7 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T15:21:02] tokens used: 209,823
[2025-10-07T15:21:02] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..b812a8b3baee0b25cfa3cfe0d74a677a7275c48f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -282,7 +282,7 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:21:08] thinking

**Preparing to insert checklist and update snapshots**
[2025-10-07T15:21:15] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -31,3 +31,3 @@
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
[2025-10-07T15:21:15] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:21:15] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..26acf3a98ff5eb13076bfb2dbf7e7c5583becd2f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,7 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T15:21:15] tokens used: 210,769
[2025-10-07T15:21:15] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..26acf3a98ff5eb13076bfb2dbf7e7c5583becd2f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,7 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:21:19] thinking

**Inserting a new subtable**
[2025-10-07T15:21:28] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -285,2 +285,12 @@
 | L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
[2025-10-07T15:21:28] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:21:28] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T15:21:28] tokens used: 212,297
[2025-10-07T15:21:28] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:21:32] thinking

**Updating fix_plan.md Next Actions**
[2025-10-07T15:21:33] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '454,472p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:21:34] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '454,472p' docs/fix_plan.md" succeeded in 967ms:
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-21 refresh → galph):
1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
    Observations/Hypotheses:
      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
[2025-10-07T15:21:34] tokens used: 235,706
[2025-10-07T15:21:34] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:21:38] thinking

**Updating Next Actions list**
[2025-10-07T15:21:47] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -459,6 +459,6 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
[2025-10-07T15:21:47] apply_patch(auto_approved=true) exited 0 in 20ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T15:21:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T15:21:47] tokens used: 238,926
[2025-10-07T15:21:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:21:57] thinking

**Preparing detailed input instructions**
[2025-10-07T15:21:58] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:21:59] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md" succeeded in 929ms:
# φ Rotation Parity Fix Checklist (CLI-FLAGS-003 Phase L3j)

## Overview

This checklist enumerates verification gates for implementing the φ rotation parity fix. All gates must pass before marking CLI-FLAGS-003 Phase L3 complete.

**Primary Hypothesis:** H5 (φ Rotation Application) — Drift emerges during `Crystal.get_rotated_real_vectors()` when φ transitions from 0° → 0.05° → 0.1°.

**Evidence Base:** Phases L3a–L3i proved MOSFLM base vectors correct at φ=0 (b_Y agrees to O(1e-7) Å). Divergence must occur during phi rotation.

## Verification Gates

| ID | Requirement | Owner | Status | Artifact Path | Threshold / Notes |
|----|-------------|-------|--------|---------------|-------------------|
| **VG-1** | **Per-φ Harness Rerun** | Implementation Loop | ✅ (Attempt #99, 2025-10-07) | `reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix/` | After code fix, regenerate traces for φ=0°, 0.05°, 0.1° |
| VG-1.1 | φ=0° trace regeneration | Implementation Loop | ✅ | `per_phi_postfix/trace_py_rot_vector_per_phi.json` entry 0 | Baseline φ=0.0°, k_frac=-0.589142 |
| VG-1.2 | φ=0.05° trace generation | Implementation Loop | ✅ | `per_phi_postfix/trace_py_rot_vector_per_phi.json` entry 5 | Mid-oscillation φ=0.0556°, k_frac=-0.599191 |
| VG-1.3 | φ=0.1° trace generation | Implementation Loop | ✅ | `per_phi_postfix/trace_py_rot_vector_per_phi.json` entry 9 | Full oscillation φ=0.1°, k_frac=-0.607230 |
| VG-1.4 | Per-φ JSON stability | Implementation Loop | ⚠️ | `per_phi_postfix/trace_py_rot_vector_per_phi.json` | k_frac span=0.018088 (threshold <1e-6 NOT MET); 10 φ entries captured |
| **VG-2** | **Targeted Pytest (Lattice Factors)** | Implementation Loop | ✅ (Attempt #98, 2025-11-21) | `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_vg2.log` | Regression coverage for lattice vector parity; refresh log if missing |
[2025-10-07T15:21:59] tokens used: 240,725
[2025-10-07T15:21:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:22:04] thinking

**Preparing to create input.md**
[2025-10-07T15:22:05] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls scripts/validation' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:22:05] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls scripts/validation' succeeded in 702ms:
README.md
analyze_fdump_layout.py
compare_scaling_traces.py
compare_structure_factors.py
[2025-10-07T15:22:05] tokens used: 244,078
[2025-10-07T15:22:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:22:21] thinking

**Searching for missing script**
[2025-10-07T15:22:30] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --files -g"*per_phi*"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:22:31] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg --files -g"*per_phi*"' succeeded in 1.00s:
scripts/trace_per_phi.py
scripts/compare_per_phi_traces.py
reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json
reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.log
reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix/trace_py_rot_vector_per_phi.json
reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix/trace_py_rot_vector_per_phi.log
reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector_per_phi.json
reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_per_phi.json
reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector_per_phi.log
reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix/trace_py_rot_vector_postfix_per_phi.log
reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix/trace_py_rot_vector_postfix_per_phi.json
reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_per_phi.log
reports/2025-10-cli-flags/phase_l/per_phi/trace_py_per_phi_20251007.log
reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_per_phi.json
reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_per_phi.log
reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251007.json
reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log
reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_pytorch_20251006-151228.json
reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log
reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_summary_20251006-151228.md
[2025-10-07T15:22:31] tokens used: 245,167
[2025-10-07T15:22:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:22:35] thinking

**Locating and planning to inspect comparison script**
[2025-10-07T15:22:35] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' scripts/compare_per_phi_traces.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:22:36] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' scripts/compare_per_phi_traces.py" succeeded in 704ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Compare C vs PyTorch per-φ traces

Identifies the first φ where Δk exceeds tolerance (5e-4) to isolate the φ-grid mismatch.
"""

import json
import sys
from pathlib import Path

def parse_c_trace(log_file):
    """Parse C trace log file."""
    traces = []
    with open(log_file) as f:
        for line in f:
            if line.startswith('TRACE_C_PHI'):
                parts = line.split()
                traces.append({
                    'phi_tic': int(parts[1].split('=')[1]),
[2025-10-07T15:22:36] tokens used: 247,035
[2025-10-07T15:22:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:22:41] thinking

**Reviewing script usage and dependencies**
[2025-10-07T15:22:44] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' scripts/trace_per_phi.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:22:44] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' scripts/trace_per_phi.py" succeeded in 685ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Per-φ Miller Index Parity

This script captures Miller index + lattice factor traces for each φ step
(φ_tic=0…9) to diagnose the φ-grid mismatch between C and PyTorch.

Context: PyTorch reports k≈1.9997 (φ=0°) while C reports k≈1.9928 (φ=0.09°),
causing a 21.6% F_latt_b inflation. This per-φ dump will isolate the first φ
where Δk exceeds tolerance.

Usage:
    PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py \\
        --outdir reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/

Output:
    - per_phi_pytorch.json: Full per-φ trace data (PyTorch)
    - per_phi_summary.md: Comparison summary with first divergence
    - (C trace expected from instrumented nanoBragg.c separately)
"""
[2025-10-07T15:22:44] tokens used: 250,128
[2025-10-07T15:22:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:22:48] thinking

**Checking trace script usage**
[2025-10-07T15:22:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l/rot_vector' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:22:49] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l/rot_vector' succeeded in 848ms:
analysis.md
attempt_notes.md
base_vector_debug
c_trace_extract.txt
c_trace_mosflm.log
c_trace_mosflm.sha256
collect_only.log
config_snapshot.json
fix_checklist.md
harness_run.log
input_files.sha256
invariant_probe.md
mosflm_matrix_correction.md
mosflm_matrix_diff.md
mosflm_matrix_probe.log
mosflm_matrix_probe.md
mosflm_matrix_probe_output.log
per_phi_postfix
rot_vector_comparison.md
spindle_audit.log
[2025-10-07T15:22:49] tokens used: 252,621
[2025-10-07T15:22:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:22:53] thinking

**Checking trace_harness.py script**
[2025-10-07T15:22:53] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:22:54] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 680ms:
#!/usr/bin/env python
"""
Phase L3h MOSFLM Matrix Probe Harness

Extends the scaling trace harness to log MOSFLM reciprocal vectors at key stages:
- Before misset rotation
- After reciprocal→real reconstruction
- After real→reciprocal re-derivation

This captures the evidence needed to diagnose the Y-component drift in real-space
vectors identified in Phase L3f/L3g.

Date: 2025-10-07 (replayed from galph loop i=92)
Engineer: Ralph (evidence-only mode per input.md)
Plan Reference: plans/active/cli-noise-pix0/plan.md Phase L3h
"""

import argparse
import json
import sys
[2025-10-07T15:22:54] tokens used: 253,230
[2025-10-07T15:22:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:23:07] thinking

**Preparing instructions for trace generation**

I’m focusing on guiding the user to run the trace harness script with specific flags to generate new per-φ logs, even though it’s unclear if it directly produces JSON outputs. I’ll instruct creating timestamped directories for storing artifacts and updating relevant summaries and checklists. I’ll also include commands to check the current git branch.
[2025-10-07T15:23:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:23:11] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git rev-parse --abbrev-ref HEAD' succeeded in 952ms:
feature/spec-based-2
[2025-10-07T15:23:11] tokens used: 256,005
[2025-10-07T15:23:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:23:28] thinking

**Outlining test and harness steps**

I'm planning how to handle the `input.md`, focusing on running `pytest --collect-only -q` to validate test collection without executing tests, fitting the evidence-only analysis phase. I'm also drafting commands to create report directories, run the trace harness with required parameters, and generate per-phi JSON outputs for later comparison, while anticipating potential copying or renaming if the harness doesn't produce JSON in the target folder automatically.
[2025-10-07T15:23:30] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "per_phi" -n reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:23:31] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "per_phi" -n reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' succeeded in 898ms:
371:        phi_trace_name = args.out.replace('.log', '_per_phi.log')
372:        phi_trace_path = Path('reports/2025-10-cli-flags/phase_l/per_phi') / phi_trace_name
380:        per_phi_data = []
394:                per_phi_data.append(entry)
397:        json_name = args.out.replace('.log', '_per_phi.json')
398:        json_path = Path('reports/2025-10-cli-flags/phase_l/per_phi') / json_name
407:            'per_phi_entries': per_phi_data
[2025-10-07T15:23:31] tokens used: 270,268
[2025-10-07T15:23:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:23:58] thinking

**Organizing harness output and crafting next steps**

I'm sorting out how the harness saves per-φ logs under a nested directory structure that duplicates paths unexpectedly. To keep things tidy, I'll recommend running the harness with a simple log filename in the root, then manually moving both the main and per-φ logs into a dedicated timestamped directory afterward. I'll also plan clear commands for running, relocating files, running comparison scripts, and updating documentation, while noting fallback steps if environment issues arise. Finally, I'll prepare the detailed `input.md` with summary, priorities, command instructions, pitfalls, pointers, and next steps to guide the user.
[2025-10-07T15:24:19] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Regenerate φ-trace artifacts to isolate the residual rotation drift before rerunning VG gates.
Mode: Parity
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q (collection only, defer execution)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
Do Now: CLI-FLAGS-003 · Phase L3k.3b — regenerate per-φ traces; run PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_20251122.log --device cpu --dtype float64
If Blocked: Capture the failure mode in base_vector_debug/20251122/blockers.md with command + stderr, then run pytest --collect-only -q and stash the log beside it.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:279 — L3k.3 checklist now demands a fresh diagnosis before VG reruns.
- docs/fix_plan.md:458 — Next Actions call for L3k.3b evidence (per-φ harness diff) ahead of nb-compare fixes.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:20 — VG-1.4 remains ⚠️, so we must quantify the drift.
- specs/spec-a-cli.md §Sampling — confirms φ grid (osc=0.1, phisteps=10) to match in harness.
- docs/development/testing_strategy.md §2 — keep parity evidence organized under reports/ with reproducible commands.

How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_20251122.log --device cpu --dtype float64
- mv trace_py_rot_vector_20251122.log reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
- mv reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_20251122_per_phi.* reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
- python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_stdout.txt
- pytest --collect-only -q | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/pytest_collect.log
- Summarize deltas + hypotheses in reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/diagnosis.md and update fix_checklist.md VG-1.4 notes.

Pitfalls To Avoid:
- Do not modify production code; this loop is evidence-only.
- Keep PYTHONPATH=src and KMP_DUPLICATE_LIB_OK=TRUE set before importing torch.
- Avoid overwriting prior per_phi artifacts; create the 20251122 subdir first.
- Use CPU + float64 as scripted; CUDA may diverge from archived C traces.
- Don’t forget to move the auto-emitted per_phi files out of reports/.../per_phi/ to keep tree tidy.
- Leave tests red; no attempts to \"fix\" failing assertions yet.
- Preserve Protected Assets (docs/index.md references) if editing docs.
- Record command invocations in diagnosis.md for reproducibility.
- Limit nb-compare/new runs until this diagnosis is done; ROI work is later.
- No git commits until artifacts + notes are captured.

Pointers:
- plans/active/cli-noise-pix0/plan.md:276
- docs/fix_plan.md:454
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:18
- docs/architecture/detector.md:48
- specs/spec-a-cli.md:73

Next Up:
1. Phase L3k.3d — repair nb-compare ROI metrics once φ drift is characterized.
2. Phase L3k.3e — document resolutions and prep L3k.4 attempt log after VG gates flip green.
EOF
" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:24:20] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Regenerate φ-trace artifacts to isolate the residual rotation drift before rerunning VG gates.
Mode: Parity
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q (collection only, defer execution)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
Do Now: CLI-FLAGS-003 · Phase L3k.3b — regenerate per-φ traces; run PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_20251122.log --device cpu --dtype float64
If Blocked: Capture the failure mode in base_vector_debug/20251122/blockers.md with command + stderr, then run pytest --collect-only -q and stash the log beside it.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:279 — L3k.3 checklist now demands a fresh diagnosis before VG reruns.
- docs/fix_plan.md:458 — Next Actions call for L3k.3b evidence (per-φ harness diff) ahead of nb-compare fixes.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:20 — VG-1.4 remains ⚠️, so we must quantify the drift.
- specs/spec-a-cli.md §Sampling — confirms φ grid (osc=0.1, phisteps=10) to match in harness.
- docs/development/testing_strategy.md §2 — keep parity evidence organized under reports/ with reproducible commands.

How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_20251122.log --device cpu --dtype float64
- mv trace_py_rot_vector_20251122.log reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
- mv reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_20251122_per_phi.* reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
- python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_stdout.txt
- pytest --collect-only -q | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/pytest_collect.log
- Summarize deltas + hypotheses in reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/diagnosis.md and update fix_checklist.md VG-1.4 notes.

Pitfalls To Avoid:
- Do not modify production code; this loop is evidence-only.
- Keep PYTHONPATH=src and KMP_DUPLICATE_LIB_OK=TRUE set before importing torch.
- Avoid overwriting prior per_phi artifacts; create the 20251122 subdir first.
- Use CPU + float64 as scripted; CUDA may diverge from archived C traces.
- Don’t forget to move the auto-emitted per_phi files out of reports/.../per_phi/ to keep tree tidy.
- Leave tests red; no attempts to \"fix\" failing assertions yet.
- Preserve Protected Assets (docs/index.md references) if editing docs.
- Record command invocations in diagnosis.md for reproducibility.
- Limit nb-compare/new runs until this diagnosis is done; ROI work is later.
- No git commits until artifacts + notes are captured.

Pointers:
- plans/active/cli-noise-pix0/plan.md:276
- docs/fix_plan.md:454
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:18
- docs/architecture/detector.md:48
- specs/spec-a-cli.md:73

Next Up:
1. Phase L3k.3d — repair nb-compare ROI metrics once φ drift is characterized.
2. Phase L3k.3e — document resolutions and prep L3k.4 attempt log after VG gates flip green.
EOF
" succeeded in 1.01s:

[2025-10-07T15:24:20] tokens used: 274,475
[2025-10-07T15:24:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:24:26] thinking

**Preparing to update galph_memory.md**
[2025-10-07T15:24:32] tokens used: 276,909
[2025-10-07T15:24:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:24:35] thinking

**Checking patch formatting**
[2025-10-07T15:24:38] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/galph_memory.md
@@ -1657 +1657,7 @@
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
[2025-10-07T15:24:38] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-07T15:24:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T15:24:38] tokens used: 277,734
[2025-10-07T15:24:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:24:41] thinking

**Preparing to commit changes**
[2025-10-07T15:24:41] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:24:42] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 1.02s:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:24:42] tokens used: 278,323
[2025-10-07T15:24:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:24:46] thinking

**Reviewing code differences**
[2025-10-07T15:24:47] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:24:48] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff' succeeded in 749ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed3..9cb8349 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
[2025-10-07T15:24:48] tokens used: 278,577
[2025-10-07T15:24:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..6ef4347d448ec2c55bedd0146ba2b52b2d83b926
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:24:59] thinking

**Correcting script path in plan**
[2025-10-07T15:25:06] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -291,3 +291,3 @@
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces via `scripts/validation/compare_per_phi_traces.py` (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
[2025-10-07T15:25:06] apply_patch(auto_approved=true) exited 0 in 36ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:25:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T15:25:06] tokens used: 282,127
[2025-10-07T15:25:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:25:11] thinking

**Updating plan diff**
[2025-10-07T15:25:16] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:25:17] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff plans/active/cli-noise-pix0/plan.md' succeeded in 956ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a0..575520d 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@ Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, al
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
[2025-10-07T15:25:17] tokens used: 282,627
[2025-10-07T15:25:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:25:20] thinking

**Preparing to stage modifications**
[2025-10-07T15:25:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:25:22] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 756ms:

[2025-10-07T15:25:22] tokens used: 285,377
[2025-10-07T15:25:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:25:26] thinking

**Preparing commit message**
[2025-10-07T15:25:27] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI-FLAGS L3k.3 checklist update - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:25:28] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI-FLAGS L3k.3 checklist update - tests: not run"' succeeded in 763ms:
[feature/spec-based-2 63901c0] SUPERVISOR: CLI-FLAGS L3k.3 checklist update - tests: not run
 4 files changed, 64 insertions(+), 43 deletions(-)
[2025-10-07T15:25:28] tokens used: 285,653
[2025-10-07T15:25:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:25:34] thinking

**Pushing changes**
[2025-10-07T15:25:36] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:25:38] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.07s:
To github.com:hoidn/nanoBragg.git
   9d3f90d..63901c0  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T15:25:38] tokens used: 285,953
[2025-10-07T15:25:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T15:25:47] thinking

**Summarizing final plan update**

I'll summarize the plan and fix_plan updates, referencing specific files with approximate line numbers, note consulted documents, and outline clear next steps for Ralph. This final message will be concise, collaborative, and formatted with bullet points to highlight key outcomes and actions.
[2025-10-07T15:25:48] codex

**Plan Update**
- Added fresh Gap snapshot + L3k.3 recovery checklist capturing VG-1/VG-3 failures and the required φ-trace/ROI follow-up (`plans/active/cli-noise-pix0/plan.md:29`, `plans/active/cli-noise-pix0/plan.md:284`).  
- Realigned CLI-FLAGS-003 Next Actions with the new checklist so Ralph tackles L3k.3b → L3k.3d before logging L3k.4 (`docs/fix_plan.md:458`).  
- Logged the supervisor handoff in `galph_memory.md:1655` and rewrote `input.md:1` with Parity-mode guidance to regenerate per-φ traces, run `compare_per_phi_traces.py`, and update diagnosis/checklist artifacts.  
- Reviewed the relevant spec/arch/testing sources while planning (`specs/spec-a-cli.md:1`, `docs/architecture/detector.md:1`, `docs/development/testing_strategy.md:1`, `docs/development/c_to_pytorch_config_map.md:1`, `docs/debugging/debugging.md:1`).

**Next Steps for Ralph**
- Follow `input.md` Do Now: rerun `trace_harness.py` for pixel (685,1039), move the emitted per-φ files into `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/`, run `python scripts/compare_per_phi_traces.py …`, and capture the diagnosis update + pytest collect log.  
- Update `fix_checklist.md` VG-1.4 notes with the new deltas, then proceed to the nb-compare ROI repair (L3k.3d) once the drift’s first divergent tensor is identified.
[2025-10-07T15:25:52] tokens used: 286,961
[2025-10-07T15:25:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index d88eed384acf02044d4b0fbec44c6cb8d010d899..9cb834921b115c72f515137bbccd93493b4d27ea
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-21 refresh → galph):
-1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
-2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
-3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
+- Next Actions (2025-11-22 refresh → galph):
+1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
+3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/galph_memory.md b/galph_memory.md
index 672ef800328f3a7e53fd5ae013638051e479ffa0..db72d48bff168e5ba9045b71569ad24f0bec575d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1655,3 +1655,9 @@
 - Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
 - Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
 - Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
+## 2025-11-22 (galph loop — L3k.3b φ drift diagnosis)
+- Confirmed repo synced; reviewed docs/index, spec shards, arch.md, c_to_pytorch_config_map.md, debugging guide, testing strategy, fix_plan, and plan CLI notes.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` Gap snapshot to capture Attempt #99 VG failures and Attempt #100 spindle-axis alignment; added an L3k.3 recovery checklist (tasks L3k.3a–L3k.3e) spelling out φ-trace regeneration, ROI fix, and documentation gates.
+- Updated `docs/fix_plan.md` Next Actions to target L3k.3b diagnosis, L3k.3d ROI repair, and the L3k.3e→L3k.4 documentation/logging handoff.
+- Authored new `input.md` (Parity mode) directing Ralph to regenerate per-φ traces via `trace_harness.py`, move the per_phi outputs into `base_vector_debug/20251122/`, run `compare_per_phi_traces.py`, log findings in diagnosis.md, update fix_checklist VG-1.4, and capture pytest collect-only evidence.
+- Follow-up for Ralph: execute L3k.3b per instructions, store artifacts under the 20251122 subdir, update `fix_checklist.md` + diagnosis memo, and keep tests red until physics fix lands.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index f0da0a007876dbdd23401adc9859f336040d3444..575520de59bcd1be2e1d11a53e0156a4fbbc4754
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,7 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
-- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
+- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -282,7 +282,17 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | ✅ **VG-2 PASSED** (Attempt #98): Targeted pytest with NB_RUN_PARALLEL=1 confirmed test_f_latt_square_matches_c PASSED (5.79s). **Remaining:** VG-1 (per-φ traces at φ=0°/0.05°/0.1°), VG-3 (nb-compare --roi with supervisor command, correlation ≥0.9995), VG-4 (component delta audit: b_Y ≤1e-6 relative, k_frac ≤1e-6 absolute, I_ratio 0.99–1.01), VG-5 (docs updates: mark fix_checklist.md rows ✅, finalize attempt logs). Store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/{per_phi/,nb_compare_phi_fix/}`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+
+#### L3k.3 Checklist — φ=0 Verification Recovery
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
+| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
+| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
+| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   63901c0..4b2bfdb  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=103...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=103
Updating 4b2bfdb..f319ac8
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   4b2bfdb..f319ac8  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=103
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating f319ac8..99594f6
Fast-forward
 .../20251122/comparison_stdout.txt                 |  20 +
 .../20251122/comparison_summary.md                 |  20 +
 .../base_vector_debug/20251122/diagnosis.md        | 149 +++++
 .../base_vector_debug/20251122/pytest_collect.log  | 667 +++++++++++++++++++++
 .../20251122/trace_py_rot_vector_20251122.log      |  43 ++
 .../trace_py_rot_vector_20251122_per_phi.json      |  82 +++
 .../trace_py_rot_vector_20251122_per_phi.log       |  10 +
 .../phase_l/rot_vector/fix_checklist.md            |   2 +-
 .../rot_vector/mosflm_matrix_probe_output.log      |  22 +-
 .../phase_l/rot_vector/trace_py_env.json           |   6 +-
 scripts/compare_per_phi_traces.py                  |   3 +-
 11 files changed, 1008 insertions(+), 16 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_stdout.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/diagnosis.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/pytest_collect.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.log
From github.com:hoidn/nanoBragg
   f319ac8..99594f6  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 99594f6..3ab16d0
Fast-forward
 docs/fix_plan.md | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)
From github.com:hoidn/nanoBragg
   99594f6..3ab16d0  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 3ab16d0..9824468
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   3ab16d0..9824468  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=104
Ralph completed iteration 103; proceeding to 104
