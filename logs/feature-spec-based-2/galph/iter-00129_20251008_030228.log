Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=129
To github.com:hoidn/nanoBragg.git
   3bb515e..61d819a  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-08T03:02:32] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-08T03:02:32] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
<4>
run pyrefly check src/. triage the errors and delegate the fixing of them to ralph. be careful about test suite regressions.
</4>
<5>
delegate to ralph a full run of the test suite and triage of the failing test. review, classing various errors as either implementation bugs or consequences of test deprecation. then systematically fix the failing tests.
</5>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-08T03:02:34] thinking

**Preparing git pull command**
[2025-10-08T03:02:35] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:02:37] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.34s:
Already up to date.
[2025-10-08T03:02:37] tokens used: 1,001

[2025-10-08T03:02:40] thinking

**Preparing to read memory and docs**
[2025-10-08T03:02:40] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:02:41] bash -lc 'cat galph_memory.md' succeeded in 720ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-08T03:02:41] tokens used: 1,254

[2025-10-08T03:02:45] thinking

**Preparing to read large files**
[2025-10-08T03:02:46] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:02:46] bash -lc 'cat docs/index.md' succeeded in 722ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-08T03:02:46] tokens used: 4,245

[2025-10-08T03:02:49] thinking

**Preparing to read spec-a.md**
[2025-10-08T03:02:49] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:02:50] bash -lc 'cat specs/spec-a.md' succeeded in 703ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-08T03:02:50] tokens used: 23,077

[2025-10-08T03:02:52] thinking

**Considering spec-a-core and shards**
[2025-10-08T03:02:53] exec bash -lc 'cat specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:02:54] bash -lc 'cat specs/spec-a-core.md' succeeded in 748ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-08T03:02:54] tokens used: 23,507

[2025-10-08T03:02:55] thinking

**Checking for architecture documentation**
[2025-10-08T03:02:56] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:02:56] bash -lc 'cat arch.md' succeeded in 690ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-08T03:02:56] tokens used: 28,585

[2025-10-08T03:03:01] thinking

**Preparing to review documentation files**
[2025-10-08T03:03:02] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:02] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 701ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-08T03:03:02] tokens used: 34,383

[2025-10-08T03:03:04] thinking

**Checking debugging documentation**
[2025-10-08T03:03:04] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:05] bash -lc 'cat docs/debugging/debugging.md' succeeded in 700ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-08T03:03:05] tokens used: 36,244

[2025-10-08T03:03:07] thinking

**Opening testing strategy document**
[2025-10-08T03:03:08] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:08] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 682ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-08T03:03:08] tokens used: 38,658

[2025-10-08T03:03:12] thinking

**Preparing to analyze codebase deeply**
[2025-10-08T03:03:13] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:14] bash -lc 'cat docs/fix_plan.md' succeeded in 724ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-08T03:03:14] tokens used: 70,250

[2025-10-08T03:03:17] thinking

**Reviewing active plans for context**
[2025-10-08T03:03:18] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:18] bash -lc 'ls plans/active' succeeded in 702ms:
cli-noise-pix0
cli-phi-parity-shim
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-08T03:03:18] tokens used: 73,257

[2025-10-08T03:03:20] thinking

**Reviewing CLI flag plan**
[2025-10-08T03:03:21] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:22] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 692ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-08T03:03:22] tokens used: 73,521

[2025-10-08T03:03:28] thinking

**Outlining priorities and analysis plan**

I'm organizing the long-term goals: adding CLI params for parallel tests, checking the phi 0 bug, planning vectorization, running pyrefly, and completing the test suite. I’m thinking the next move is a deep analysis to assess progress and gaps across these goals before using a coin flip to decide focus. I’ll keep in mind docs and other plans to help with this review.
[2025-10-08T03:03:29] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:30] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 719ms:
tails
[2025-10-08T03:03:30] tokens used: 82,629

[2025-10-08T03:03:34] thinking

**Assessing plan necessity and focus**
[2025-10-08T03:03:34] exec bash -lc 'cat docs/bugs/verified_c_bugs.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:35] bash -lc 'cat docs/bugs/verified_c_bugs.md' succeeded in 686ms:
# Verified `nanoBragg.c` Bugs (2025-10)

## Severity Overview
- **High:** C-IMPL-BUG-002, C-DESIGN-FLAW-001, C-DESIGN-FLAW-003, NANO-C-BUG-001, NANO-C-BUG-002
- **Medium:** C-DESIGN-FLAW-002, C-DESIGN-FLAW-005, C-PARITY-001
- **Low:** C-LOGGING-BUG-001

Artifact logs for the reproductions below live under `docs/bugs/artifacts/`.

---

### C-IMPL-BUG-002 — Incorrect Angle Units in `mosaic_rotation_umat` (High)
**Summary:** The random misset path feeds `90.0` (degrees) into `mosaic_rotation_umat`, but the helper interprets angles in radians. The code therefore constructs rotation matrices using a 90-radian cap (≈5156°), which produces non-physical orientations.

**Reproduction:**
```bash
./golden_suite_generator/nanoBragg \
  -cell 50 60 70 80 90 100 \
  -misset random \
  -default_F 1 -N 0 \
[2025-10-08T03:03:35] tokens used: 83,048

[2025-10-08T03:03:38] thinking

**Assessing plan and spec for bugs**
[2025-10-08T03:03:38] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:39] bash -lc 'cat plans/active/vectorization.md' succeeded in 696ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-30): Phases A–D complete — gather vectorization (commit 12742e5) and batched polynomials (commit f796861) are merged with CPU+CUDA evidence in `reports/2025-10-vectorization/phase_d/`. Parity/perf validation (Phase E) is the active gate before detector absorption vectorization (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:03:39] tokens used: 86,360

[2025-10-08T03:03:48] thinking

**Evaluating plan update necessity**
[2025-10-08T03:03:49] exec bash -lc 'rg "phi" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:49] bash -lc 'rg "phi" docs/fix_plan.md' succeeded in 687ms:
3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
  * [2025-11-24] Attempt #112 (galph — review) — Result: **REOPENED**. No tests run. Reviewed commit 6487e46 (φ=0 carryover) and found `_phi_last_cache` stays on the original device and `torch.tensor(last_phi_deg, …)` severs gradients. Updated `plans/active/cli-noise-pix0/plan.md` task L3k.3c.3 plus this fix-plan entry to keep VG-1 red until device/dtype neutrality and grad flow are restored; artifacts: plan diff + docs/fix_plan.md Next Actions update.
    Metrics: Gradient warning ELIMINATED (no more torch.tensor() warning). Crystal geometry smoke: 49/49 passed in 2.45s. Gradient tests: 2 passed, 3 skipped (no regressions). Test collection: 655 tests. `test_rot_b_matches_c` PASSES. `test_k_frac_phi0_matches_c` FAILS (expected — exposes underlying rotation bug; deferred to Phase L3k.3d+).
      - `src/nanobrag_torch/models/crystal.py:1070-1075` — Replaced `torch.tensor(last_phi_deg, ...)` with conditional `.to()` to preserve gradients
      - `src/nanobrag_torch/models/crystal.py:151-159` — Extended `Crystal.to()` to migrate `_phi_last_cache` tensors when device/dtype changes
      - Targeted test runs: test_rot_b_matches_c PASSED, test_gradcheck_phi_rotation SKIPPED (no warnings), test_k_frac_phi0_matches_c FAILED (expected)
    Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
      - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
      - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
      - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/pytest_phi0.log` — Test execution output (2 passed)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/sha256.txt` — Cryptographic hashes (eea25db..., 84bd30b...)
      - **test_k_frac_phi0_matches_c PASSED**: k_frac = 1.6756687164 at φ=0 for pixel (685,1039), confirming Miller indices use base vectors
    Metrics: Design-only loop (no code/tests modified). Test collection: 2/2 tests discovered in 0.80s (test_rot_b_matches_c, test_k_frac_phi0_matches_c).
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md` — Complete parity shim design note (496 lines, 10 sections): executive summary, C-PARITY-001 background (nanoBragg.c:3044-3066 quoted per CLAUDE Rule #11), opt-in trigger (`--phi-carryover-mode {spec,c-parity}`), batched tensor implementation strategy, validation plan (tests + traces + nb-compare), risk assessment, documentation updates, implementation roadmap
      - `plans/active/cli-phi-parity-shim/plan.md` — Phase B tasks (B1-B3) marked [D] complete with artifact references
      - **Opt-in API designed**: CLI flag `--phi-carryover-mode` with default="spec" (spec-compliant) and opt-in="c-parity" (C bug reproduction)
      - **Config plumbing**: `CrystalConfig.phi_carryover_mode` field; parser updates in `__main__.py`
      - **Vectorization preserved**: Implementation uses `torch.where` + `torch.cat` for per-step masking (no Python loops); maintains (phi_steps, 3) tensor shapes
[2025-10-08T03:03:49] tokens used: 88,528

[2025-10-08T03:03:53] thinking

**Verifying spec compliance and bug presence**

I'll check the spec sections mentioned in the documentation to confirm they don't include the bug, then inspect the Pyro code in `src/nanobrag_torch/models/crystal.py` since it uses `_phi_last_cache` to mimic a C bug that may conflict with the spec, helping me determine the actual behavior and whether it aligns with the specification or not.
[2025-10-08T03:03:55] exec bash -lc "sed -n '1000,1200p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:03:55] bash -lc "sed -n '1000,1200p' src/nanobrag_torch/models/crystal.py" succeeded in 660ms:
                                            /* apply mosaic rotation after phi rotation */
                                            if( mosaic_spread > 0.0 )
                                            {
                                                rotate_umat(ap,a,&mosaic_umats[mos_tic*9]);
                                                rotate_umat(bp,b,&mosaic_umats[mos_tic*9]);
                                                rotate_umat(cp,c,&mosaic_umats[mos_tic*9]);
                                            }
                                            else
                                            {
                                                a[1]=ap[1];a[2]=ap[2];a[3]=ap[3];
                                                b[1]=bp[1];b[2]=bp[2];b[3]=bp[3];
                                                c[1]=cp[1];c[2]=cp[2];c[3]=cp[3];
                                            }
        ```

        Args:
            config: CrystalConfig containing rotation parameters.

        Returns:
            Tuple containing:
[2025-10-08T03:03:55] tokens used: 91,599

[2025-10-08T03:03:58] thinking

**Verifying default configuration settings**
[2025-10-08T03:03:59] exec bash -lc 'rg "phi_carryover_mode" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:00] bash -lc 'rg "phi_carryover_mode" -n src/nanobrag_torch' succeeded in 693ms:
src/nanobrag_torch/__main__.py:859:                phi_carryover_mode=args.phi_carryover_mode
src/nanobrag_torch/config.py:154:    phi_carryover_mode: str = "spec"
src/nanobrag_torch/config.py:164:        # Validate phi_carryover_mode
src/nanobrag_torch/config.py:165:        if self.phi_carryover_mode not in ["spec", "c-parity"]:
src/nanobrag_torch/config.py:167:                f"phi_carryover_mode must be 'spec' or 'c-parity', got '{self.phi_carryover_mode}'"
src/nanobrag_torch/models/crystal.py:1140:        # When phi_carryover_mode=="c-parity", replace φ=0 vectors with cached "stale" values
src/nanobrag_torch/models/crystal.py:1168:        if config.phi_carryover_mode == "c-parity":
[2025-10-08T03:04:00] tokens used: 94,687

[2025-10-08T03:04:02] thinking

**Verifying CLI default spec in __main__**
[2025-10-08T03:04:05] exec bash -lc "sed -n '820,880p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:06] bash -lc "sed -n '820,880p' src/nanobrag_torch/__main__.py" succeeded in 692ms:

def main():
    """Main entry point for CLI."""

    # Parse arguments
    parser = create_parser()
    args = parser.parse_args()

    try:
        # Parse dtype and device early (DTYPE-DEFAULT-001)
        dtype = torch.float32 if args.dtype == 'float32' else torch.float64
        device = torch.device(args.device)

        # Validate and convert arguments
        config = parse_and_validate_args(args)

        # Create configuration objects
        if 'cell_params' in config:
            crystal_config = CrystalConfig(
                cell_a=config['cell_params'][0],
[2025-10-08T03:04:06] tokens used: 95,141

[2025-10-08T03:04:08] thinking

**Verifying parser default settings**
[2025-10-08T03:04:09] exec bash -lc 'rg "phi-carryover" -n src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:09] bash -lc 'rg "phi-carryover" -n src/nanobrag_torch/__main__.py' succeeded in 669ms:
377:    parser.add_argument('--phi-carryover-mode', type=str,
[2025-10-08T03:04:09] tokens used: 96,881
[2025-10-08T03:04:12] exec bash -lc "sed -n '360,400p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:12] bash -lc "sed -n '360,400p' src/nanobrag_torch/__main__.py" succeeded in 669ms:
                        help='Disable progress meter')
    parser.add_argument('-progress', action='store_true',
                        help='Enable progress meter')
    parser.add_argument('-seed', type=int,
                        help='Noise RNG seed')
    parser.add_argument('-show_config', '-echo_config', action='store_true',
                        help='Print configuration parameters for debugging')

    # Performance options (PERF-PYTORCH-006)
    parser.add_argument('-dtype', type=str, choices=['float32', 'float64'],
                        default='float32',
                        help='Floating point precision (float32 for speed, float64 for accuracy)')
    parser.add_argument('-device', type=str, choices=['cpu', 'cuda'],
                        default='cpu',
                        help='Device for computation (cpu or cuda)')

    # Phi rotation behavior (CLI-FLAGS-003 Phase C2)
    parser.add_argument('--phi-carryover-mode', type=str,
                        default='spec',
                        choices=['spec', 'c-parity'],
[2025-10-08T03:04:12] tokens used: 97,716

[2025-10-08T03:04:22] thinking

**Verifying specification consistency**
[2025-10-08T03:04:22] exec bash -lc "sed -n '200,240p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:23] bash -lc "sed -n '200,240p' specs/spec-a-core.md" succeeded in 742ms:
            - For each source:
                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
                - Polarization factor (if enabled; Kahn model):
                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
the Kahn factor from -polar.
                - Crystal orientation:
                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
about u by φ to get (ap,bp,cp).
                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
(a,b,c).
                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
                - Lattice factor F_latt:
                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
where
[2025-10-08T03:04:23] tokens used: 98,469

[2025-10-08T03:04:27] thinking

**Evaluating phi bug impact and caching**
[2025-10-08T03:04:27] exec bash -lc 'rg "_phi_last_cache" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:28] bash -lc 'rg "_phi_last_cache" -n src/nanobrag_torch' exited 1 in 696ms:

[2025-10-08T03:04:28] tokens used: 99,724

[2025-10-08T03:04:35] thinking

**Reviewing phi bug evidence and documentation**

I’m gathering evidence to confirm whether the phi 0 carryover bug affected the specs or PyTorch implementation. I’ll review relevant docs like specs/spec-a-core.md and docs/bugs/verified_c_bugs.md, plus related plans and code, and check tests such as tests/test_cli_scaling_phi0.py. All this will help me compile a clear summary and decide if updates are needed.
[2025-10-08T03:04:37] exec bash -lc 'cat tests/test_cli_scaling_phi0.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:37] bash -lc 'cat tests/test_cli_scaling_phi0.py' succeeded in 693ms:
"""
CLI Scaling φ=0 Parity Tests for CLI-FLAGS-003 Phase L3k.3

Tests φ=0 rotated lattice vectors and Miller indices to capture the base-vector
drift before implementing the fix for independent real/reciprocal rotation.

Evidence base: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
Plan reference: plans/active/cli-noise-pix0/plan.md Phase L3k.3
Supervisor memo: input.md:22-45 (Do Now for Phase L3k.3)
"""
import os
import sys
from pathlib import Path
import pytest
import torch
import numpy as np

# Set required environment variable
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-08T03:04:37] tokens used: 100,388

[2025-10-08T03:04:41] thinking

**Continuing analysis and planning next steps**
[2025-10-08T03:04:42] exec bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:43] bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' succeeded in 710ms:
## Context
- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:04:43] tokens used: 103,596

[2025-10-08T03:04:54] thinking

**Summarizing verification and planning next steps**

I'm gathering key evidence showing that the spec remains unaffected by the bug, confirming parity mode is optional and defaults are respected. I’m preparing to instruct Ralph to complete remaining documentation and CLI-flag tasks, especially Phase C4, and recommending new trace gathering for accuracy. Before finalizing, I’ll update input.md with a clear summary and verify the git branch to align with expectations.
[2025-10-08T03:04:56] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:04:56] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 685ms:
feature/spec-based-2
[2025-10-08T03:04:56] tokens used: 106,228

[2025-10-08T03:05:22] thinking

**Summarizing and planning detailed action items**

I'm organizing the analysis to create a structured input focusing on documentation mode and verifying spec completeness for CLI-FLAGS-003 on the feature/spec-based-2 branch. I’m carefully drafting a clear summary, specifying mapped tests, artifact paths, priorities referencing files with line numbers, exact commands for the developer, and pitfalls to avoid, all aimed at guiding Ralph in verifying spec compliance and updating docs without running full test suites.
[2025-10-08T03:05:24] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:05:25] bash -lc 'cat input.md' succeeded in 836ms:
Summary: Chase the 2.85 µm pix0_z mismatch so φ=0 c-parity traces drop below the 1e-6 gate.
Mode: Parity
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c, tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_phi0_matches_c, tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_c_parity_mode_stale_carryover
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/
Do Now: CLI-FLAGS-003 Phase L3k.3c.4 — PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --pixel 685 1039 --out reports/2025-10-cli-flags/phase_l/parity_shim/$TS/trace_py_c_parity.log --config supervisor --device cpu --dtype float64 --phi-mode c-parity && NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg -mat A.mat -floatfile /tmp/c_float.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -trace_pixel 685 1039 > reports/2025-10-cli-flags/phase_l/parity_shim/$TS/c_trace_phi.log && KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/$TS/trace_py_c_parity_per_phi.json reports/2025-10-cli-flags/phase_l/parity_shim/$TS/c_trace_phi.log
If Blocked: Capture fresh pix0/scattering vectors with KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/debug_pixel_trace.py --pixel-s 685 --pixel-f 1039 and document the delta under reports/2025-10-cli-flags/phase_l/parity_shim/$TS-blocked/ before touching code.
Priorities & Rationale:
- docs/fix_plan.md:458-480 — Next action now singles out pix0_z drift (Attempt #128 evidence) so Phase L3k.3c.4 must remove it before any other tweaks.
- reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md — New comparison pinpoints pix0 as the first >1e-6 divergence.
- plans/active/cli-phi-parity-shim/plan.md:70-112 — Phase C4 still [P]; requires per-φ traces with ≤1e-6 deltas before moving to documentation (Phase D).
- specs/spec-a-core.md:211-224 — Normative φ rotation uses fresh vectors each step; parity shim must only introduce carryover, not geometry drift.
- docs/bugs/verified_c_bugs.md:166-204 — C bug description; confirms we should quarantine carryover while keeping spec mode clean.
How-To Map:
- Regenerate PyTorch per-φ traces: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --pixel 685 1039 --out reports/2025-10-cli-flags/phase_l/parity_shim/$TS/trace_py_c_parity.log --config supervisor --device cpu --dtype float64 --phi-mode c-parity` (main trace in parity_shim/$TS, per-φ JSON under `reports/2025-10-cli-flags/phase_l/per_phi/...$TS/`).
- Compare traces: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/$TS/trace_py_c_parity_per_phi.json reports/2025-10-cli-flags/phase_l/parity_shim/$TS/c_trace_phi.log > reports/2025-10-cli-flags/phase_l/parity_shim/$TS/compare_stdout.txt`.
- Validate targeted tests on CPU (and CUDA if available): `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_phi0_matches_c -v` and `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_c_parity_mode_stale_carryover -v`.
- Archive SHA256 + env: reuse `scripts/tools/capture_env.py` (or copy template from `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/env.json`) into the new `$TS` directory.
- When parity passes, update `reports/2025-10-cli-flags/phase_l/parity_shim/$TS/diff_summary.md` with the compare output and log metrics into docs/fix_plan.md.
[2025-10-08T03:05:25] tokens used: 109,267

[2025-10-08T03:05:32] thinking

**Preparing detailed input.md rewrite**
[2025-10-08T03:05:42] exec bash -lc "cat <<'EOF' > input.md
Summary: Verify φ=0 rotations stay spec-compliant and capture fresh documentation before expanding the parity shim.
Mode: Docs
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c, tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec
Artifacts: reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/
Do Now: CLI-FLAGS-003 Phase L3k.3c.3 (spec baseline enforcement) — KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q
If Blocked: Run "'`KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only tests/test_cli_scaling_phi0.py -q`, log the collector output under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/collect.log`, and note the blockage in docs/fix_plan.md Attempt history before proceeding.
Priorities & Rationale:
- specs/spec-a-core.md:211 — Normative φ loop mandates fresh rotations each step; reconfirming this guards against the C carryover bug bleeding into spec docs.
- docs/bugs/verified_c_bugs.md:166 — Documents C-PARITY-001 as an implementation defect; the spec must continue to flag it as non-normative.
- src/nanobrag_torch/models/crystal.py:1106 — Default code path already enforces spec rotations; capturing evidence ensures regressions are caught early.
- tests/test_cli_scaling_phi0.py:17 — Regression tests assert the spec baseline; rerunning them satisfies the plan’s VG-1 gate.
- plans/active/cli-phi-parity-shim/plan.md:70 — Phase C4 waits on refreshed traces/documentation; this loop feeds its prerequisites without yet touching parity math.
How-To Map:
- Set env before tests: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` and `export KMP_DUPLICATE_LIB_OK=TRUE` per runtime checklist.
- Execute targeted spec tests (CPU first): `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q > reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cpu.log`.
- If CUDA available, rerun with `--device cuda` fixture enabled: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q --device cuda > reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cuda.log`.
- Capture a short narrative in `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/summary.md` citing the command(s), pass/fail status, and confirming that spec mode remains default.
- Update docs/fix_plan.md Attempt for CLI-FLAGS-003 with log references and note that documentation refresh (Phase D1) can proceed once parity shim evidence is ready.
Pitfalls To Avoid:
- Do not edit specs to mention the carryover bug as normative.
- Leave `phi_carryover_mode` default set to "spec"; no testing with c-parity in this loop.
- Avoid running the full pytest suite—stick to the mapped selectors.
- Keep new artifacts under the `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/` timestamped subfolder; do not overwrite earlier evidence.
- Maintain device/dtype neutrality when adding any future instrumentation (no `.cpu()` conversions in core code).
- Respect Protected Assets: do not touch files listed in docs/index.md (e.g., loop.sh, supervisor.sh, input.md template).
- Record timestamps/commands in a `commands.txt` alongside the logs for reproducibility.
- If CUDA is unavailable, explicitly mention that in summary.md and skip the GPU run rather than forcing CPU fallback.
- Do not modify parity shim implementation yet; this pass is documentation/evidence only.
- Keep environment variables local to the session; no persistent shell RC edits.
Pointers:
- specs/spec-a-core.md:211
- docs/bugs/verified_c_bugs.md:166
- src/nanobrag_torch/models/crystal.py:1106
- tests/test_cli_scaling_phi0.py:17
- plans/active/cli-noise-pix0/plan.md:309
Next Up: Once documentation is refreshed, resume Phase C4 of the parity shim plan to tighten the c-parity per-φ trace deltas.
EOF' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:05:43] bash -lc "cat <<'EOF' > input.md
Summary: Verify φ=0 rotations stay spec-compliant and capture fresh documentation before expanding the parity shim.
Mode: Docs
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c, tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec
Artifacts: reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/
Do Now: CLI-FLAGS-003 Phase L3k.3c.3 (spec baseline enforcement) — KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q
If Blocked: Run "'`KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only tests/test_cli_scaling_phi0.py -q`, log the collector output under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/collect.log`, and note the blockage in docs/fix_plan.md Attempt history before proceeding.
Priorities & Rationale:
- specs/spec-a-core.md:211 — Normative φ loop mandates fresh rotations each step; reconfirming this guards against the C carryover bug bleeding into spec docs.
- docs/bugs/verified_c_bugs.md:166 — Documents C-PARITY-001 as an implementation defect; the spec must continue to flag it as non-normative.
- src/nanobrag_torch/models/crystal.py:1106 — Default code path already enforces spec rotations; capturing evidence ensures regressions are caught early.
- tests/test_cli_scaling_phi0.py:17 — Regression tests assert the spec baseline; rerunning them satisfies the plan’s VG-1 gate.
- plans/active/cli-phi-parity-shim/plan.md:70 — Phase C4 waits on refreshed traces/documentation; this loop feeds its prerequisites without yet touching parity math.
How-To Map:
- Set env before tests: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` and `export KMP_DUPLICATE_LIB_OK=TRUE` per runtime checklist.
- Execute targeted spec tests (CPU first): `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q > reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cpu.log`.
- If CUDA available, rerun with `--device cuda` fixture enabled: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q --device cuda > reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cuda.log`.
- Capture a short narrative in `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/summary.md` citing the command(s), pass/fail status, and confirming that spec mode remains default.
- Update docs/fix_plan.md Attempt for CLI-FLAGS-003 with log references and note that documentation refresh (Phase D1) can proceed once parity shim evidence is ready.
Pitfalls To Avoid:
- Do not edit specs to mention the carryover bug as normative.
- Leave `phi_carryover_mode` default set to "spec"; no testing with c-parity in this loop.
- Avoid running the full pytest suite—stick to the mapped selectors.
- Keep new artifacts under the `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/` timestamped subfolder; do not overwrite earlier evidence.
- Maintain device/dtype neutrality when adding any future instrumentation (no `.cpu()` conversions in core code).
- Respect Protected Assets: do not touch files listed in docs/index.md (e.g., loop.sh, supervisor.sh, input.md template).
- Record timestamps/commands in a `commands.txt` alongside the logs for reproducibility.
- If CUDA is unavailable, explicitly mention that in summary.md and skip the GPU run rather than forcing CPU fallback.
- Do not modify parity shim implementation yet; this pass is documentation/evidence only.
- Keep environment variables local to the session; no persistent shell RC edits.
Pointers:
- specs/spec-a-core.md:211
- docs/bugs/verified_c_bugs.md:166
- src/nanobrag_torch/models/crystal.py:1106
- tests/test_cli_scaling_phi0.py:17
- plans/active/cli-noise-pix0/plan.md:309
Next Up: Once documentation is refreshed, resume Phase C4 of the parity shim plan to tighten the c-parity per-φ trace deltas.
EOF' succeeded in 754ms:

[2025-10-08T03:05:43] tokens used: 113,738

[2025-10-08T03:05:45] thinking

**Checking a file**
[2025-10-08T03:05:45] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:05:46] bash -lc 'cat input.md' succeeded in 709ms:
Summary: Verify φ=0 rotations stay spec-compliant and capture fresh documentation before expanding the parity shim.
Mode: Docs
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c, tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec
Artifacts: reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/
Do Now: CLI-FLAGS-003 Phase L3k.3c.3 (spec baseline enforcement) — KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q
If Blocked: Run `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only tests/test_cli_scaling_phi0.py -q`, log the collector output under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/collect.log`, and note the blockage in docs/fix_plan.md Attempt history before proceeding.
Priorities & Rationale:
- specs/spec-a-core.md:211 — Normative φ loop mandates fresh rotations each step; reconfirming this guards against the C carryover bug bleeding into spec docs.
- docs/bugs/verified_c_bugs.md:166 — Documents C-PARITY-001 as an implementation defect; the spec must continue to flag it as non-normative.
- src/nanobrag_torch/models/crystal.py:1106 — Default code path already enforces spec rotations; capturing evidence ensures regressions are caught early.
- tests/test_cli_scaling_phi0.py:17 — Regression tests assert the spec baseline; rerunning them satisfies the plan’s VG-1 gate.
- plans/active/cli-phi-parity-shim/plan.md:70 — Phase C4 waits on refreshed traces/documentation; this loop feeds its prerequisites without yet touching parity math.
How-To Map:
- Set env before tests: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` and `export KMP_DUPLICATE_LIB_OK=TRUE` per runtime checklist.
- Execute targeted spec tests (CPU first): `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q > reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cpu.log`.
- If CUDA available, rerun with `--device cuda` fixture enabled: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q --device cuda > reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cuda.log`.
- Capture a short narrative in `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/summary.md` citing the command(s), pass/fail status, and confirming that spec mode remains default.
- Update docs/fix_plan.md Attempt for CLI-FLAGS-003 with log references and note that documentation refresh (Phase D1) can proceed once parity shim evidence is ready.
[2025-10-08T03:05:46] tokens used: 115,137

[2025-10-08T03:05:49] thinking

**Verifying git modifications**
[2025-10-08T03:05:50] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:05:51] bash -lc 'git status --short' succeeded in 771ms:
 M input.md
[2025-10-08T03:05:51] tokens used: 116,422

[2025-10-08T03:05:57] thinking

**Preparing to update galph_memory.md**
[2025-10-08T03:06:02] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-12-01 (galph loop — φ=0 spec audit)
- Reviewed specs/spec-a-core.md:211-224 and confirmed φ loop remains spec-compliant (fresh rotations every step); no C carryover language in specs.
- Verified docs/bugs/verified_c_bugs.md:166 continues to quarantine C-PARITY-001 as a defect and the PyTorch default path ("'`Crystal.get_rotated_real_vectors` lines ~1080-1170) keeps `phi_carryover_mode="spec"` as default.
- `tests/test_cli_scaling_phi0.py` still enforces the spec baseline; instructed Ralph via input.md to rerun these selectors and capture fresh logs under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/` before touching parity shim math.
- Next actions for Ralph: execute the mapped tests, write `summary.md` + `commands.txt` in the new report directory, and log an Attempt update in docs/fix_plan.md so Phase C4 (parity shim traces) can resume with up-to-date documentation evidence.
EOF' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:03] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-12-01 (galph loop — φ=0 spec audit)
- Reviewed specs/spec-a-core.md:211-224 and confirmed φ loop remains spec-compliant (fresh rotations every step); no C carryover language in specs.
- Verified docs/bugs/verified_c_bugs.md:166 continues to quarantine C-PARITY-001 as a defect and the PyTorch default path ("'`Crystal.get_rotated_real_vectors` lines ~1080-1170) keeps `phi_carryover_mode="spec"` as default.
- `tests/test_cli_scaling_phi0.py` still enforces the spec baseline; instructed Ralph via input.md to rerun these selectors and capture fresh logs under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/` before touching parity shim math.
- Next actions for Ralph: execute the mapped tests, write `summary.md` + `commands.txt` in the new report directory, and log an Attempt update in docs/fix_plan.md so Phase C4 (parity shim traces) can resume with up-to-date documentation evidence.
EOF' succeeded in 747ms:

[2025-10-08T03:06:03] tokens used: 117,218

[2025-10-08T03:06:06] thinking

**Reviewing commit instructions**
[2025-10-08T03:06:07] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:07] bash -lc 'git diff' succeeded in 739ms:
diff --git a/galph_memory.md b/galph_memory.md
index 54745d7..7a3fc42 100644
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1828,3 +1828,9 @@ Follow-ups for Ralph:
 - Updated `docs/fix_plan.md` (Attempt #128 + Next Actions) to focus Phase L3k.3c.4 on eliminating pix0_z offset before re-running parity.
 - Refreshed `input.md` (Parity mode) directing Ralph to regenerate traces via `trace_harness.py`, capture C trace with `-trace_pixel 685 1039`, rerun `compare_per_phi_traces.py`, and keep docs/spec references aligned.
 - Follow-up: Ralph to audit detector pix0 pipeline (distance/pivot math) so VG-1 hits ≤1e-6, then progress to plan Phase C5.
+
+## 2025-12-01 (galph loop — φ=0 spec audit)
+- Reviewed specs/spec-a-core.md:211-224 and confirmed φ loop remains spec-compliant (fresh rotations every step); no C carryover language in specs.
+- Verified docs/bugs/verified_c_bugs.md:166 continues to quarantine C-PARITY-001 as a defect and the PyTorch default path (`Crystal.get_rotated_real_vectors` lines ~1080-1170) keeps `phi_carryover_mode="spec"` as default.
+- `tests/test_cli_scaling_phi0.py` still enforces the spec baseline; instructed Ralph via input.md to rerun these selectors and capture fresh logs under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/` before touching parity shim math.
+- Next actions for Ralph: execute the mapped tests, write `summary.md` + `commands.txt` in the new report directory, and log an Attempt update in docs/fix_plan.md so Phase C4 (parity shim traces) can resume with up-to-date documentation evidence.
diff --git a/input.md b/input.md
index 6877414..087b687 100644
--- a/input.md
+++ b/input.md
@@ -1,38 +1,38 @@
-Summary: Chase the 2.85 µm pix0_z mismatch so φ=0 c-parity traces drop below the 1e-6 gate.
[2025-10-08T03:06:07] tokens used: 118,676

[2025-10-08T03:06:11] thinking

**Starting commit process**
[2025-10-08T03:06:12] exec bash -lc 'git add input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:13] bash -lc 'git add input.md galph_memory.md' succeeded in 708ms:

[2025-10-08T03:06:13] tokens used: 120,423

[2025-10-08T03:06:15] thinking

**Preparing commit message**
[2025-10-08T03:06:16] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 doc audit - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:16] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 doc audit - tests: not run"' succeeded in 700ms:
[feature/spec-based-2 63d188e] SUPERVISOR: CLI-FLAGS-003 doc audit - tests: not run
 2 files changed, 38 insertions(+), 32 deletions(-)
[2025-10-08T03:06:16] tokens used: 121,628

[2025-10-08T03:06:21] thinking

**Pushing changes to remote**
[2025-10-08T03:06:22] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:24] bash -lc 'git push' succeeded in 2.08s:
To github.com:hoidn/nanoBragg.git
   61d819a..63d188e  feature/spec-based-2 -> feature/spec-based-2
[2025-10-08T03:06:24] tokens used: 121,849

[2025-10-08T03:06:28] thinking

**Preparing final summary with file references**

I'm putting together the final response highlighting key points like unchanged specs, default settings, test enforcement, and remaining plan tasks. To be precise, I'll gather exact line numbers from relevant files using line numbering commands so the references are accurate and helpful.
[2025-10-08T03:06:30] exec bash -lc "nl -ba specs/spec-a-core.md | sed -n '205,225p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:30] bash -lc "nl -ba specs/spec-a-core.md | sed -n '205,225p'" succeeded in 723ms:
   205	                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
   206	                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
   207	plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
   208	                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
   209	the Kahn factor from -polar.
   210	                - Crystal orientation:
   211	                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
   212	about u by φ to get (ap,bp,cp).
   213	                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
   214	(a,b,c).
   215	                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
   216	                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
   217	                - Lattice factor F_latt:
   218	                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
   219	where
   220	                        - sincg(x,N) = N if x = 0; otherwise sin(N·x)/sin(x).
   221	                    - ROUND (sinc3 sphere): hrad^2 = (h−h0)^2·Na^2 + (k−k0)^2·Nb^2 + (l−l0)^2·Nc^2.
   222	                        - F_latt = Na·Nb·Nc·0.723601254558268 · sinc3(π·sqrt(fudge·hrad^2)), where
   223	                            - sinc3(x) = 3·[(sin x)/x − cos x]/x^2 (with sinc3(0)=1).
   224	                    - GAUSS (in reciprocal space): Let Δr*^2 = ||(h−h0)·a* + (k−k0)·b* + (l−l0)·c*||
[2025-10-08T03:06:30] tokens used: 122,275

[2025-10-08T03:06:32] thinking

**Using line numbers for bug document**
[2025-10-08T03:06:33] exec bash -lc "nl -ba docs/bugs/verified_c_bugs.md | sed -n '150,210p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:34] bash -lc "nl -ba docs/bugs/verified_c_bugs.md | sed -n '150,210p'" succeeded in 664ms:
   150	  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-with-hkl.txt
   151	
   152	# Second run: no -hkl, automatically reads the cache
   153	./golden_suite_generator/nanoBragg -cell 70 70 70 90 90 90 -N 0 \
   154	  -distance 100 -detpixels 2 -pixel 0.1 \
   155	  -floatfile /tmp/cache2_float.bin -intfile /tmp/cache2_int.img -noisefile /tmp/cache2_noise.img \
   156	  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-no-hkl.txt
   157	```
   158	The follow-up log contains `reading Fs from Fdump.bin`, demonstrating the implicit dependency.
   159	
   160	**Relevant code:**
   161	- `golden_suite_generator/nanoBragg.c:1297-1304` — attempts to open `Fdump.bin` whenever `-hkl` is absent.
   162	- `golden_suite_generator/nanoBragg.c:2355-2368` — rehydrates the cached structure factors silently.
   163	
   164	---
   165	
   166	### C-PARITY-001 — φ=0 Uses Stale Crystal Vectors (Medium)
   167	**Summary:** Inside the φ loop, the rotated vectors `ap/bp/cp` are only updated when `phi != 0.0`; otherwise, they retain the previous state (often from the prior pixel’s final φ step). This produces step-0 Miller fractions that mirror the previous pixel rather than the unrotated lattice.
   168	
   169	**Reproduction:**
[2025-10-08T03:06:34] tokens used: 123,579

[2025-10-08T03:06:36] thinking

**Locating code snippet line number**
[2025-10-08T03:06:37] exec bash -lc "nl -ba src/nanobrag_torch/models/crystal.py | sed -n '1080,1180p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:37] bash -lc "nl -ba src/nanobrag_torch/models/crystal.py | sed -n '1080,1180p'" succeeded in 670ms:
  1080	            phi_rad
  1081	        )
  1082	        b_phi = rotate_axis(
  1083	            self.b.unsqueeze(0).expand(config.phi_steps, -1),
  1084	            spindle_axis.unsqueeze(0).expand(config.phi_steps, -1),
  1085	            phi_rad
  1086	        )
  1087	        c_phi = rotate_axis(
  1088	            self.c.unsqueeze(0).expand(config.phi_steps, -1),
  1089	            spindle_axis.unsqueeze(0).expand(config.phi_steps, -1),
  1090	            phi_rad
  1091	        )
  1092	
  1093	        # Step 2: Recompute reciprocal vectors from rotated real vectors
  1094	        # This ensures metric duality is preserved: a·a* = 1 exactly (CLAUDE Rule #13)
  1095	        # Formula: a* = (b × c) / V_actual, where V_actual = a · (b × c)
  1096	        # This matches the C-code's implicit reciprocal vector calculation during Miller index lookup.
  1097	        b_cross_c = torch.cross(b_phi, c_phi, dim=-1)
  1098	        c_cross_a = torch.cross(c_phi, a_phi, dim=-1)
  1099	        a_cross_b = torch.cross(a_phi, b_phi, dim=-1)
[2025-10-08T03:06:37] tokens used: 125,050

[2025-10-08T03:06:42] thinking

**Preparing to use line numbers**
[2025-10-08T03:06:50] exec bash -lc "nl -ba tests/test_cli_scaling_phi0.py | sed -n '1,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:51] bash -lc "nl -ba tests/test_cli_scaling_phi0.py | sed -n '1,80p'" succeeded in 715ms:
     1	"""
     2	CLI Scaling φ=0 Parity Tests for CLI-FLAGS-003 Phase L3k.3
     3	
     4	Tests φ=0 rotated lattice vectors and Miller indices to capture the base-vector
     5	drift before implementing the fix for independent real/reciprocal rotation.
     6	
     7	Evidence base: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
     8	Plan reference: plans/active/cli-noise-pix0/plan.md Phase L3k.3
     9	Supervisor memo: input.md:22-45 (Do Now for Phase L3k.3)
    10	"""
    11	import os
    12	import sys
    13	from pathlib import Path
    14	import pytest
    15	import torch
    16	import numpy as np
    17	
    18	# Set required environment variable
    19	os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
    20	
[2025-10-08T03:06:51] tokens used: 198,437

[2025-10-08T03:06:53] thinking

**Checking line 309 references**
[2025-10-08T03:06:54] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,360p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:06:55] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,360p'" succeeded in 696ms:
   300	| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
   301	| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
   302	
   303	#### L3k.3c Tasks — Restore φ=0 Parity with C Reference
   304	
   305	| ID | Task Description | State | How/Why & Guidance |
   306	| --- | --- | --- | --- |
   307	| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
   308	| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
   309	| L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
   310	| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
   311	| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
   312	| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
   313	
   314	### Phase L4 — Supervisor Command Parity Rerun
   315	Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
   316	Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
   317	Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
   318	
   319	| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:06:55] tokens used: 199,946

[2025-10-08T03:06:59] thinking

**Locating plan file reference**
[2025-10-08T03:07:00] exec bash -lc "nl -ba plans/active/cli-phi-parity-shim/plan.md | sed -n '60,140p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:07:00] bash -lc "nl -ba plans/active/cli-phi-parity-shim/plan.md | sed -n '60,140p'" succeeded in 709ms:

[2025-10-08T03:07:00] tokens used: 201,746

[2025-10-08T03:07:04] thinking

**Checking file length with line numbers**
[2025-10-08T03:07:04] exec bash -lc 'nl -ba plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:07:05] bash -lc 'nl -ba plans/active/cli-phi-parity-shim/plan.md' succeeded in 676ms:
     1	## Context
     2	- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
     3	- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
     4	- Dependencies:
     5	  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
     6	  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
     7	  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
     8	  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
     9	  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
    10	  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
    11	- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
    12	- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
    13	- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).
    14	
    15	### Phase A — Spec Baseline Confirmation (Prerequisite)
    16	Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
    17	Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
    18	Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.
    19	
    20	| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:07:05] tokens used: 201,990

[2025-10-08T03:07:11] thinking

**Preparing final summary message**

I’m organizing a clear final message that highlights the spec verification, doc bug labels, PyTorch spec details, and test coverage, plus instructions and next steps including running targeted tests and updating docs, while mentioning committed input updates. This will help the user easily scan findings and actions.
[2025-10-08T03:07:12] codex

**Spec Audit**  
- `specs/spec-a-core.md:211` still mandates fresh φ rotations each step; no carryover language leaked into the normative spec.  
- `docs/bugs/verified_c_bugs.md:166` continues to quarantine C-PARITY-001 as a defect rather than spec behaviour.  
- PyTorch’s default path in `src/nanobrag_torch/models/crystal.py:1082-1179` keeps `phi_carryover_mode="spec"` and only swaps to C-bug emulation when explicitly requested.  
- Regression guards in `tests/test_cli_scaling_phi0.py:25` and `:137` lock the spec baseline (rot_b and k_frac tolerances ≤1e-6), so evidence can be refreshed without touching production code.  
- Plan guidance (`plans/active/cli-noise-pix0/plan.md:303-312`, `plans/active/cli-phi-parity-shim/plan.md:1-58`) confirms Phase C4 remains open for parity traces while documentation updates (Phase D1) are pending new spec evidence.

**Next Steps**  
- Run the targeted selectors from `input.md` (`KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q`) and stash logs in `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/`.  
- Capture a short `summary.md` plus command log in that directory, then record an Attempt update for CLI-FLAGS-003 noting the refreshed spec documentation.  
- When ready, return to Phase C4 of the parity shim plan to tighten the c-parity per-φ deltas before tackling documentation tasks.  

Commit `SUPERVISOR: CLI-FLAGS-003 doc audit - tests: not run` updates `input.md` and `galph_memory.md`; no tests were executed this turn.
[2025-10-08T03:07:16] tokens used: 205,063
Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   63d188e..6685a95  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=129...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=129
Updating 6685a95..4ba98e8
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   6685a95..4ba98e8  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=129
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 4ba98e8..94445c5
Fast-forward
 docs/fix_plan.md                                   | 20 +++++++
 .../phase_l/spec_baseline_refresh/commands.txt     | 19 +++++++
 .../phase_l/spec_baseline_refresh/pytest_cpu.log   | 11 ++++
 .../phase_l/spec_baseline_refresh/pytest_cuda.log  |  5 ++
 .../phase_l/spec_baseline_refresh/summary.md       | 64 ++++++++++++++++++++++
 5 files changed, 119 insertions(+)
 create mode 100644 reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/commands.txt
 create mode 100644 reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cpu.log
 create mode 100644 reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/pytest_cuda.log
 create mode 100644 reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/summary.md
From github.com:hoidn/nanoBragg
   4ba98e8..94445c5  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 94445c5..8b7ef1d
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   94445c5..8b7ef1d  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=130
Ralph completed iteration 129; proceeding to 130
