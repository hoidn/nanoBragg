Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=86
To github.com:hoidn/nanoBragg.git
   2ef99aa..1227bbd  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T09:33:59] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T09:33:59] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T09:34:02] thinking

**Preparing to pull latest changes**
[2025-10-07T09:34:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:05] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' succeeded in 2.52s:
Already up to date.
[2025-10-07T09:34:05] tokens used: 13,998

[2025-10-07T09:34:07] thinking

**Reading latest galph_memory.md**
[2025-10-07T09:34:08] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:09] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' succeeded in 824ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T09:34:09] tokens used: 14,942

[2025-10-07T09:34:14] thinking

**Preparing to read documentation files**
[2025-10-07T09:34:15] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:15] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' succeeded in 874ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T09:34:15] tokens used: 17,868

[2025-10-07T09:34:17] thinking

**Checking for spec file**
[2025-10-07T09:34:18] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:19] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' succeeded in 952ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T09:34:19] tokens used: 19,629

[2025-10-07T09:34:22] thinking

**Reviewing spec references**
[2025-10-07T09:34:22] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:23] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' succeeded in 883ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T09:34:23] tokens used: 20,017

[2025-10-07T09:34:26] thinking

**Opening development config map**
[2025-10-07T09:34:27] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:28] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' succeeded in 931ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T09:34:28] tokens used: 22,816

[2025-10-07T09:34:30] thinking

**Searching for debugging documentation**
[2025-10-07T09:34:30] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:31] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' succeeded in 955ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T09:34:31] tokens used: 24,743

[2025-10-07T09:34:35] thinking

**Preparing to read fix_plan.md efficiently**
[2025-10-07T09:34:36] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:37] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l docs/fix_plan.md' succeeded in 962ms:
    2002 docs/fix_plan.md
[2025-10-07T09:34:37] tokens used: 27,307

[2025-10-07T09:34:41] thinking

**Preparing to read large file**
[2025-10-07T09:34:41] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:42] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/fix_plan.md" succeeded in 935ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T09:34:42] tokens used: 27,657

[2025-10-07T09:34:47] thinking

**Considering file reading strategy**
[2025-10-07T09:34:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' succeeded in 1.17s:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T09:34:50] tokens used: 31,121

[2025-10-07T09:34:52] thinking

**Preparing for deep plan analysis**
[2025-10-07T09:34:53] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:54] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' succeeded in 891ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T09:34:54] tokens used: 33,872

[2025-10-07T09:34:57] thinking

**Checking documentation for vectorization and CLI flags**
[2025-10-07T09:34:58] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:34:59] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' succeeded in 908ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T09:34:59] tokens used: 34,156

[2025-10-07T09:35:01] thinking

**Checking vectorization plan**
[2025-10-07T09:35:01] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:02] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' succeeded in 764ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). **Phase B design memo landed in Attempt #3 (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tensor shapes, polynomial mapping, and gradient/device checklists.** Next blocker is executing Phase C implementation tasks using that design as the contract.
- Supervisory note (2025-11-18 → refreshed 2025-11-18b): fix_plan#VECTOR-TRICUBIC-001 now pivots to Phase C execution (tasks C1–C3). Keep `KMP_DUPLICATE_LIB_OK=TRUE` exported, reuse the design memo’s Section 2/3 diagrams, and stage changes behind feature-flag-friendly commits to ease review if batching becomes necessary.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T09:35:02] tokens used: 37,080

[2025-10-07T09:35:06] thinking

**Examining CLI-related fix plans**
[2025-10-07T09:35:07] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:08] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 842ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
463:  3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
[2025-10-07T09:35:08] tokens used: 39,871

[2025-10-07T09:35:09] thinking

**Inspecting code near line 450**
[2025-10-07T09:35:11] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:12] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,620p' docs/fix_plan.md" succeeded in 873ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-18 parity refresh):
  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
  3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
- Attempts History:
  * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
    Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-41` - Refreshed trace with live values (polar=0.91464138, omega_pixel=4.20404859e-07 sr, F_cell=0, I_before_scaling=0)
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md:1-54` - Phase L2c comparison report showing first divergence and all divergent factors
[2025-10-07T09:35:12] tokens used: 40,258

[2025-10-07T09:35:14] thinking

**Preparing to run Python coin flip**
[2025-10-07T09:35:15] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python -c \"import random; print('heads' if random.random()<0.5 else 'tails')\"" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:16] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python -c \"import random; print('heads' if random.random()<0.5 else 'tails')\"" succeeded in 875ms:
tails
[2025-10-07T09:35:16] tokens used: 43,260

[2025-10-07T09:35:29] thinking

**Evaluating plan updates and multi-turn needs**

I'm weighing whether the existing CLI and vectorization plans need updates or multi-turn planning, focusing on incorporating per-phi instrumentation tasks and aligning with long-term goals before deciding the next best action.
[2025-10-07T09:35:32] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "per-φ" -g"*.md"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "per-φ" -g"*.md"' succeeded in 1.08s:
input.md:1:Summary: Capture per-φ lattice traces so we can isolate the F_latt drift blocking CLI parity.
input.md:7:Do Now: CLI-FLAGS-003 — extend the scaling trace harness to emit per-φ `TRACE_PY_PHI` lattice entries and rerun the supervisor pixel; after instrumentation run `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
input.md:17:- Update `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py` to preserve simulator debug output (no reimplementation) and capture per-φ events; redirect stdout to `trace_py_scaling_per_phi.log`.
input.md:23:- Do not touch production geometry math until per-φ evidence pinpoints the divergence.
input.md:39:Next Up: If per-φ parity confirms the lattice mismatch, prep a simulator patch (Phase L3f/L3g) to align `_compute_structure_factor_components` with C and rerun the supervisor command via nb-compare.
docs/fix_plan.md:453:- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
docs/fix_plan.md:512:  * [2025-10-07] Attempt #85 (ralph loop) — Result: **SUCCESS** (Phase L3e per-φ instrumentation COMPLETE). **Extended Simulator and trace harness to emit TRACE_PY_PHI entries for all φ steps, enabling per-φ parity validation.**
docs/fix_plan.md:517:      - `reports/2025-10-cli-flags/phase_l/per_phi/trace_py_per_phi_20251007.log` - PyTorch per-φ trace (10 entries)
docs/fix_plan.md:521:      - **Instrumentation complete:** Simulator now emits per-φ lattice entries reusing existing rotated vectors from Crystal.get_rotated_real_vectors
docs/fix_plan.md:610:      - `reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md` — Narrative linking residual error to `F_latt` sign/magnitude mismatch and recommending per-φ TRACE instrumentation
docs/fix_plan.md:616:    Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
docs/fix_plan.md:908:  * [2025-10-06] Attempt #45 (ralph loop) — Result: **EVIDENCE COMPLETE** (Phase K3e per-φ Miller index parity). **Root cause identified: fundamental lattice/geometry mismatch (Δk≈6.0 at all φ steps), NOT a φ-sampling offset.**
docs/fix_plan.md:912:      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_pytorch_20251006-151228.json` - PyTorch per-φ trace (metadata + 10 φ steps)
docs/fix_plan.md:914:      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log` - C per-φ trace (TRACE_C_PHI instrumentation)
docs/fix_plan.md:1562:    Next Actions: **Phase L2 required** — Proceed to scaling-chain diagnostics with refreshed structure factors. Run per-φ traces comparing C vs PyTorch scaling factors (steps, r_e², fluence, omega, polarization) using instrumented supervisor command. Expected outcome: intensity sum_ratio 0.99–1.01 once all factors align.
plans/active/cli-noise-pix0/plan.md:28:- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
plans/active/cli-noise-pix0/plan.md:205:| K3e | Capture per-φ Miller index parity | [D] | ✅ 2025-10-06 Attempt #45 (ralph). Created `scripts/trace_per_phi.py`, generated PyTorch trace (`per_phi_pytorch_20251006-151228.json`), added TRACE_C_PHI to nanoBragg.c:3156-3160, ran C trace, compared via `scripts/compare_per_phi_traces.py`. **Finding:** Δk≈6.042 at φ=0° (C k_frac=−3.857, Py k_frac=−9.899), persists across all φ steps. **Root cause:** Not a φ-sampling issue—base lattice vectors or scattering geometry differ before φ rotation. |
plans/active/cli-noise-pix0/plan.md:208:Prereqs: K3e per-φ evidence archived; MOSFLM rescale guard (K3a) merged; pix0 SAMPLE pivot parity validated (H6g).
galph_memory.md:1294:## 2025-11-07 (galph loop — K3e per-φ parity setup)
galph_memory.md:1297:- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
[2025-10-07T09:35:33] tokens used: 44,627

[2025-10-07T09:35:38] thinking

**Identifying inconsistency in fix_plan.md**
[2025-10-07T09:35:39] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '500,560p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:40] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '500,560p' docs/fix_plan.md" succeeded in 931ms:
  * [2025-11-17] Attempt #77 (ralph loop) — Result: **SUCCESS** (Phase L3a coverage re-verification COMPLETE). **Re-executed probe on current workstation, confirmed HKL coverage with timestamped artifacts.**
    Metrics: Evidence-only loop; no production code changed. Pytest collection successful (tests/test_cli_scaling.py collected cleanly). Probe confirms F_cell=190.27 retrieved from scaled.hkl with delta 4.27e-06 (≈0.000002%).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/structure_factor/probe_20251117.log` - Fresh probe execution log with current git SHA acab43b, Torch 2.8.0+cu128, Linux platform
      - `reports/2025-10-cli-flags/phase_l/structure_factor/analysis_20251117.md` - Updated analysis documenting HKL coverage confirmation and L3c next actions
      - `reports/2025-10-cli-flags/phase_l/structure_factor/collect_cli_scaling_20251117.log` - Pytest collection validation (successful)
    Observations/Hypotheses:
      - **HKL data confirmed present:** scaled.hkl contains 49×57×62 grid, h∈[-24,24], k∈[-28,28], l∈[-31,30], covering target hkl=(-7,-1,-14)
      - **Lookup infrastructure works:** Probe retrieves F_cell=190.27 when HKL data properly attached via `crystal.hkl_data = F_grid; crystal.hkl_metadata = metadata` pattern
      - **Root cause remains configuration/loading:** The F_cell=0 divergence in trace_py_scaling.log stems from harness/CLI not loading/attaching HKL data, NOT from missing reflections or broken lookup logic
      - **Phase L3a exit criteria satisfied:** Fresh probe log and analysis captured with current environment metadata; HKL coverage ranges documented and reconciled
    Next Actions: Phase L3c harness audit per plan guidance (review trace_harness.py lines 206-236, compare against probe successful pattern, fix HKL attachment). NO simulator.py changes needed (scaling math correct per L2c, lookup logic works per L3a probe).
  * [2025-10-07] Attempt #85 (ralph loop) — Result: **SUCCESS** (Phase L3e per-φ instrumentation COMPLETE). **Extended Simulator and trace harness to emit TRACE_PY_PHI entries for all φ steps, enabling per-φ parity validation.**
    Metrics: 10 TRACE_PY_PHI lines captured (φ=0.0° to φ=0.1°), structured JSON generated, test suite collection passes (652 tests), targeted scaling trace test passes 4/4 variants.
    Artifacts:
      - `src/nanobrag_torch/simulator.py:1424-1460` - Per-φ tracing block emitting k_frac, F_latt_b, F_latt for each phi step
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:260-333` - Harness updates to capture and parse TRACE_PY_PHI lines
      - `reports/2025-10-cli-flags/phase_l/per_phi/trace_py_per_phi_20251007.log` - PyTorch per-φ trace (10 entries)
      - `reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251007.json` - Structured JSON with phi_tic, phi_deg, k_frac, F_latt_b, F_latt
      - `reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md` - Comparison summary documenting instrumentation and next steps
[2025-10-07T09:35:40] tokens used: 47,332

[2025-10-07T09:35:44] thinking

**Analyzing instrumentation discrepancies**
[2025-10-07T09:35:44] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '600,700p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:46] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '600,700p' docs/fix_plan.md" succeeded in 1.08s:
      - **Relative deltas now fractional:** Output format changed from percentage (`+0.003%`) to scientific notation (`+3.094e-08`) for consistency with threshold
      - **Deprecation warning fixed:** Replaced datetime.utcnow() with datetime.now().astimezone() to avoid Python 3.13+ deprecation warning
      - **No production code changes:** Evidence-only loop per input.md Parity mode; script updates are tooling-layer only
    Next Actions: Phase L3f documentation sync — Update analysis.md + architectural docs with finalized ingestion/normalization flow once scaling validation passes (per input.md lines 462-463).
  * [2025-11-19] Attempt #83 (galph loop) — Result: **EVIDENCE UPDATE** (Phase L3e parity snapshot). **Reran scaling comparison with latest PyTorch trace (`trace_py_scaling_20251117.log`) and documented the surviving lattice-factor gap.**
    Metrics: Comparison reports 5 divergent factors with `I_before_scaling` still CRITICAL (−0.24397 relative). `r_e^2`, `fluence`, `steps`, `capture_fraction` remain PASS; `polar`, `omega_pixel`, `cos_2theta` MINOR. `I_pixel_final` mirrors the raw accumulation delta (−0.17343 relative).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md` — Updated markdown table using the new TRACE_PY capture
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json` — Refreshed structured metrics (overwrites prior Phase L2c output with latest deltas)
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/run_metadata.json` — Updated run metadata (git SHA 1de11df, torch 2.7.1, command/path snapshot)
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md` — Narrative linking residual error to `F_latt` sign/magnitude mismatch and recommending per-φ TRACE instrumentation
    Observations/Hypotheses:
      - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
      - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
      - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
    Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
  * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
    Metrics: Harness probe confirms hkl_data attached (lookup returns F=100 for (1,12,3), F=0 for out-of-range). Comparison identifies I_before_scaling as first divergence. Test suite passes 4/4 variants (tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics).
    Artifacts:
[2025-10-07T09:35:46] tokens used: 50,183

[2025-10-07T09:35:50] thinking

**Assessing instrumentation contradictions**
[2025-10-07T09:35:51] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "TRACE_PY_PHI" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:35:51] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "TRACE_PY_PHI" -n src/nanobrag_torch' succeeded in 924ms:
src/nanobrag_torch/simulator.py:1425:                    # Emit TRACE_PY_PHI for each φ step to enable per-φ parity validation
src/nanobrag_torch/simulator.py:1459:                            # Emit TRACE_PY_PHI matching C trace format
src/nanobrag_torch/simulator.py:1460:                            print(f"TRACE_PY_PHI phi_tic={phi_tic} phi_deg={phi_deg:.15g} k_frac={k_phi:.15g} F_latt_b={F_latt_b_phi:.15g} F_latt={F_latt_phi:.15g}")
[2025-10-07T09:35:51] tokens used: 51,967

[2025-10-07T09:36:00] thinking

**Evaluating plan consistency and instrumentation status**
[2025-10-07T09:36:02] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' succeeded in 983ms:
Summary: Capture per-φ lattice traces so we can isolate the F_latt drift blocking CLI parity.
Mode: Parity
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: [tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics]
Artifacts: reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log; reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251119.json; reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md
Do Now: CLI-FLAGS-003 — extend the scaling trace harness to emit per-φ `TRACE_PY_PHI` lattice entries and rerun the supervisor pixel; after instrumentation run `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
If Blocked: Re-run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251117.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md` and log findings in docs/fix_plan.md Attempt history.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md Phase L3e calls for scaling-factor validation before closing the CLI parity blocker.
- docs/fix_plan.md:450-540 records I_before_scaling as the first divergence; Attempt #83 highlights the remaining lattice-factor gap.
- specs/spec-a-cli.md ensures `-pix0_vector_mm` and custom vectors follow CUSTOM convention semantics; parity depends on matching C behavior.
- docs/architecture/detector.md §5 (pix0) and docs/development/c_to_pytorch_config_map.md (detector pivot rules) inform the existing geometry configuration used in the trace harness.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md documents the F_latt sign mismatch we must localize.
How-To Map:
- Sanity-check selector: `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics`.
- Update `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py` to preserve simulator debug output (no reimplementation) and capture per-φ events; redirect stdout to `trace_py_scaling_per_phi.log`.
- Emit structured JSON alongside the log (`per_phi_py_20251119.json`) capturing φ_tic, φ_deg, k_frac, F_latt_b, F_latt for reuse by comparison tooling.
- Compare against the archived C trace: `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251119.json reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log > reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md`.
- After instrumentation, rerun `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q` and capture output for reports/2025-10-cli-flags/phase_l/per_phi/`.
[2025-10-07T09:36:03] tokens used: 52,653

[2025-10-07T09:36:08] thinking

**Verifying trace harness instrumentation**
[2025-10-07T09:36:08] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:09] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l' succeeded in 894ms:
hkl_parity
per_phi
scaling_audit
scaling_validation
structure_factor
[2025-10-07T09:36:09] tokens used: 54,184

[2025-10-07T09:36:11] thinking

**Checking per_phi directory**
[2025-10-07T09:36:11] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l/per_phi' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:12] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l/per_phi' succeeded in 879ms:
comparison_summary_20251119.md
per_phi_py_20251007.json
trace_py_per_phi_20251007.log
[2025-10-07T09:36:12] tokens used: 54,411

[2025-10-07T09:36:17] thinking

**Evaluating plan relevance and updates**
[2025-10-07T09:36:18] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "per-φ" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:19] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "per-φ" plans/active/cli-noise-pix0/plan.md' succeeded in 857ms:
28:- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
205:| K3e | Capture per-φ Miller index parity | [D] | ✅ 2025-10-06 Attempt #45 (ralph). Created `scripts/trace_per_phi.py`, generated PyTorch trace (`per_phi_pytorch_20251006-151228.json`), added TRACE_C_PHI to nanoBragg.c:3156-3160, ran C trace, compared via `scripts/compare_per_phi_traces.py`. **Finding:** Δk≈6.042 at φ=0° (C k_frac=−3.857, Py k_frac=−9.899), persists across all φ steps. **Root cause:** Not a φ-sampling issue—base lattice vectors or scattering geometry differ before φ rotation. |
208:Prereqs: K3e per-φ evidence archived; MOSFLM rescale guard (K3a) merged; pix0 SAMPLE pivot parity validated (H6g).
[2025-10-07T09:36:19] tokens used: 54,757

[2025-10-07T09:36:38] thinking

**Evaluating plan consistency and documentation**

I'm focusing on reviewing and reconciling contradictory statements in the fix_plan and related docs about per-φ instrumentation in the CLI-FLAGS Phase L3e. I'll gather relevant files to clarify current tasks and update documentation for alignment, choosing a Review or housekeeping action type with a Docs mode. Let’s explore the indicated reports and plans to prepare coherent, updated guidance.
[2025-10-07T09:36:40] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:41] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md' succeeded in 996ms:
# Per-φ Lattice Trace Comparison Summary

**Date**: 2025-10-07
**Engineer**: Ralph (Loop i=85)
**Task**: CLI-FLAGS-003 Phase L3e — Per-φ lattice traces to localize F_latt drift
**Plan Reference**: `plans/active/cli-noise-pix0/plan.md` Phase L3e

## Objective

Capture per-φ `TRACE_PY_PHI` lattice entries from the PyTorch simulator to enable comparison with C reference traces and isolate the F_latt sign mismatch blocking CLI parity.

## Instrumentation

### Simulator Changes

**File**: `src/nanobrag_torch/simulator.py` (lines 1424-1460)

Added per-φ tracing block that:
- Loops over all φ steps (10 steps for supervisor command)
- Computes Miller indices (h, k, l) for each φ orientation
[2025-10-07T09:36:41] tokens used: 56,331

[2025-10-07T09:36:47] thinking

**Analyzing instrumentation and fix_plan discrepancies**

I’m looking into the apparent mismatch between documented instrumentation status and the fix_plan’s note about missing per-φ data. The doc shows instrumentation was done by October 7, but newer instructions from November suggest re-instrumentation might be needed due to possible code changes. I want to verify if the latest trace files contain the expected `TRACE_PY_PHI` entries to clarify whether the fix_plan’s “missing” statement is outdated or accurate.
[2025-10-07T09:36:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && grep -n "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_validation/trace_py_scaling_20251117.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && grep -n "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_validation/trace_py_scaling_20251117.log' exited 2 in 845ms:
grep: reports/2025-10-cli-flags/phase_l/scaling_validation/trace_py_scaling_20251117.log: No such file or directory
[2025-10-07T09:36:50] tokens used: 58,331

[2025-10-07T09:36:52] thinking

**Checking alternative directory paths**
[2025-10-07T09:36:53] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l/scaling_audit' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:54] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-cli-flags/phase_l/scaling_audit' succeeded in 846ms:
L2b_blocker.md
c_trace_scaling.log
capture_live_trace.py
collect_cli_scaling_20251117.log
config_snapshot.json
config_snapshot_20251117.json
config_snapshot_final.json
harness_hkl_state.txt
harness_hkl_state_20251117.txt
harness_hkl_state_fixed.txt
harness_run.log
instrumentation_notes.md
notes.md
pytest_collect.log
pytest_collect_final.log
run_pytorch_trace.sh
scaling_audit_summary.md
scaling_comparison_initial.md
trace_harness.py
trace_py_baseline.log
[2025-10-07T09:36:54] tokens used: 59,226

[2025-10-07T09:36:56] thinking

**Checking new instrumentation log**
[2025-10-07T09:36:57] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 20 reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:36:58] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 20 reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log' succeeded in 830ms:
TRACE_PY: pix0_vector_meters -0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY: fdet_vec 0.999982 -0.005998 -0.000118
TRACE_PY: sdet_vec -0.005998 -0.99997 -0.004913
TRACE_PY: pixel_pos_meters -0.0383921316229301 0.09736829552025 -0.23079563549923
TRACE_PY: R_distance_meters 0.253418953727942
TRACE_PY: omega_pixel_sr 4.20404804717402e-07
TRACE_PY: close_distance_meters 0.231274663460392
TRACE_PY: obliquity_factor 0.912617860890851
TRACE_PY: diffracted_vec -0.151496685856205 0.38421867854754 -0.910727599905575
TRACE_PY: incident_vec 0.00051387949 0 -0.99999986
TRACE_PY: lambda_meters 9.768e-11
TRACE_PY: lambda_angstroms 0.9768
TRACE_PY: scattering_vec_A_inv -1556209718.94149 3933442655.0731 913925676.642357
TRACE_PY: rot_a_angstroms -14.3562690335399 -21.8717928453817 -5.58202083498661
TRACE_PY: rot_b_angstroms -11.4986968432508 0.717320030990266 -29.1132147806318
TRACE_PY: rot_c_angstroms 21.0699500320179 -24.3892962470766 -9.75265166505327
TRACE_PY: rot_a_star_A_inv -0.0290510954135954 -0.0293958845208845 0.0107498771498771
TRACE_PY: rot_b_star_A_inv -0.0031263923013923 0.0104376433251433 -0.0328566748566749
TRACE_PY: rot_c_star_A_inv 0.0259604422604423 -0.014333015970516 -0.0106066134316134
TRACE_PY: hkl_frac -6.87916296918603 -0.589139352775903 -13.7636357974944
[2025-10-07T09:36:58] tokens used: 59,717

[2025-10-07T09:37:00] thinking

**Checking for per-φ lines**
[2025-10-07T09:37:01] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:02] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log' exited 1 in 803ms:

[2025-10-07T09:37:02] tokens used: 60,509

[2025-10-07T09:37:05] thinking

**Checking for missing TRACE_PY_PHI logs**
[2025-10-07T09:37:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251117.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:07] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251117.log' exited 1 in 842ms:

[2025-10-07T09:37:07] tokens used: 60,856

[2025-10-07T09:37:11] thinking

**Checking instrumentation output conditions**
[2025-10-07T09:37:12] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1400,1480p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:13] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1400,1480p' src/nanobrag_torch/simulator.py" succeeded in 813ms:
                        capture_frac_val = 1.0
                    print(f"TRACE_PY: capture_fraction {capture_frac_val:.15g}")

                    # Calculate polarization for this pixel (actual value, not placeholder)
                    # This matches the polarization_factor calculation in the main physics
                    if polarization is not None and isinstance(polarization, torch.Tensor):
                        polar_val = polarization[target_slow, target_fast].item()
                    else:
                        # If polarization was not computed or nopolar is set, default to 1.0
                        polar_val = 1.0

                    print(f"TRACE_PY: polar {polar_val:.15g}")
                    print(f"TRACE_PY: omega_pixel {omega_pixel_val:.15g}")

                    # Calculate cos_2theta
                    # cos(2θ) = incident · diffracted
                    cos_2theta = torch.dot(incident_unit, diffracted_unit).item()
                    print(f"TRACE_PY: cos_2theta {cos_2theta:.15g}")

                    # Final intensity
[2025-10-07T09:37:13] tokens used: 61,139

[2025-10-07T09:37:20] thinking

**Analyzing variable dimensions and instrumentation issues**
[2025-10-07T09:37:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "def get_rotated_real_vectors" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:22] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "def get_rotated_real_vectors" -n src/nanobrag_torch' succeeded in 847ms:
src/nanobrag_torch/models/crystal.py:897:    def get_rotated_real_vectors(self, config: "CrystalConfig") -> Tuple[
[2025-10-07T09:37:22] tokens used: 62,828
[2025-10-07T09:37:25] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '897,1005p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:26] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '897,1005p' src/nanobrag_torch/models/crystal.py" succeeded in 815ms:
    def get_rotated_real_vectors(self, config: "CrystalConfig") -> Tuple[
        Tuple[torch.Tensor, torch.Tensor, torch.Tensor],
        Tuple[torch.Tensor, torch.Tensor, torch.Tensor],
    ]:
        """
        Get real-space and reciprocal-space lattice vectors after applying all rotations.

        This method applies rotations in the correct physical sequence:
        1. Static missetting rotation (already applied to reciprocal vectors in compute_cell_tensors)
        2. Dynamic spindle (phi) rotation
        3. Mosaic domain rotations

        The method now returns both real-space and reciprocal-space vectors to support
        the correct physics implementation where Miller indices are calculated using
        reciprocal-space vectors.

        C-Code Implementation Reference (from nanoBragg.c):

        ---
        FUTURE WORK: Initial Orientation (`-misset`), applied once (lines 1521-1527):
[2025-10-07T09:37:26] tokens used: 63,819

[2025-10-07T09:37:28] thinking

**Checking return shapes**
[2025-10-07T09:37:28] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1005,1170p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:29] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1005,1170p' src/nanobrag_torch/models/crystal.py" succeeded in 793ms:
            config.spindle_axis, device=self.device, dtype=self.dtype
        )

        # Apply spindle rotation to both real and reciprocal vectors
        # Shape: (N_phi, 3)
        a_phi = rotate_axis(self.a.unsqueeze(0), spindle_axis.unsqueeze(0), phi_rad)
        b_phi = rotate_axis(self.b.unsqueeze(0), spindle_axis.unsqueeze(0), phi_rad)
        c_phi = rotate_axis(self.c.unsqueeze(0), spindle_axis.unsqueeze(0), phi_rad)

        a_star_phi = rotate_axis(
            self.a_star.unsqueeze(0), spindle_axis.unsqueeze(0), phi_rad
        )
        b_star_phi = rotate_axis(
            self.b_star.unsqueeze(0), spindle_axis.unsqueeze(0), phi_rad
        )
        c_star_phi = rotate_axis(
            self.c_star.unsqueeze(0), spindle_axis.unsqueeze(0), phi_rad
        )

        # Generate mosaic rotation matrices
[2025-10-07T09:37:29] tokens used: 65,264

[2025-10-07T09:37:32] thinking

**Tracing tensor origin in Simulator**
[2025-10-07T09:37:33] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "rot_a =" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:34] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "rot_a =" src/nanobrag_torch/simulator.py' succeeded in 913ms:
800:            rot_a = rot_a.to(device=self.device, dtype=self.dtype)
812:            rot_a = override_a_star.view(1, 1, 3)
[2025-10-07T09:37:34] tokens used: 67,428

[2025-10-07T09:37:36] thinking

**Scrolling through lines 760-820**
[2025-10-07T09:37:37] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '720,840p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:37:38] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '720,840p' src/nanobrag_torch/simulator.py" succeeded in 868ms:
                                /* enumerate mosaic domains */
                                for(mos_tic=0;mos_tic<mosaic_domains;++mos_tic)
                                {
                                    /* ... mosaic rotation ... */
                                    /* ... h,k,l calculation ... */
                                    /* ... F_cell and F_latt calculation ... */

                                    /* convert amplitudes into intensity (photons per steradian) */
                                    I += F_cell*F_cell*F_latt*F_latt;
                                }
                            }
                        }
        ```

        Args:
            pixel_batch_size: Optional batching for memory management.
            override_a_star: Optional override for the a_star vector for testing.
            oversample: Number of subpixel samples per axis. Defaults to detector config.
            oversample_omega: Apply solid angle per subpixel. Defaults to detector config.
            oversample_polar: Apply polarization per subpixel. Defaults to detector config.
[2025-10-07T09:37:38] tokens used: 67,722

[2025-10-07T09:37:57] thinking

**Analyzing instrumentation and planning updates**

I'm examining why expected per-φ trace logs aren't appearing despite the command specifying 10 phi steps, considering possible issues with data shapes and loop behavior. While the instrumentation code exists, the missing output likely results from data or execution conditions, so the priority is updating the fix_plan and related docs to reflect this gap and to plan fresh data capture steps. I'll gather info on relevant docs and analyses to align instructions, ensuring plans, fix_plan, and input instructions all properly reference the need to rerun instrumentation and capture new data. Next, I'll review the key analysis file to support these updates.
[2025-10-07T09:37:59] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:38:00] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md' succeeded in 959ms:
# Phase L3e Scaling Validation Snapshot — 2025-11-19

**Focus:** CLI-FLAGS-003 (`-nonoise`/`-pix0_vector_mm`) — investigate why the supervisor command still shows a 24% scale drift after HKL wiring fixes.

## Inputs
- `TRACE_C`: `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`
- `TRACE_PY`: `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251117.log`
- Comparison tool: `scripts/validation/compare_scaling_traces.py`
- Output summary: `scaling_validation_summary_20251119.md`
- Metrics JSON: `metrics.json`
- Run metadata: `run_metadata.json`

## Key Findings

1. **First divergence remains `I_before_scaling`.**
   - C: `943654.80923755` (`c_trace_scaling.log:288`)
   - PyTorch: `713431` (`trace_py_scaling_20251117.log:27`)
   - Relative delta: `-0.243970366` (−24.4%), status **CRITICAL** (`metrics.json`)

2. **Structure factor ingestion now matches C.**
[2025-10-07T09:38:00] tokens used: 70,219

[2025-10-07T09:38:30] thinking

**Aligning instrumentation docs and plans**

I'm working through the conflicting state of per-φ instrumentation—code exists but recent logs lack expected output, likely due to gating or not running the harness. I’m planning to update the fix_plan and active plan files to reflect the need for a fresh instrumentation run, clarify observations, and instruct the re-capture of per-φ logs with guidance on verifying the instrumentation path. This involves carefully appending notes and next actions without rewriting history and preparing documentation to align with the most current analysis.
[2025-10-07T09:38:37] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -459,5 +459,5 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
@@ -613,3 +613,3 @@
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
[2025-10-07T09:38:37] apply_patch(auto_approved=true) exited 0 in 22ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T09:38:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**

[2025-10-07T09:38:37] tokens used: 74,347
[2025-10-07T09:38:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**


[2025-10-07T09:38:43] thinking

**Updating plan with new gap snapshot and table changes**
[2025-10-07T09:38:48] tokens used: 75,993
[2025-10-07T09:38:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**


[2025-10-07T09:38:50] thinking

**Verifying exact text snippet**
[2025-10-07T09:38:52] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '20,80p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:38:53] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '20,80p' plans/active/cli-noise-pix0/plan.md" succeeded in 915ms:
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
- Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
- Gap snapshot update (2025-11-18 late): Attempt #81 implemented `.to(device=device, dtype=dtype)` and added the `TestHKLDevice::test_hkl_tensor_respects_device` regression (CPU/CUDA × float32/float64). Next blocker: Phase L3e scaling validation to prove all factors match C (≤1e-6) before rerunning nb-compare in Phase L4.
- Gap snapshot addendum (2025-10-06T17:59 replayed 2025-11-09): Re-running Phase L1 with `Fdump_scaled_20251006175946.bin` shows the cache stores 182,700 doubles (≈9,534 more than the 173,166 expected from header ranges) and that reflections shift by Δk≈+10–12 / Δl≈−2…−8 relative to HKL indices. Use this dataset to reverse-engineer the C layout before touching PyTorch HKL IO.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
- Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.

### Phase A — Requirements & Trace Alignment
[2025-10-07T09:38:53] tokens used: 76,865
[2025-10-07T09:38:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**


[2025-10-07T09:38:59] thinking

**Inserting new bullet and modifying row**
[2025-10-07T09:39:02] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -28,2 +28,3 @@
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
[2025-10-07T09:39:02] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T09:39:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..99628e6f2732140c06e34ef0f0055115a0be7f30
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.

[2025-10-07T09:39:02] tokens used: 78,894
[2025-10-07T09:39:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..99628e6f2732140c06e34ef0f0055115a0be7f30
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.


[2025-10-07T09:39:05] thinking

**Locating specific table row**
[2025-10-07T09:39:07] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '220,260p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:08] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '220,260p' plans/active/cli-noise-pix0/plan.md" succeeded in 964ms:
Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
| K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |

### Phase L — Supervisor Command Normalization
Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L1a | Run HKL ↔ Fdump parity script and capture metrics | [D] | Attempt #50 (2025-10-06) produced `summary_20251006175032.md` / `metrics_20251006175032.json`; this loop repeated the run with `Fdump_scaled_20251006175946.bin`, confirming max |ΔF|=5.22e2, 99,209 mismatched voxels, and storing `c_fdump_20251006175946.log`. Artefacts live under `reports/2025-10-cli-flags/phase_l/hkl_parity/`. |
| L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
| L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
[2025-10-07T09:39:08] tokens used: 79,834
[2025-10-07T09:39:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..99628e6f2732140c06e34ef0f0055115a0be7f30
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.


[2025-10-07T09:39:10] thinking

**Locating specific table row**
[2025-10-07T09:39:11] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '260,330p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:12] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '260,330p' plans/active/cli-noise-pix0/plan.md" succeeded in 799ms:
| L3a | Verify structure-factor coverage for supervisor pixel | [D] | ✅ 2025-11-17 Attempt #77: `reports/2025-10-cli-flags/phase_l/structure_factor/probe.py` recorded `probe_20251117.log` showing scaled.hkl returns `F_cell=190.270004` for hkl=(-7,-1,-14). Keep the log + timestamped copies alongside a brief summary in `analysis.md`, then proceed to L3c to thread the same attachment pattern through the harness/CLI path. |
| L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
| L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
| L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
| L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |

### Phase L4 — Supervisor Command Parity Rerun
Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |
[2025-10-07T09:39:12] tokens used: 82,083
[2025-10-07T09:39:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..99628e6f2732140c06e34ef0f0055115a0be7f30
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.


[2025-10-07T09:39:14] thinking

**Updating task description field**
[2025-10-07T09:39:16] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -263,3 +263,3 @@
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
[2025-10-07T09:39:16] apply_patch(auto_approved=true) exited 0 in 34ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T09:39:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T09:39:16] tokens used: 84,351
[2025-10-07T09:39:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:39:32] thinking

**Preparing detailed input.md with Mode Parity**

I’m organizing the new input.md according to the instructions, focusing on Mode `Parity` since this aligns with running per-φ parity tests and analysis. I’ll carefully include all required sections—summary, mode, mapped tests with exact selectors, artifacts with log paths, Do Now commands referencing the correct harness script, and detailed priorities with file paths and line numbers. This way, the document will clearly guide the next steps while following the exact formatting and referencing rules.
[2025-10-07T09:39:34] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/scaling_audit/run_pytorch_trace.sh' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:35] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/scaling_audit/run_pytorch_trace.sh' succeeded in 922ms:
#!/bin/bash
# Phase L2b PyTorch Trace Execution Script
#
# Runs the PyTorch CLI with the supervisor command parameters and extracts scaling output.
# This is simpler than building a custom harness since we only need to capture the scaling values.

set -e

# Required environment
export KMP_DUPLICATE_LIB_OK=TRUE

# Output file for trace
TRACE_OUT="reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log"

# Run PyTorch simulation with supervisor command (no noise, float output to temp file)
# Match the supervisor command from phase_i/supervisor_command/README.md
env PYTHONPATH=src python -m nanobrag_torch \
  -mat A.mat \
  -floatfile /tmp/pytorch_trace_img.bin \
  -hkl scaled.hkl \
[2025-10-07T09:39:35] tokens used: 86,526
[2025-10-07T09:39:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:39:37] thinking

**Checking for existing log capture script**
[2025-10-07T09:39:38] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 reports/2025-10-cli-flags/phase_l/scaling_audit/capture_live_trace.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:39] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 reports/2025-10-cli-flags/phase_l/scaling_audit/capture_live_trace.py' succeeded in 701ms:
#!/usr/bin/env python
"""
Quick script to capture live TRACE_PY output from simulator.
Run with PYTHONPATH=src to use editable install.
"""
import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

import sys
import subprocess

# Run the test with pytest but capture the stderr where TRACE_PY goes
cmd = [
    sys.executable, '-m', 'pytest',
    '-s',  # Don't capture output
    'tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics[dtype0-cpu]',
    '--tb=no'  # No traceback on success
]

# Run and capture
[2025-10-07T09:39:39] tokens used: 87,436
[2025-10-07T09:39:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:39:43] thinking

**Inspecting trace harness scripts**
[2025-10-07T09:39:44] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 60 reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:45] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 60 reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py' succeeded in 701ms:
#!/usr/bin/env python
"""
Phase L2b PyTorch Scaling Trace Harness

Captures the PyTorch side of the scaling chain comparison for supervisor command.
Mirrors the C trace fields from reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log.

Date: 2025-10-17
Engineer: Ralph (loop i=62, evidence-only mode)
Plan Reference: plans/active/cli-noise-pix0/plan.md Phase L2b
"""

import argparse
import json
import sys
import platform
import os
import torch
from pathlib import Path
from datetime import datetime
[2025-10-07T09:39:45] tokens used: 88,137
[2025-10-07T09:39:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:39:48] thinking

**Verifying log generation in harness script**
[2025-10-07T09:39:50] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py' succeeded in 746ms:
264:        if line.startswith('TRACE_PY_PHI'):
291:            # Parse: TRACE_PY_PHI phi_tic=0 phi_deg=0 k_frac=-3.857... F_latt_b=1.779... F_latt=-0.0625...
295:                for part in parts[1:]:  # Skip "TRACE_PY_PHI" prefix
324:        print(f"Captured {len(trace_py_phi_lines)} TRACE_PY_PHI lines")
[2025-10-07T09:39:50] tokens used: 89,351
[2025-10-07T09:39:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:39:53] thinking

**Investigating harness output behavior**
[2025-10-07T09:39:54] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '240,360p' reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:39:55] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '240,360p' reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py" succeeded in 781ms:
    # automatically emits TRACE_PY lines to stdout containing real computed values
    slow, fast = args.pixel
    debug_config = {'trace_pixel': [slow, fast]}

    simulator = Simulator(
        crystal, detector,
        beam_config=beam_config,
        dtype=dtype, device=device,
        debug_config=debug_config
    )

    # Capture stdout during simulation run (Step 6 per input.md)
    # Use contextlib.redirect_stdout to capture TRACE_PY output
    import io
    from contextlib import redirect_stdout

    stdout_capture = io.StringIO()
    with redirect_stdout(stdout_capture):
        intensities = simulator.run()

[2025-10-07T09:39:55] tokens used: 89,701
[2025-10-07T09:39:55] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:01] thinking

**Preparing logging and test commands**
[2025-10-07T09:40:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 scripts/validation/compare_scaling_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 scripts/validation/compare_scaling_traces.py' succeeded in 764ms:
#!/usr/bin/env python
"""
Phase L3e: Compare C and PyTorch scaling traces with sub-micro tolerance enforcement.

This script aligns TRACE_C and TRACE_PY outputs from the scaling audit and
reports percentage deltas for each scaling factor to identify the first divergence.

Outputs:
    - Markdown summary (--out argument)
    - metrics.json (structured per-factor deltas)
    - run_metadata.json (environment snapshot + command parameters)

Usage:
    python scripts/validation/compare_scaling_traces.py \\
        --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log \\
        --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log \\
        --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary.md

Plan Reference: plans/active/cli-noise-pix0/plan.md Phase L3e
"""
[2025-10-07T09:40:03] tokens used: 91,543
[2025-10-07T09:40:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:05] thinking

**Checking default output names**
[2025-10-07T09:40:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "metrics.json" scripts/validation/compare_scaling_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:07] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "metrics.json" scripts/validation/compare_scaling_traces.py' succeeded in 747ms:
10:    - metrics.json (structured per-factor deltas)
299:    # Write metrics.json
300:    metrics_path = output_path.parent / "metrics.json"
[2025-10-07T09:40:07] tokens used: 92,147
[2025-10-07T09:40:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:14] thinking

**Configuring output paths for reports**
[2025-10-07T09:40:15] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 scripts/compare_per_phi_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:16] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 scripts/compare_per_phi_traces.py' succeeded in 736ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Compare C vs PyTorch per-φ traces

Identifies the first φ where Δk exceeds tolerance (5e-4) to isolate the φ-grid mismatch.
"""

import json
import sys
from pathlib import Path

def parse_c_trace(log_file):
    """Parse C trace log file."""
    traces = []
    with open(log_file) as f:
        for line in f:
            if line.startswith('TRACE_C_PHI'):
                parts = line.split()
                traces.append({
                    'phi_tic': int(parts[1].split('=')[1]),
[2025-10-07T09:40:16] tokens used: 92,531
[2025-10-07T09:40:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:18] thinking

**Verifying data key consistency**
[2025-10-07T09:40:18] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '40,120p' scripts/compare_per_phi_traces.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:19] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '40,120p' scripts/compare_per_phi_traces.py" succeeded in 769ms:
    py_traces = py_data['traces']

    c_traces = parse_c_trace(c_file)

    # Compare
    print("="*80)
    print("CLI-FLAGS-003 Phase K3e: Per-φ Parity Comparison")
    print("="*80)
    print()
    print(f"PyTorch: {pytorch_file}")
    print(f"C:       {c_file}")
    print()

    print("-"*80)
    print(f"{'φ_tic':<7} {'φ (deg)':<10} {'Δk':<15} {'ΔF_latt_b':<15} {'Status':<10}")
    print("-"*80)

    first_divergence = None
    max_delta_k = 0.0

[2025-10-07T09:40:19] tokens used: 93,167
[2025-10-07T09:40:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:23] thinking

**Checking JSON key usage**
[2025-10-07T09:40:23] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251007.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:24] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251007.json' succeeded in 714ms:
{
  "timestamp": "2025-10-07T09:25:35.837857Z",
  "pixel": {
    "slow": 685,
    "fast": 1039
  },
  "config": "supervisor",
  "device": "cpu",
  "dtype": "float64",
  "per_phi_entries": [
    {
      "phi_tic": 0,
      "phi_deg": 0.0,
      "k_frac": -0.589139352775903,
      "F_latt_b": -0.861431104849688,
      "F_latt": 1.3517866940893
    },
    {
      "phi_tic": 1,
      "phi_deg": 0.0111111111111111,
[2025-10-07T09:40:24] tokens used: 94,514
[2025-10-07T09:40:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:36] thinking

**Preparing detailed instructions for script update**

I'm piecing together instructions for Ralph to re-run the trace harness and targeted tests with necessary environment variables, highlighting the need to adapt or confirm the script handles the new `'per_phi_entries'` JSON key instead of the old `'traces'`. Since I can't change code myself, I’m focusing on clear Do Now steps and references to help them adjust the tooling and generate accurate logs, while planning to write a thorough `input.md` document covering these points.
[2025-10-07T09:40:38] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '20,50p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:39] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '20,50p'" succeeded in 910ms:
    20	- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
    21	- Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
    22	- Gap snapshot update (2025-11-18 late): Attempt #81 implemented `.to(device=device, dtype=dtype)` and added the `TestHKLDevice::test_hkl_tensor_respects_device` regression (CPU/CUDA × float32/float64). Next blocker: Phase L3e scaling validation to prove all factors match C (≤1e-6) before rerunning nb-compare in Phase L4.
    23	- Gap snapshot addendum (2025-10-06T17:59 replayed 2025-11-09): Re-running Phase L1 with `Fdump_scaled_20251006175946.bin` shows the cache stores 182,700 doubles (≈9,534 more than the 173,166 expected from header ranges) and that reflections shift by Δk≈+10–12 / Δl≈−2…−8 relative to HKL indices. Use this dataset to reverse-engineer the C layout before touching PyTorch HKL IO.
    24	- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
    25	- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
    26	- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
    27	- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
    28	- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
    29	- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
    30	- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
    31	- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
    32	- Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
    33	- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
    34	- Documentation anchors for this focus:
    35	  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
    36	  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
    37	  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
    38	  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
    39	
[2025-10-07T09:40:39] tokens used: 96,450
[2025-10-07T09:40:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:41] thinking

**Adding line numbers for fix_plan**
[2025-10-07T09:40:42] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '450,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:42] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '450,520p'" succeeded in 732ms:
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
   460	- Next Actions (2025-11-19 evidence refresh):
   461	  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
   462	  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   463	  3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
   464	- Attempts History:
   465	  * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
   466	    Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
   467	    Artifacts:
   468	      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-41` - Refreshed trace with live values (polar=0.91464138, omega_pixel=4.20404859e-07 sr, F_cell=0, I_before_scaling=0)
   469	      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md:1-54` - Phase L2c comparison report showing first divergence and all divergent factors
[2025-10-07T09:40:42] tokens used: 98,626
[2025-10-07T09:40:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:45] thinking

**Verifying Observations update**
[2025-10-07T09:40:46] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '590,650p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:40:46] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '590,650p'" succeeded in 701ms:
   590	  * [2025-10-07] Attempt #82 (ralph loop) — Result: **SUCCESS** (Phase L3e scaling validation script extension COMPLETE). **Extended compare_scaling_traces.py to emit structured JSON metrics + run metadata with ≤1e-6 tolerance enforcement per Phase L3e guidance.**
   591	    Metrics: Script successfully generates 3 artifacts (markdown, metrics.json, run_metadata.json); reports 5 divergent factors (I_before_scaling CRITICAL, polar/omega_pixel/cos_2theta MINOR, I_pixel_final CRITICAL) with I_before_scaling as first divergence. Pytest collection stable (50+ tests collected).
   592	    Artifacts:
   593	      - `scripts/validation/compare_scaling_traces.py:1-322` - Extended script with JSON output, sub-micro tolerance enforcement, git SHA + torch version capture
   594	      - `reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary.md` - Phase L3e markdown summary with tolerance header (≤1.00e-06 relative), fractional deltas (scientific notation), and updated phase label
   595	      - `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json` - Structured per-factor metrics (c_value, py_value, abs_delta, rel_delta, status) plus tolerance_rel, first_divergence, num_divergent
   596	      - `reports/2025-10-cli-flags/phase_l/scaling_validation/run_metadata.json` - Run metadata (timestamp ISO 8601, git_sha 22233b8, torch 2.8.0+cu128, command, c_trace/py_trace absolute paths, tolerance_rel)
   597	    Observations/Hypotheses:
   598	      - **JSON artifacts satisfy input.md requirements:** metrics.json contains per-factor deltas with ≤1e-6 relative threshold enforcement; run_metadata.json captures env snapshot and command invocation for reproducibility
   599	      - **Tolerance enforcement updated:** Changed assessment from percentage-based (0.001%/1%/10%) to fractional (1e-6 PASS/1e-4 MINOR/1e-2 DIVERGENT) per Phase L3e spec
   600	      - **Relative deltas now fractional:** Output format changed from percentage (`+0.003%`) to scientific notation (`+3.094e-08`) for consistency with threshold
   601	      - **Deprecation warning fixed:** Replaced datetime.utcnow() with datetime.now().astimezone() to avoid Python 3.13+ deprecation warning
   602	      - **No production code changes:** Evidence-only loop per input.md Parity mode; script updates are tooling-layer only
   603	    Next Actions: Phase L3f documentation sync — Update analysis.md + architectural docs with finalized ingestion/normalization flow once scaling validation passes (per input.md lines 462-463).
   604	  * [2025-11-19] Attempt #83 (galph loop) — Result: **EVIDENCE UPDATE** (Phase L3e parity snapshot). **Reran scaling comparison with latest PyTorch trace (`trace_py_scaling_20251117.log`) and documented the surviving lattice-factor gap.**
   605	    Metrics: Comparison reports 5 divergent factors with `I_before_scaling` still CRITICAL (−0.24397 relative). `r_e^2`, `fluence`, `steps`, `capture_fraction` remain PASS; `polar`, `omega_pixel`, `cos_2theta` MINOR. `I_pixel_final` mirrors the raw accumulation delta (−0.17343 relative).
   606	    Artifacts:
   607	      - `reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md` — Updated markdown table using the new TRACE_PY capture
   608	      - `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json` — Refreshed structured metrics (overwrites prior Phase L2c output with latest deltas)
   609	      - `reports/2025-10-cli-flags/phase_l/scaling_validation/run_metadata.json` — Updated run metadata (git SHA 1de11df, torch 2.7.1, command/path snapshot)
[2025-10-07T09:40:46] tokens used: 100,356
[2025-10-07T09:40:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:40:59] thinking

**Preparing input.md rewrite**
[2025-10-07T09:40:59] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:41:00] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md | head' succeeded in 986ms:
     1	# Phase L3e Scaling Validation Snapshot — 2025-11-19
     2	
     3	**Focus:** CLI-FLAGS-003 (`-nonoise`/`-pix0_vector_mm`) — investigate why the supervisor command still shows a 24% scale drift after HKL wiring fixes.
     4	
     5	## Inputs
     6	- `TRACE_C`: `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`
     7	- `TRACE_PY`: `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251117.log`
     8	- Comparison tool: `scripts/validation/compare_scaling_traces.py`
     9	- Output summary: `scaling_validation_summary_20251119.md`
    10	- Metrics JSON: `metrics.json`
[2025-10-07T09:41:00] tokens used: 104,263
[2025-10-07T09:41:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:41:02] thinking

**Checking line numbers in comparison_summary file**
[2025-10-07T09:41:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:41:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md | head' succeeded in 733ms:
     1	# Per-φ Lattice Trace Comparison Summary
     2	
     3	**Date**: 2025-10-07
     4	**Engineer**: Ralph (Loop i=85)
     5	**Task**: CLI-FLAGS-003 Phase L3e — Per-φ lattice traces to localize F_latt drift
     6	**Plan Reference**: `plans/active/cli-noise-pix0/plan.md` Phase L3e
     7	
     8	## Objective
     9	
    10	Capture per-φ `TRACE_PY_PHI` lattice entries from the PyTorch simulator to enable comparison with C reference traces and isolate the F_latt sign mismatch blocking CLI parity.
[2025-10-07T09:41:03] tokens used: 104,634
[2025-10-07T09:41:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:41:11] thinking

**Outlining input.md structure and contents**

I'm organizing the new input.md to include clear sections like Priorities & Rationale, How-To Map with detailed commands, Pitfalls To Avoid listing key cautions, Pointers with file references, and Next Up steps to prep normalization patches. I'll make sure the Do Now line has exact commands to run the harness and tests, and consider where to place the compare_per_phi_traces.py script info for clarity.
[2025-10-07T09:41:24] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Regenerate per-φ scaling evidence so we can isolate the F_latt sign flip blocking the supervisor command parity.
Mode: Parity
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: [tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics]
Artifacts: reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log; reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json; reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md
Do Now: CLI-FLAGS-003 — run "'`PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`, then `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`, and finally `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`.
If Blocked: Capture the raw harness stdout to `reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_raw.txt`, note whether any `TRACE_PY_PHI` lines appear, and log the finding plus command output under Attempt history.
Priorities & Rationale:
- docs/fix_plan.md:460 calls for refreshed per-φ scaling validation artifacts before moving to documentation or parity reruns.
- plans/active/cli-noise-pix0/plan.md:29 records that the current per-φ log lacks `TRACE_PY_PHI`, so regenerating evidence is prerequisite for Phase L3e.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1 pins the residual 24% gap on missing lattice-factor parity.
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1 documents the earlier instrumentation and provides the schema/expectations for new traces.
How-To Map:
- Ensure `PYTHONPATH=src` and `KMP_DUPLICATE_LIB_OK=TRUE` are set before running harnesses or pytest.
- Harness command (produces trace + per-φ JSON/log):
  `PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`
- After the harness completes, run the scaling diff:
  `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`
- Generate the per-φ comparison markdown:
  `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log > reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md`
- Validate collection + instrumentation:
  `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics`
  `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
- Update Attempt history in docs/fix_plan.md immediately with command logs, delta summary, and artifact paths.
Pitfalls To Avoid:
- Do not modify simulator physics while gathering evidence; use harness scripts only.
- Keep tensors on the selected device/dtype (no `.cpu()` conversions inside harness edits).
- Ensure the harness stdout actually contains `TRACE_PY_PHI` lines; if missing, debug the capture rather than editing production code.
- Avoid rerunning the full pytest suite; stick to the targeted selector after collection check.
- Preserve existing artifacts by writing new files with the 20251119 suffixes; do not overwrite historical logs without note.
- Respect Protected Assets noted in docs/index.md (do not touch `loop.sh`, `supervisor.sh`, `input.md`).
- Capture environment metadata (git SHA, torch version) via the harness env snapshot; keep JSON in sync with metrics.
- When comparing per-φ traces, confirm schema alignment (`per_phi_entries`) before adjusting tooling.
- No new Python loops or detached tensors when instrumenting; reuse existing Simulator debug hooks.
- Remember to export `NB_C_BIN` if you rerun C traces for cross-checking.
Pointers:
- docs/fix_plan.md:460-616
- plans/active/cli-noise-pix0/plan.md:20-33,260-266
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1-41
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1-40
- scripts/validation/compare_scaling_traces.py:1-40
- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333
Next Up: Once per-φ parity is confirmed, investigate `_compute_structure_factor_components` to align F_latt accumulation and prep the Phase L3f documentation update.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:41:25] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Regenerate per-φ scaling evidence so we can isolate the F_latt sign flip blocking the supervisor command parity.
Mode: Parity
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: [tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics]
Artifacts: reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log; reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json; reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md
Do Now: CLI-FLAGS-003 — run "'`PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`, then `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`, and finally `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`.
If Blocked: Capture the raw harness stdout to `reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_raw.txt`, note whether any `TRACE_PY_PHI` lines appear, and log the finding plus command output under Attempt history.
Priorities & Rationale:
- docs/fix_plan.md:460 calls for refreshed per-φ scaling validation artifacts before moving to documentation or parity reruns.
- plans/active/cli-noise-pix0/plan.md:29 records that the current per-φ log lacks `TRACE_PY_PHI`, so regenerating evidence is prerequisite for Phase L3e.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1 pins the residual 24% gap on missing lattice-factor parity.
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1 documents the earlier instrumentation and provides the schema/expectations for new traces.
How-To Map:
- Ensure `PYTHONPATH=src` and `KMP_DUPLICATE_LIB_OK=TRUE` are set before running harnesses or pytest.
- Harness command (produces trace + per-φ JSON/log):
  `PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`
- After the harness completes, run the scaling diff:
  `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`
- Generate the per-φ comparison markdown:
  `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log > reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md`
- Validate collection + instrumentation:
  `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics`
  `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
- Update Attempt history in docs/fix_plan.md immediately with command logs, delta summary, and artifact paths.
Pitfalls To Avoid:
- Do not modify simulator physics while gathering evidence; use harness scripts only.
- Keep tensors on the selected device/dtype (no `.cpu()` conversions inside harness edits).
- Ensure the harness stdout actually contains `TRACE_PY_PHI` lines; if missing, debug the capture rather than editing production code.
- Avoid rerunning the full pytest suite; stick to the targeted selector after collection check.
- Preserve existing artifacts by writing new files with the 20251119 suffixes; do not overwrite historical logs without note.
- Respect Protected Assets noted in docs/index.md (do not touch `loop.sh`, `supervisor.sh`, `input.md`).
- Capture environment metadata (git SHA, torch version) via the harness env snapshot; keep JSON in sync with metrics.
- When comparing per-φ traces, confirm schema alignment (`per_phi_entries`) before adjusting tooling.
- No new Python loops or detached tensors when instrumenting; reuse existing Simulator debug hooks.
- Remember to export `NB_C_BIN` if you rerun C traces for cross-checking.
Pointers:
- docs/fix_plan.md:460-616
- plans/active/cli-noise-pix0/plan.md:20-33,260-266
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1-41
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1-40
- scripts/validation/compare_scaling_traces.py:1-40
- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333
Next Up: Once per-φ parity is confirmed, investigate `_compute_structure_factor_components` to align F_latt accumulation and prep the Phase L3f documentation update.
EOF
' succeeded in 936ms:

[2025-10-07T09:41:25] tokens used: 107,401
[2025-10-07T09:41:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:41:28] thinking

**Checking input length**
[2025-10-07T09:41:29] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:41:29] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 723ms:
      44 input.md
[2025-10-07T09:41:29] tokens used: 109,282
[2025-10-07T09:41:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:41:39] thinking

**Planning to expand content length**
[2025-10-07T09:42:06] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Regenerate and analyse the per-φ scaling traces so we can pinpoint the lattice-factor sign flip that blocks the supervisor command parity run.
Mode: Parity
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: [tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics]
Artifacts:
- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log
- reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.{log,json}
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md
- reports/2025-10-cli-flags/phase_l/scaling_validation/{scaling_validation_summary_20251119.md,metrics.json,run_metadata.json}
Do Now: CLI-FLAGS-003 — run "'`PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`, then `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`, finally `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q` to confirm instrumentation stability.
If Blocked: Capture the full harness stdout to `reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_raw.txt`, note whether any `TRACE_PY_PHI` lines appear, and log the failure mode plus commands under docs/fix_plan.md Attempt history before requesting supervisor guidance.
Priorities & Rationale:
- docs/fix_plan.md:460-463 promotes refreshed per-φ scaling validation as the top blocker before documentation or parity reruns.
- plans/active/cli-noise-pix0/plan.md:20-33,260-266 records that the existing per-φ artifact lacks `TRACE_PY_PHI`, and that Phase L3e remains open until new evidence is captured.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1-41 links the residual 24% intensity gap directly to missing lattice-factor parity, prioritising renewed trace capture.
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1-96 documents the previous instrumentation contract and expected schema, which the new run must reproduce.
- scripts/validation/compare_scaling_traces.py:1-320 formalises the tolerance envelope (≤1e-6) that L3e must satisfy before the plan can progress.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log anchors the C reference that every refreshed per-φ trace must match within Δk < 5e-4.
How-To Map:
- Environment prep:
  1. `export PYTHONPATH=src`
  2. `export KMP_DUPLICATE_LIB_OK=TRUE`
  3. Confirm `which python` matches the virtualenv used for previous CLI loops.
- Harness execution (creates the new trace + per-φ files):
  `PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`
  * Expected stdout banners: “Main trace written to …/trace_py_scaling_20251119.log” and “Captured 10 TRACE_PY_PHI lines”.
  * Harness automatically writes environment and config snapshots alongside the trace; retain them.
- Verify harness output immediately:
  * `rg "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.log`
  * `head -n 20 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json`
- Per-φ comparison against C:
  `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log > reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md`
  * Validate the summary contains a table with φ_tic entries and Δk columns.
  * If the script complains about a missing `traces` key, adapt the JSON (rename `per_phi_entries` → `traces`) in a copy before rerunning; document any such adjustments in Attempt notes.
- Scaling-factor diff rerun:
  `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`
  * Confirm metrics.json reports ≤1e-6 deltas for r_e²/fluence/steps/capture_fraction, and highlight the first divergent factor.
  * Inspect run_metadata.json to ensure git SHA, torch version, and command strings match today’s environment.
- pytest collection check before running the targeted test:
  `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics`
- Targeted pytest execution (should pass on first run):
  `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
  * Archive the stdout under `reports/2025-10-cli-flags/phase_l/per_phi/pytest_trace_pixel_20251119.log`.
- Documentation + attempt logging:
  * Append an Attempt entry to docs/fix_plan.md with command log snippets, artifact paths, delta metrics, and any schema adjustments.
  * Update `reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md` with a short “2025-11-19 refresh” paragraph summarising new findings.
Pitfalls To Avoid:
- Do not modify simulator physics or tracing logic; all work must occur via harness scripts.
- Keep tensors/device aligned—avoid accidental `.cpu()` conversions or dtype casts while handling traces.
- Ensure the harness prints “Captured 10 TRACE_PY_PHI lines”; if it prints zero, treat that as failure and debug capture rather than forcing success.
- Preserve historical artifacts by writing new files with the `20251119` suffix; do not overwrite `trace_py_scaling_20251117.log` or older JSONs.
- Maintain Protected Assets from docs/index.md (especially `loop.sh`, `supervisor.sh`, `input.md`).
- Re-run `compare_scaling_traces.py` only after confirming the new trace file exists; stale paths silently reuse older metrics.
- Include environment metadata (git SHA, torch version) in Attempt notes; missing metadata blocks plan closure.
- If you edit `compare_per_phi_traces.py` for schema compatibility, isolate the change to tooling (no production modules) and mention the diff explicitly.
- Watch for accidental removal of `TRACE_PY` lines when filtering stdout—per-φ extraction must be additive.
- Do not escalate to production code changes until per-φ parity evidence proves where the sign flip occurs.
- Respect vectorization constraints: no Python loops added inside simulator or harness code paths that would regress batching.
- Remember to keep randomness deterministic (no new RNG seeds) so traces stay comparable run-to-run.
Pointers:
- docs/fix_plan.md:460-616 — active status, attempts, and refreshed next actions.
- plans/active/cli-noise-pix0/plan.md:20-33,260-266 — Phase L3 context and updated L3e task guidance.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1-41 — root-cause narrative for current mismatch.
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1-120 — documentation of prior per-φ instrumentation.
- scripts/validation/compare_scaling_traces.py:1-320 — authoritative scaling diff implementation and thresholds.
- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
- docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:42:07] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Regenerate and analyse the per-φ scaling traces so we can pinpoint the lattice-factor sign flip that blocks the supervisor command parity run.
Mode: Parity
Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: [tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics]
Artifacts:
- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log
- reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.{log,json}
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md
- reports/2025-10-cli-flags/phase_l/scaling_validation/{scaling_validation_summary_20251119.md,metrics.json,run_metadata.json}
Do Now: CLI-FLAGS-003 — run "'`PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`, then `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`, finally `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q` to confirm instrumentation stability.
If Blocked: Capture the full harness stdout to `reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_raw.txt`, note whether any `TRACE_PY_PHI` lines appear, and log the failure mode plus commands under docs/fix_plan.md Attempt history before requesting supervisor guidance.
Priorities & Rationale:
- docs/fix_plan.md:460-463 promotes refreshed per-φ scaling validation as the top blocker before documentation or parity reruns.
- plans/active/cli-noise-pix0/plan.md:20-33,260-266 records that the existing per-φ artifact lacks `TRACE_PY_PHI`, and that Phase L3e remains open until new evidence is captured.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1-41 links the residual 24% intensity gap directly to missing lattice-factor parity, prioritising renewed trace capture.
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1-96 documents the previous instrumentation contract and expected schema, which the new run must reproduce.
- scripts/validation/compare_scaling_traces.py:1-320 formalises the tolerance envelope (≤1e-6) that L3e must satisfy before the plan can progress.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log anchors the C reference that every refreshed per-φ trace must match within Δk < 5e-4.
How-To Map:
- Environment prep:
  1. `export PYTHONPATH=src`
  2. `export KMP_DUPLICATE_LIB_OK=TRUE`
  3. Confirm `which python` matches the virtualenv used for previous CLI loops.
- Harness execution (creates the new trace + per-φ files):
  `PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`
  * Expected stdout banners: “Main trace written to …/trace_py_scaling_20251119.log” and “Captured 10 TRACE_PY_PHI lines”.
  * Harness automatically writes environment and config snapshots alongside the trace; retain them.
- Verify harness output immediately:
  * `rg "TRACE_PY_PHI" reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.log`
  * `head -n 20 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json`
- Per-φ comparison against C:
  `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log > reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md`
  * Validate the summary contains a table with φ_tic entries and Δk columns.
  * If the script complains about a missing `traces` key, adapt the JSON (rename `per_phi_entries` → `traces`) in a copy before rerunning; document any such adjustments in Attempt notes.
- Scaling-factor diff rerun:
  `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`
  * Confirm metrics.json reports ≤1e-6 deltas for r_e²/fluence/steps/capture_fraction, and highlight the first divergent factor.
  * Inspect run_metadata.json to ensure git SHA, torch version, and command strings match today’s environment.
- pytest collection check before running the targeted test:
  `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics`
- Targeted pytest execution (should pass on first run):
  `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
  * Archive the stdout under `reports/2025-10-cli-flags/phase_l/per_phi/pytest_trace_pixel_20251119.log`.
- Documentation + attempt logging:
  * Append an Attempt entry to docs/fix_plan.md with command log snippets, artifact paths, delta metrics, and any schema adjustments.
  * Update `reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md` with a short “2025-11-19 refresh” paragraph summarising new findings.
Pitfalls To Avoid:
- Do not modify simulator physics or tracing logic; all work must occur via harness scripts.
- Keep tensors/device aligned—avoid accidental `.cpu()` conversions or dtype casts while handling traces.
- Ensure the harness prints “Captured 10 TRACE_PY_PHI lines”; if it prints zero, treat that as failure and debug capture rather than forcing success.
- Preserve historical artifacts by writing new files with the `20251119` suffix; do not overwrite `trace_py_scaling_20251117.log` or older JSONs.
- Maintain Protected Assets from docs/index.md (especially `loop.sh`, `supervisor.sh`, `input.md`).
- Re-run `compare_scaling_traces.py` only after confirming the new trace file exists; stale paths silently reuse older metrics.
- Include environment metadata (git SHA, torch version) in Attempt notes; missing metadata blocks plan closure.
- If you edit `compare_per_phi_traces.py` for schema compatibility, isolate the change to tooling (no production modules) and mention the diff explicitly.
- Watch for accidental removal of `TRACE_PY` lines when filtering stdout—per-φ extraction must be additive.
- Do not escalate to production code changes until per-φ parity evidence proves where the sign flip occurs.
- Respect vectorization constraints: no Python loops added inside simulator or harness code paths that would regress batching.
- Remember to keep randomness deterministic (no new RNG seeds) so traces stay comparable run-to-run.
Pointers:
- docs/fix_plan.md:460-616 — active status, attempts, and refreshed next actions.
- plans/active/cli-noise-pix0/plan.md:20-33,260-266 — Phase L3 context and updated L3e task guidance.
- reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md:1-41 — root-cause narrative for current mismatch.
- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md:1-120 — documentation of prior per-φ instrumentation.
- scripts/validation/compare_scaling_traces.py:1-320 — authoritative scaling diff implementation and thresholds.
- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
- docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
EOF
' succeeded in 1.01s:

[2025-10-07T09:42:07] tokens used: 112,590
[2025-10-07T09:42:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:42:09] thinking

**Checking line count**
[2025-10-07T09:42:11] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:42:12] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 725ms:
      70 input.md
[2025-10-07T09:42:12] tokens used: 115,016
[2025-10-07T09:42:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:42:22] thinking

**Planning document expansion**

I’m figuring out how to increase the file length from about 70 to 100–200 lines by adding detailed bullet points, elaborations in the How-To map, extra verification steps, and possibly new sections like a Reporting Checklist or Validation Checklist, all while fitting it neatly before the Next Up section.
[2025-10-07T09:42:32] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -69,2 +69,17 @@
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
[2025-10-07T09:42:32] apply_patch(auto_approved=true) exited 0 in 35ms:
Success. Updated the following files:
M input.md
[2025-10-07T09:42:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..e7f21c525313874a5de691e65b0b322d7355afd4
--- a/input.md
+++ b/input.md
@@ -67,4 +67,19 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T09:42:32] tokens used: 116,335
[2025-10-07T09:42:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..e7f21c525313874a5de691e65b0b322d7355afd4
--- a/input.md
+++ b/input.md
@@ -67,4 +67,19 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T09:42:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:42:36] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 905ms:
      85 input.md
[2025-10-07T09:42:36] tokens used: 118,196
[2025-10-07T09:42:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..e7f21c525313874a5de691e65b0b322d7355afd4
--- a/input.md
+++ b/input.md
@@ -67,4 +67,19 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:42:40] thinking

**Planning detailed checklist expansion**
[2025-10-07T09:42:46] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -84,2 +84,11 @@
 - docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
[2025-10-07T09:42:46] apply_patch(auto_approved=true) exited 0 in 46ms:
Success. Updated the following files:
M input.md
[2025-10-07T09:42:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..6e45c2a987d98b7099339f13cbb1a2e44ef2213e
--- a/input.md
+++ b/input.md
@@ -67,4 +67,28 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T09:42:46] tokens used: 119,688
[2025-10-07T09:42:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..6e45c2a987d98b7099339f13cbb1a2e44ef2213e
--- a/input.md
+++ b/input.md
@@ -67,4 +67,28 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:42:49] thinking

**Counting lines**
[2025-10-07T09:42:50] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:42:51] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 961ms:
      94 input.md
[2025-10-07T09:42:51] tokens used: 121,284
[2025-10-07T09:42:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..6e45c2a987d98b7099339f13cbb1a2e44ef2213e
--- a/input.md
+++ b/input.md
@@ -67,4 +67,28 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:42:54] thinking

**Extending success criteria with verification notes**
[2025-10-07T09:43:00] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -93,2 +93,9 @@
 - Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
[2025-10-07T09:43:00] apply_patch(auto_approved=true) exited 0 in 39ms:
Success. Updated the following files:
M input.md
[2025-10-07T09:43:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T09:43:00] tokens used: 121,977
[2025-10-07T09:43:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:02] thinking

**Counting lines**
[2025-10-07T09:43:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 904ms:
     101 input.md
[2025-10-07T09:43:03] tokens used: 123,325
[2025-10-07T09:43:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:08] thinking

**Preparing update for galph_memory.md**
[2025-10-07T09:43:13] tokens used: 124,170
[2025-10-07T09:43:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:16] thinking

**Verifying galph_memory structure**
[2025-10-07T09:43:17] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:18] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 40 galph_memory.md' succeeded in 873ms:
## 2025-11-17 (galph loop — CLI L3c device probe)
- Re-audited CLI HKL attachment after harness fixes; updated `reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_audit.md` with fc600db findings showing dtype+metadata are wired but tensors never move to `-device cuda`.
- Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
- Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
- Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.

## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
- `git pull --rebase` already up to date; no conflicts.
- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase C kick-off)
- Synced clean; reviewed latest plan/docs plus Ralph’s recent commits (`d30a581`, `30ab2d1`). Design memo now exists and captures B1–B3; CLI device audit revealed HKL tensors stuck on CPU but no regressions observed.
- Updated `plans/active/vectorization.md` context + Phase B table to mark B1–B3 complete, steering focus to Phase C implementation (C1–C3). Refreshed `docs/fix_plan.md` next-actions accordingly.
- Authored new `input.md` (Perf mode) directing Ralph to implement Phase C1 batched tricubic gather with a fresh targeted pytest and to log implementation notes under phase_c/.
- Expect Ralph next loop to land the gather vectorization, add the new test, and document deltas before moving to Phase C2 fallback validation. CLI-FLAGS-003 remains pending after gather work.
## 2025-11-18 (galph loop — CLI-FLAGS L3c audit prep)
- Chose Evidence focus on CLI-FLAGS-003 Phase L3c to unblock the supervisor-command parity goal.
- Reviewed src/nanobrag_torch/__main__.py:438-450 and 1068-1076; confirmed CLI still attaches HKL data after Crystal construction but leaves tensors on CPU and instantiates Crystal without propagating the CLI device/dtype.
[2025-10-07T09:43:18] tokens used: 125,435
[2025-10-07T09:43:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:22] thinking

**Preparing to append new log entry**
[2025-10-07T09:43:27] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-11-19 (galph loop — CLI L3e per-φ refresh setup)
- Confirmed "'`git pull --rebase` succeeded without conflicts.
- Reviewed Phase L3 evidence: `analysis_20251119.md` still shows F_cell parity yet `trace_py_scaling_per_phi.log` lacks any `TRACE_PY_PHI`, indicating the harness output is stale.
- Updated `docs/fix_plan.md` next actions to call for a 2025-11-19 per-φ trace rerun and noted the empty log under Attempt #83 observations.
- Refreshed `plans/active/cli-noise-pix0/plan.md` gap snapshot and revised the L3e task description to emphasise regenerating per-φ artifacts before scaling validation can pass.
- Authored new `input.md` (Parity mode) instructing Ralph to rerun `trace_harness.py` with `--out trace_py_scaling_20251119.log`, regenerate per-φ comparison data, rerun `compare_scaling_traces.py`, and capture the targeted pytest output.
- Follow-up: expect refreshed logs/JSON under `reports/2025-10-cli-flags/phase_l/per_phi/`, updated scaling_validation metrics, and a docs/fix_plan.md attempt summarising whether the Δk≈6 offset persists.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:28] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-11-19 (galph loop — CLI L3e per-φ refresh setup)
- Confirmed "'`git pull --rebase` succeeded without conflicts.
- Reviewed Phase L3 evidence: `analysis_20251119.md` still shows F_cell parity yet `trace_py_scaling_per_phi.log` lacks any `TRACE_PY_PHI`, indicating the harness output is stale.
- Updated `docs/fix_plan.md` next actions to call for a 2025-11-19 per-φ trace rerun and noted the empty log under Attempt #83 observations.
- Refreshed `plans/active/cli-noise-pix0/plan.md` gap snapshot and revised the L3e task description to emphasise regenerating per-φ artifacts before scaling validation can pass.
- Authored new `input.md` (Parity mode) instructing Ralph to rerun `trace_harness.py` with `--out trace_py_scaling_20251119.log`, regenerate per-φ comparison data, rerun `compare_scaling_traces.py`, and capture the targeted pytest output.
- Follow-up: expect refreshed logs/JSON under `reports/2025-10-cli-flags/phase_l/per_phi/`, updated scaling_validation metrics, and a docs/fix_plan.md attempt summarising whether the Δk≈6 offset persists.
EOF
' succeeded in 903ms:

[2025-10-07T09:43:28] tokens used: 127,553
[2025-10-07T09:43:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:30] thinking

**Checking git status and modified files**
[2025-10-07T09:43:31] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:32] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 767ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T09:43:32] tokens used: 128,868
[2025-10-07T09:43:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:34] thinking

**Reviewing code differences**
[2025-10-07T09:43:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:36] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff docs/fix_plan.md' succeeded in 734ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c..01f6baa 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
[2025-10-07T09:43:36] tokens used: 129,076
[2025-10-07T09:43:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T09:43:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:39] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff plans/active/cli-noise-pix0/plan.md' succeeded in 709ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e..2c09179 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@ Exit Criteria: PyTorch source changes with inline C-code docstring references ar
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
[2025-10-07T09:43:39] tokens used: 130,463
[2025-10-07T09:43:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:41] thinking

**Verifying changes in input.md**
[2025-10-07T09:43:42] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:43] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff input.md' succeeded in 764ms:
diff --git a/input.md b/input.md
index c2166ab..df66306 100644
--- a/input.md
+++ b/input.md
@@ -1,39 +1,101 @@
-Summary: Capture per-φ lattice traces so we can isolate the F_latt drift blocking CLI parity.
+Summary: Regenerate and analyse the per-φ scaling traces so we can pinpoint the lattice-factor sign flip that blocks the supervisor command parity run.
 Mode: Parity
 Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
 Branch: feature/spec-based-2
 Mapped tests: [tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics]
-Artifacts: reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log; reports/2025-10-cli-flags/phase_l/per_phi/per_phi_py_20251119.json; reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md
-Do Now: CLI-FLAGS-003 — extend the scaling trace harness to emit per-φ `TRACE_PY_PHI` lattice entries and rerun the supervisor pixel; after instrumentation run `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q`
-If Blocked: Re-run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251117.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md` and log findings in docs/fix_plan.md Attempt history.
+Artifacts:
+- reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log
+- reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.{log,json}
+- reports/2025-10-cli-flags/phase_l/per_phi/comparison_summary_20251119.md
+- reports/2025-10-cli-flags/phase_l/scaling_validation/{scaling_validation_summary_20251119.md,metrics.json,run_metadata.json}
+Do Now: CLI-FLAGS-003 — run `PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039 --config supervisor --device cpu --dtype float32 --out trace_py_scaling_20251119.log`, then `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_traces.py --c reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log --py reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log --out reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary_20251119.md`, finally `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics -q` to confirm instrumentation stability.
[2025-10-07T09:43:43] tokens used: 132,047
[2025-10-07T09:43:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:48] thinking

**Reviewing large diff for galph_memory**
[2025-10-07T09:43:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff galph_memory.md' succeeded in 761ms:
diff --git a/galph_memory.md b/galph_memory.md
index 272167c..894307e 100644
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1558,3 +1558,11 @@ Follow-ups for Ralph:
 - Key finding: HKL ingestion now matches C (F_cell≈190.27) but lattice factor remains divergent (C `F_latt=-2.3832` vs Py `+1.35136`). Per-φ `TRACE_C_PHI` entries show the sign oscillation missing from PyTorch traces.
 - Authored `analysis_20251119.md` recommending per-φ instrumentation; updated input.md to direct Ralph to extend the trace harness, emit `TRACE_PY_PHI`, and compare against archived C per-φ logs before touching simulator code.
 - Expect Ralph to capture new per-φ PyTorch trace/JSON under `reports/2025-10-cli-flags/phase_l/per_phi/`, run the targeted pytest selector for scaling traces, and append findings to docs/fix_plan.md Attempt history.
+
+## 2025-11-19 (galph loop — CLI L3e per-φ refresh setup)
+- Confirmed `git pull --rebase` succeeded without conflicts.
+- Reviewed Phase L3 evidence: `analysis_20251119.md` still shows F_cell parity yet `trace_py_scaling_per_phi.log` lacks any `TRACE_PY_PHI`, indicating the harness output is stale.
+- Updated `docs/fix_plan.md` next actions to call for a 2025-11-19 per-φ trace rerun and noted the empty log under Attempt #83 observations.
+- Refreshed `plans/active/cli-noise-pix0/plan.md` gap snapshot and revised the L3e task description to emphasise regenerating per-φ artifacts before scaling validation can pass.
+- Authored new `input.md` (Parity mode) instructing Ralph to rerun `trace_harness.py` with `--out trace_py_scaling_20251119.log`, regenerate per-φ comparison data, rerun `compare_scaling_traces.py`, and capture the targeted pytest output.
+- Follow-up: expect refreshed logs/JSON under `reports/2025-10-cli-flags/phase_l/per_phi/`, updated scaling_validation metrics, and a docs/fix_plan.md attempt summarising whether the Δk≈6 offset persists.
[2025-10-07T09:43:50] tokens used: 133,918
[2025-10-07T09:43:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:43:53] thinking

**Preparing files for commit**
[2025-10-07T09:43:55] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:43:56] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md galph_memory.md' succeeded in 728ms:

[2025-10-07T09:43:56] tokens used: 135,543
[2025-10-07T09:43:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:44:00] thinking

**Checking status**
[2025-10-07T09:44:01] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:44:01] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 766ms:
M  docs/fix_plan.md
M  galph_memory.md
M  input.md
M  plans/active/cli-noise-pix0/plan.md
[2025-10-07T09:44:01] tokens used: 136,264
[2025-10-07T09:44:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:44:04] thinking

**Committing with specified message**
[2025-10-07T09:44:05] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI-FLAGS-003 per-phi prep - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:44:06] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI-FLAGS-003 per-phi prep - tests: not run"' succeeded in 763ms:
[feature/spec-based-2 71dc1dc] SUPERVISOR: CLI-FLAGS-003 per-phi prep - tests: not run
 4 files changed, 107 insertions(+), 36 deletions(-)
[2025-10-07T09:44:06] tokens used: 136,497
[2025-10-07T09:44:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:44:09] thinking

**Pushing changes to remote**
[2025-10-07T09:44:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T09:44:12] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.56s:
To github.com:hoidn/nanoBragg.git
   1227bbd..71dc1dc  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T09:44:12] tokens used: 136,797
[2025-10-07T09:44:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T09:44:21] thinking

**Finalizing response summary**

I'm putting together a clear, friendly message that bullets the updated files and changes, highlights next steps for Ralph, and notes there were no code changes or tests run—keeping it concise and aligned with the instructions.
[2025-10-07T09:44:22] codex

- Updated CLI-FLAGS-003 next actions to demand a fresh 2025‑11‑19 per-φ trace and noted the missing `TRACE_PY_PHI` lines in the latest audit (`docs/fix_plan.md:460-616`).
- Refreshed the active plan snapshot so Phase L3e explicitly hinges on regenerating the per-φ artifacts before scaling validation (`plans/active/cli-noise-pix0/plan.md:20-33` and table row `L3e` at `:261`).
- Logged the supervisor decisions in `galph_memory.md` for continuity on the per-φ evidence gap.
- Replaced `input.md` with a detailed Parity-mode playbook covering the harness rerun, comparison scripts, pytest selectors, and reporting checklist (101 lines).

Next steps for Ralph:
1. Run the trace harness with the new `--out trace_py_scaling_20251119.log`, regenerate per-φ comparison outputs, rerun `compare_scaling_traces.py`, and execute the targeted pytest selector; archive artifacts under the specified `reports/2025-10-cli-flags/phase_l/` subdirectories.
2. Update docs/fix_plan.md Attempt history with the new metrics, noting whether the refreshed Δk collapses or persists.

Tests: not run (documentation/planning work only).
[2025-10-07T09:44:26] tokens used: 137,399
[2025-10-07T09:44:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a77ff7c4e6629c03bbd07ec3bc45e0c71947b7d1..01f6baa5a27983a4b9564e8bd1c0113615f4d016
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,9 +457,9 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-18 parity refresh):
-  1. Phase L3e scaling validation — Extend or author `scripts/validation/compare_scaling_chain.py` to diff TRACE_C/TRACE_PY after the HKL fix, storing JSON/markdown under `reports/2025-10-cli-flags/phase_l/scaling_validation/` with ≤1e-6 deltas for ω, polarization, capture_fraction, r_e², fluence, steps, `I_before_scaling`, and final intensity.
-  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once scaling validation passes.
+- Next Actions (2025-11-19 evidence refresh):
+  1. Phase L3e per-φ + scaling validation — Refresh the trace harness so the current supervisor run emits `TRACE_PY_PHI` lines (existing `trace_py_scaling_per_phi.log` contains none), capture `trace_py_per_phi_20251119.log`/`.json`, and rerun `compare_scaling_traces.py` (≤1e-6 tolerances) with outputs stored under `reports/2025-10-cli-flags/phase_l/per_phi/` and `.../scaling_validation/`.
+  2. Phase L3f documentation sync — Update `analysis.md`, `docs/fix_plan.md` attempts, and architectural docs with the finalized ingestion/normalization flow once the refreshed scaling validation passes.
   3. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
@@ -611,7 +611,7 @@
     Observations/Hypotheses:
       - **Structure factors now aligned:** `F_cell=190.270004272461` in TRACE_PY (`trace_py_scaling_20251117.log:26`) matches C within 2.4e-6, proving HKL ingestion fixes held
       - **First divergence moves downstream:** Raw accumulation gap is driven by lattice factor parity — C logs `F_latt=-2.3832` (`c_trace_scaling.log:288`) while PyTorch reports `F_latt=+1.35136` (`trace_py_scaling_20251117.log:24`)
-      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; PyTorch lacks equivalent `TRACE_PY_PHI` output, obscuring where the sign flip is lost
+      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
       - **Downstream scalars validated:** Fluence, steps, capture_fraction, polarization, omega remain within L3e tolerances, narrowing focus to lattice accumulation
     Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
   * [2025-10-07] Attempt #74 (ralph loop) — Result: **SUCCESS** (Phase L2b harness fix + L2c comparison complete). **Corrected harness to attach `crystal.hkl_data` and `crystal.hkl_metadata` instead of ad-hoc attributes; structure factor lookup now functional.**
diff --git a/input.md b/input.md
index 75204c9463002bd466f9be39906177c501edb15b..df6630621bb8634909a9ecfabb1471972b82cdd7
--- a/input.md
+++ b/input.md
@@ -67,4 +67,35 @@
 - reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:240-333 — harness logic that should emit `TRACE_PY_PHI` lines.
 - reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log:1-200 — C reference trace for comparison.
 - docs/development/testing_strategy.md:1-120 — device/dtype discipline reminders for targeted parity loops.
+- docs/architecture/pytorch_design.md:200-320 — simulator scaling overview; keep notes ready for Phase L3f documentation sync.
+- prompts/debug.md:1-180 — routing expectations for parity loops; stay within diagnostic mode guidance when capturing traces.
+Reporting Checklist:
+- Record exact commands, exit codes, and runtimes in Attempt notes; include whether CUDA was available even if unused.
+- Summarise key numeric deltas (Δk first divergence, ΔF_latt, ΔI_before_scaling) in both docs/fix_plan.md and the refreshed summary markdowns.
+- Attach SHA256 hashes for any regenerated `.log` / `.json` artifacts to ease future verification diffs.
+- Update galph_memory.md excerpt (if requested) with one-line status once artifacts are captured, so supervisor context stays fresh.
+- If schema adjustments were needed (e.g., JSON key rename), cite the patch location and intended follow-up clean-up.
+Success Criteria:
+- `trace_py_scaling_20251119.log` exists, contains latest git SHA in header, and matches the supervisor pixel selection (685,1039).
+- `trace_py_scaling_20251119_per_phi.log` lists 10 `TRACE_PY_PHI` entries whose `phi_tic` span 0–9.
+- `comparison_summary_20251119.md` reports Δk values and highlights the first φ divergence (or confirms parity if Δk < 5e-4 throughout).
+- `metrics.json` shows `status="PASS"` for r_e², fluence, steps, capture_fraction, and records the first divergence field name explicitly.
+- Targeted pytest selector succeeds on cpu/float32; no new warnings about missing TRACE output appear.
+- docs/fix_plan.md attempt entry references the new artifact paths and refreshed metrics, keeping chronological numbering intact.
+Evidence Storage Expectations:
+- Place auxiliary stdout/stderr snippets under `reports/2025-10-cli-flags/phase_l/per_phi/logs/` if they exceed a few dozen lines; reference them from the Attempt note instead of inlining.
+- Keep raw harness outputs (`*_raw.txt`) until supervisor confirmation, then either archive or delete per Protected Assets policy.
+- Mirror directory structure between per_phi and scaling_validation so that future automation can diff timestamps programmatically.
+- Note any manual edits (e.g., JSON schema tweaks) inside a short README within the same directory to aid future reproducibility.
+- If a rerun is required, suffix additional artifacts with `_rerun1`, `_rerun2`, etc., instead of overwriting the `_20251119` baseline.
+- Should comparisons require temporary tooling patches, commit them on a scratch branch or stash, but document the diff hash in Attempt notes.
+- Ensure timestamps in JSON outputs use UTC (`datetime.utcnow().isoformat() + 'Z'`) to maintain consistency with earlier artifacts.
+- Back up the new artifacts to `reports/archive/` once parity work is complete; note relocation in fix_plan before closing the item.
+Verification Notes:
+- When inspecting `trace_py_scaling_20251119.log`, confirm the ordering of `TRACE_PY:` lines matches the C trace (pix0_vector → fdet_vec → … → I_pixel_final) to ensure harness capture was lossless.
+- Cross-check `trace_py_scaling_20251119_per_phi.json` against the log to verify every entry appears in both files and that numeric formatting uses full precision.
+- Re-run `rg "F_latt"` across both PyTorch and C traces to highlight sign differences before drafting the Attempt summary.
+- If Δk remains ≈6 units after refreshing per-φ traces, flag this explicitly—the earlier MOSFLM rescale fixes should have collapsed that gap.
+- Keep a scratch pad of intermediate calculations (e.g., manual sincg evaluation) under `reports/2025-10-cli-flags/phase_l/per_phi/notes_20251119.md` for rapid follow-up during Phase L3f.
+- Share any anomalies (missing lines, unexpected zeroes) before touching production modules; the supervisor will decide on next investigative steps.
 Next Up: Once per-φ parity is confirmed, inspect `_compute_structure_factor_components` to reconcile F_latt accumulation order, document findings in Phase L3f, and prepare the nb-compare rerun for Phase L4.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index b40121e18011b86656b8293a5c6fbc8d8f8bd33b..2c09179d4d5b32ebad884001919f822d9844bb03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -26,6 +26,7 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
+- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored but the newly captured `trace_py_scaling_per_phi.log` still lacks `TRACE_PY_PHI` lines, so per-φ evidence must be regenerated before Phase L3e can close the lattice-factor gap.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -260,7 +261,7 @@
 | L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
-| L3e | Validate scaling via script | [ ] | Enhance `scripts/validation/compare_scaling_chain.py` (or create it if missing) to consume the L2 traces plus the new structure-factor data, emit JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`, and fail loudly if any factor exceeds the agreed thresholds. |
+| L3e | Refresh per-φ scaling validation | [ ] | Re-run the trace harness so the current supervisor pixel emits `TRACE_PY_PHI` lines (`trace_py_per_phi_20251119.log/.json`), then execute `scripts/validation/compare_scaling_traces.py` with ≤1e-6 tolerances and archive refreshed metrics under `reports/2025-10-cli-flags/phase_l/scaling_validation/`. |
 | L3f | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` with the implementation attempt, link the new artifacts, and edit architectural docs (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`) to describe the final normalization + HKL ingestion flow. Mark L3 tasks `[D]` once artifacts are archived. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   71dc1dc..e165240  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=86...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=86
Updating e165240..f3e65b8
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   e165240..f3e65b8  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=86
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating f3e65b8..c3efd5a
Fast-forward
 docs/fix_plan.md                                   | 15 ++++
 .../per_phi/trace_py_scaling_20251119_per_phi.json | 82 ++++++++++++++++++++++
 .../per_phi/trace_py_scaling_20251119_per_phi.log  | 10 +++
 .../phase_l/scaling_audit/trace_py_env.json        |  6 +-
 .../scaling_audit/trace_py_scaling_20251119.log    | 40 +++++++++++
 .../phase_l/scaling_validation/run_metadata.json   | 12 ++--
 6 files changed, 156 insertions(+), 9 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_scaling_20251119_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log
From github.com:hoidn/nanoBragg
   f3e65b8..c3efd5a  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating c3efd5a..0a203dc
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   c3efd5a..0a203dc  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=87
Ralph completed iteration 86; proceeding to 87
