Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=ralph status=running-ralph iter=107
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 4b73d1e..526f56d
Fast-forward
 docs/fix_plan.md                                   |  22 +++
 .../base_vector_debug/20251123/commands.txt        |   5 +
 .../base_vector_debug/20251123/delta_metrics.json  |  13 ++
 .../20251123/phi0_state_analysis.md                |  96 +++++++++++++
 .../base_vector_debug/20251123/commands.txt        |  30 ++++
 .../base_vector_debug/20251123/sha256.txt          |   2 +
 .../20251123/rot_vector_state_probe.log            |   4 +
 .../base_vector_debug/20251123/sha256.txt          |   2 +
 .../phase_l/rot_vector/diagnosis.md                | 156 +++++++++++++++++++++
 9 files changed, 330 insertions(+)
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md
From github.com:hoidn/nanoBragg
   4b73d1e..526f56d  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 526f56d..3b28849
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   526f56d..3b28849  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=108
To github.com:hoidn/nanoBragg.git
   3b28849..0da3a72  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T18:52:18] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T18:52:18] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T18:52:23] thinking

**Preparing to update repository**
[2025-10-07T18:52:24] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:26] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.62s:
Already up to date.
[2025-10-07T18:52:26] tokens used: 14,043

[2025-10-07T18:52:28] thinking

**Locating latest galph_memory file**
[2025-10-07T18:52:28] exec bash -lc ls in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:29] bash -lc ls succeeded in 742ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
PHASE_5_IMPLEMENTATION_SUMMARY.md
[2025-10-07T18:52:29] tokens used: 14,980

[2025-10-07T18:52:30] thinking

**Reading latest galph_memory entry**
[2025-10-07T18:52:31] exec bash -lc 'tail -n 200 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:32] bash -lc 'tail -n 200 galph_memory.md' succeeded in 745ms:

## 2025-11-16 (galph loop — VECTOR-TRICUBIC-001 kickoff)
- Refreshed `plans/active/vectorization.md` Context/Phase A guidance to flag the Phase A evidence push (collect-only log, env snapshot) and reinforced harness locations under `scripts/benchmarks/`.
- Updated `docs/fix_plan.md` next-actions list for VECTOR-TRICUBIC-001 with the env.json + collect-only requirements so the fix-plan matches the plan.
- Authored input.md handing Ralph Phase A1–A3 tasks (capture tricubic/absorption baselines, build benchmark harnesses, persist logs in `reports/2025-10-vectorization/phase_a/`).
- Follow-up for Ralph: execute the outlined commands, write harness stubs, drop Attempt #1 evidence into fix_plan once artifacts exist, then proceed to Phase B design when Phase A closes.

## 2025-11-17 (galph loop — Phase A2/A3 planning refresh)
- `git pull --rebase` clean; reviewed core docs plus vectorization plan/fix_plan entries before analysis.
- Coin flip = heads → reviewed Ralph’s recent commits (142230b, 6e12854). Evidence collection and baseline logs look solid; no regressions spotted. Noted that tests/test_at_str_002.py and absorption logs already captured in reports/2025-10-vectorization/phase_a/.
- Updated plans/active/vectorization.md gap snapshot and Phase A table to mark A1 complete and highlight missing A2/A3 harnesses.
- Refreshed docs/fix_plan.md VECTOR-TRICUBIC-001 status to `in_progress`, tightened next actions to focus on creating tricubic/absorption baseline scripts.
- Authored expanded input.md (Perf mode) directing Ralph to implement Phase A2/A3 benchmark harnesses, capture timing artifacts (JSON/Markdown/run_log/env.json), and log metrics in fix_plan.
- No code changes; focus next loop: ensure harness scripts and reports land, then proceed to Phase B design memo.

## 2025-11-17 (galph loop — CLI-FLAGS L3 readiness)
- Sync clean; revisited docs/index.md, spec shards, arch.md, config map, debugging SOP, testing strategy, fix_plan, and active plans.
- Noted inconsistency: `structure_factor/probe.log` shows scaled.hkl spans [-24,24]×[-28,28]×[-31,30] with F_cell=190.27, but `scaling_audit/config_snapshot.json` still reports h/k/l ranges (1,12,3) and TRACE_PY keeps F_cell=0.
- Updated docs/fix_plan.md: CLI-FLAGS-003 Next Actions now start with a fresh Phase L3a probe rerun plus harness/CLI audits; VECTOR-TRICUBIC-001 Next Actions point to Phase B design tasks (B1–B3).
- No new evidence generated; left instructions for Ralph to recapture HKL coverage on the current machine, reconcile harness metadata, then proceed with Phase L3 scaling fixes once F_cell matches C.
[2025-10-07T18:52:32] tokens used: 16,512

[2025-10-07T18:52:37] thinking

**Planning to review documentation**
[2025-10-07T18:52:41] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:42] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 811ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T18:52:42] tokens used: 35,046

[2025-10-07T18:52:44] thinking

**Reviewing spec file start**
[2025-10-07T18:52:45] exec bash -lc "sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:45] bash -lc "sed -n '1,200p' specs/spec-a.md" succeeded in 740ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T18:52:45] tokens used: 36,739

[2025-10-07T18:52:48] thinking

**Planning to read shard specs**
[2025-10-07T18:52:49] exec bash -lc "sed -n '1,200p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:49] bash -lc "sed -n '1,200p' specs/spec-a-core.md" succeeded in 796ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-07T18:52:49] tokens used: 37,032

[2025-10-07T18:52:51] thinking

**Pausing to read architecture doc**
[2025-10-07T18:52:52] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:52] bash -lc "sed -n '1,200p' arch.md" succeeded in 752ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T18:52:52] tokens used: 40,022

[2025-10-07T18:52:54] thinking

**Reading c_to_pytorch_config_map documentation**
[2025-10-07T18:52:55] exec bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:56] bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 751ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T18:52:56] tokens used: 42,485

[2025-10-07T18:52:57] thinking

**Checking for debugging docs**
[2025-10-07T18:52:58] exec bash -lc "sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:52:59] bash -lc "sed -n '1,200p' docs/debugging/debugging.md" succeeded in 717ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T18:52:59] tokens used: 44,448

[2025-10-07T18:53:02] thinking

**Checking for testing strategy docs**
[2025-10-07T18:53:04] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:05] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 755ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T18:53:05] tokens used: 46,769

[2025-10-07T18:53:09] thinking

**Checking fix_plan files**
[2025-10-07T18:53:10] exec bash -lc 'ls fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:10] bash -lc 'ls fix_plan.md' exited 1 in 769ms:
ls: fix_plan.md: No such file or directory
[2025-10-07T18:53:10] tokens used: 78,826

[2025-10-07T18:53:12] thinking

**Checking for fix_plan.md in docs**
[2025-10-07T18:53:13] exec bash -lc 'ls docs | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:13] bash -lc 'ls docs | head' succeeded in 808ms:
CLAUDE.md
README.md
architecture
bugs
debugging
development
fix_plan.md
fix_plan_archive.md
fix_plan_update.md
index.md
[2025-10-07T18:53:13] tokens used: 81,447

[2025-10-07T18:53:15] thinking

**Locating fix_plan documentation**
[2025-10-07T18:53:16] exec bash -lc "sed -n '1,160p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:17] bash -lc "sed -n '1,160p' docs/fix_plan.md" succeeded in 765ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T18:53:17] tokens used: 81,663

[2025-10-07T18:53:18] thinking

**Searching for CLI-FLAGS-003**
[2025-10-07T18:53:19] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:20] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 764ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
626:      - C trace evidence indicates state carryover within the reference implementation. Until we either patch the C code or emulate this behavior, PyTorch must conform to the reference output to unblock CLI-FLAGS-003.
[2025-10-07T18:53:20] tokens used: 84,621

[2025-10-07T18:53:23] thinking

**Reviewing specific section around line 450**
[2025-10-07T18:53:23] exec bash -lc "sed -n '450,660p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:24] bash -lc "sed -n '450,660p' docs/fix_plan.md" succeeded in 810ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-22 refresh → galph):
1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T18:53:24] tokens used: 84,870

[2025-10-07T18:53:28] thinking

**Reviewing plans and long-term goals**

I'm preparing to analyze the codebase thoroughly to address the user's key goals involving adding CLI flags for parallel tests and advancing the vectorization plan. I'll review relevant documentation and fix plans, especially those under `plans/active/vectorization.md`, to understand current issues and gaps before proceeding.
[2025-10-07T18:53:29] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:29] bash -lc 'ls plans/active' succeeded in 784ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T18:53:29] tokens used: 88,156

[2025-10-07T18:53:31] thinking

**Preparing to review vectorization plans**
[2025-10-07T18:53:32] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:33] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 823ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T18:53:33] tokens used: 88,394

[2025-10-07T18:53:35] thinking

**Noting need to review later**
[2025-10-07T18:53:36] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:37] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 807ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
[2025-10-07T18:53:37] tokens used: 89,912

[2025-10-07T18:53:43] thinking

**Planning next steps**
[2025-10-07T18:53:44] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:45] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 922ms:
heads
[2025-10-07T18:53:45] tokens used: 92,918

[2025-10-07T18:53:47] thinking

**Reviewing recent commits**
[2025-10-07T18:53:48] exec bash -lc 'git log --oneline -n 12' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:49] bash -lc 'git log --oneline -n 12' succeeded in 778ms:
0da3a72 [SYNC i=108] actor=galph status=running
3b28849 [SYNC i=108] actor=ralph → next=galph status=ok ralph_commit=526f56d
526f56d CLI-FLAGS-003 Phase L3k.3c.2: φ=0 carryover evidence collection
4b73d1e document possible C cli bugs
15c57bb [SYNC i=107] actor=ralph status=running
2c6a9ca [SYNC i=107] actor=galph → next=ralph status=ok galph_commit=698c5c3
698c5c3 SUPERVISOR: CLI-FLAGS L3k.3c evidence plan - tests: not run
081fd8e document possible / likely bug in nanobragg C
81541e0 [SYNC i=107] actor=galph status=running
3abcc57 [SYNC i=107] actor=ralph → next=galph status=ok ralph_commit=d8881ab
d8881ab CLI-FLAGS-003 L3k.3c: Restore φ=0 C parity guard (Attempt #103)
0f58f84 [SYNC i=106] actor=ralph status=running
[2025-10-07T18:53:49] tokens used: 104,113

[2025-10-07T18:53:53] thinking

**Reviewing recent commits**
[2025-10-07T18:53:54] exec bash -lc 'git show 526f56d --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:55] bash -lc 'git show 526f56d --stat' succeeded in 766ms:
commit 526f56da3b8741ec245d5b8d41ded9b2d3e52b7f
Author: ollie <ohoidn>
Date:   Tue Oct 7 11:50:51 2025 -0700

    CLI-FLAGS-003 Phase L3k.3c.2: φ=0 carryover evidence collection
    
    Evidence-only loop (Mode: Parity) per input.md Do Now guidance.
    Captured PyTorch φ=0 state probe results. BLOCKED awaiting C trace
    generation (Phase L3k.3b) to compute deltas and complete carryover story.
    
    Key Findings:
    - φ=0 behavior correct: rot_b_phi0_y matches b_base_y exactly (0.7173197865486145 Å)
    - Rotation by 0° is identity operation as expected
    - φ₁ (0.01°) shows expected small deviation (Δb_y = -5.08e-3 Å from φ₀)
    - C reference trace missing; documented gap per input.md "If Blocked" guidance
    
    Artifacts:
    - reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log
    - reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json (status: BLOCKED)
    - reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md
[2025-10-07T18:53:55] tokens used: 104,703

[2025-10-07T18:53:57] thinking

**Verifying recent commit**
[2025-10-07T18:53:57] exec bash -lc 'git show d8881ab --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:53:58] bash -lc 'git show d8881ab --stat' succeeded in 721ms:
commit d8881abe2711287b515981e53cf3355ed4f6cf39
Author: ollie <ohoidn>
Date:   Tue Oct 7 11:31:09 2025 -0700

    CLI-FLAGS-003 L3k.3c: Restore φ=0 C parity guard (Attempt #103)
    
    Reverted Attempt #102's weakened assertions to restore C-aligned expectations
    and capture the φ=0 rotation-vector parity regression as required by Phase L3k.3c.
    
    Changes:
    - tests/test_cli_scaling_phi0.py:116-132 — Restored C trace reference rot_b_y=0.6715882339
      from c_trace_phi_202510070839.log (was incorrectly changed to PyTorch value 0.71732)
    - tests/test_cli_scaling_phi0.py:142-153 — Removed skip from test_k_frac_phi0_matches_c,
      restored C parity validation
    - tests/test_cli_scaling_phi0.py:247-261 — Restored C trace reference k_frac=-0.6072558396
    
    Test Results (Expected Failures - Red Baseline):
    - test_rot_b_matches_c: FAILED (6.8% error, Δ=+0.0457 Å)
    - test_k_frac_phi0_matches_c: FAILED (2.28 abs error)
    - Test collection: 655 tests (no regression)
[2025-10-07T18:53:58] tokens used: 105,601

[2025-10-07T18:54:15] thinking

**Assessing test failures and plan status**

I'm checking why some tests fail—they seem intentionally broken to highlight parity issues, especially around CLI flags like -nonoise and -pix0_vector_mm in PyTorch. I'm reviewing the current plan phases, particularly CLI-FLAGS-003, and noting that C trace instrumentation is still missing and required next steps. I want to analyze if the existing plans need updates or if a new plan should be created based on these gaps and ongoing tasks.
[2025-10-07T18:54:17] exec bash -lc 'rg "L3k" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:54:18] bash -lc 'rg "L3k" -n plans/active/cli-noise-pix0/plan.md' succeeded in 785ms:
6:- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
20:- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
34:- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
276:| L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-11-21 Attempt #96: Updated `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #96 entry documenting Phase L3k.1 completion (implementation memo), artifact paths, root cause analysis, proposed fix strategy, and next actions for code implementation loop. Documented Mode: Docs constraint (no code changes this loop). Updated this plan to mark L3k.1 complete. pytest --collect-only deferred to implementation loop. |
278:### Phase L3k — φ Rotation Fix Implementation
285:| L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
286:| L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
287:| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
289:#### L3k.3 Checklist — φ=0 Verification Recovery
293:| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
294:| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
295:| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
296:| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
297:| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
298:| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
300:#### L3k.3c Tasks — Restore φ=0 Parity with C Reference
304:| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
305:| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
306:| L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
[2025-10-07T18:54:18] tokens used: 107,187

[2025-10-07T18:54:38] thinking

**Identifying plan update needs**

I'm realizing the plan is outdated because it still shows unfinished tasks we've completed, so I need to update task statuses like L3k.3c.1 and L3k.3c.2 based on recent commits and new evidence from attempts #103 and #108. To do this properly, I also have to review relevant documentation—like specs and debugging guides—to integrate fresh info into the plan and fix_plan, ensuring everything stays aligned. This all points to focusing on a planning update phase tied to CLI-FLAGS parity work.
[2025-10-07T18:54:39] exec bash -lc "sed -n '1,200p' specs/spec-a-cli.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:54:40] bash -lc "sed -n '1,200p' specs/spec-a-cli.md" succeeded in 944ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-07T18:54:40] tokens used: 111,196

[2025-10-07T18:54:43] thinking

**Locating relevant documentation**
[2025-10-07T18:54:44] exec bash -lc 'rg -n "pix0" docs/architecture/detector.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:54:45] bash -lc 'rg -n "pix0" docs/architecture/detector.md | head' succeeded in 775ms:
35:## 5. Logic Flow: `pix0_vector` Calculation
37:The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:
42:    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
43:    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
44:    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
45:    D --> F[pix0_vector = detector_origin + pixel_offsets];
53:pix0_vector = -Fbeam * fdet_vec - Sbeam * sdet_vec + distance * beam_vector
64:pix0_vector = detector_origin + s_offset * sdet_vec + f_offset * fdet_vec
86:- `pix0_vector` changes
209:2. **Pixel Coordinate Consistency:** Check `pixel[0,0] == pix0_vector`
[2025-10-07T18:54:45] tokens used: 114,146
[2025-10-07T18:54:47] exec bash -lc "sed -n '35,120p' docs/architecture/detector.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:54:48] bash -lc "sed -n '35,120p' docs/architecture/detector.md" succeeded in 714ms:
## 5. Logic Flow: `pix0_vector` Calculation

The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:

```mermaid
graph TD
    A[Start: Calculate Rotated Basis Vectors] --> B{Detector Pivot Mode?};
    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
    D --> F[pix0_vector = detector_origin + pixel_offsets];
    E --> G[Final Detector Geometry];
    F --> G;
```

### 5.1 BEAM Pivot Mode
When `detector_pivot = BEAM`, the detector rotates around the direct beam spot:
```python
pix0_vector = -Fbeam * fdet_vec - Sbeam * sdet_vec + distance * beam_vector
```
[2025-10-07T18:54:48] tokens used: 114,622

[2025-10-07T18:54:51] thinking

**Reviewing documentation and data for planning**
[2025-10-07T18:54:52] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:54:53] bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json' succeeded in 721ms:
{
  "status": "BLOCKED",
  "reason": "C trace file missing (reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log does not exist)",
  "action_required": "Generate C trace using instrumented golden_suite_generator/nanoBragg binary as specified in Phase L3k.3b",
  "pytorch_values_captured": {
    "b_base_y": 0.7173197865486145,
    "rot_b_phi0_y": 0.7173197865486145,
    "rot_b_phi1_y": 0.7122385501861572,
    "k_frac_placeholder": 980.31396484375
  },
  "expected_c_reference": "reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log",
  "note": "Delta computation deferred until C trace is available. Per input.md 'If Blocked' guidance, documenting the gap and proceeding with analysis memo."
}
[2025-10-07T18:54:53] tokens used: 115,835

[2025-10-07T18:55:01] thinking

**Updating plan statuses and clarifying instrumentation**

I’m aligning the plan updates with the latest attempt progress, marking some steps done and others in progress while sorting out contradictions in the instrumentation status for C trace data. I’ll ensure the next actions reflect accurate steps like generating the C trace and revisiting paths to confirm available data.
[2025-10-07T18:55:04] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:05] bash -lc 'ls reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839' succeeded in 861ms:
c_trace_phi_202510070839.log
comparison_stdout.txt
comparison_summary.md
diagnosis.md
trace_py_rot_vector_202510070839.log
trace_py_rot_vector_202510070839_per_phi.json
trace_py_rot_vector_202510070839_per_phi.log
[2025-10-07T18:55:05] tokens used: 116,603

[2025-10-07T18:55:13] thinking

**Investigating missing delta metrics file**

I see that the delta metrics report a missing file, possibly due to path differences or renames causing script access issues. I'm checking the instrumentation and fix_plan records to confirm if the new C trace with the right timestamp needs regenerating and to verify that attempt #108 is properly logged. This will help me understand the diagnostic state and update the next steps accordingly.
[2025-10-07T18:55:14] exec bash -lc 'rg "Attempt #108" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:15] bash -lc 'rg "Attempt #108" -n docs/fix_plan.md' exited 1 in 907ms:

[2025-10-07T18:55:15] tokens used: 117,289

[2025-10-07T18:55:18] thinking

**Checking commit details**
[2025-10-07T18:55:19] exec bash -lc "git show 526f56d:docs/fix_plan.md | sed -n '520,620p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:20] bash -lc "git show 526f56d:docs/fix_plan.md | sed -n '520,620p'" succeeded in 745ms:
      4. If deltas ≈ 0: Proceed to Phase L3k.4 normalization closure
      5. If deltas ≠ 0: Implement vectorized φ=0 carryover fix per proposed remediation, re-verify with VG-1 gates
    Observations/Hypotheses:
      - **Root cause confirmed fixed**: Removed lines 1014-1022 (independent reciprocal rotation), replaced with cross product recomputation (lines 1019-1035)
      - **C-code semantics matched**: Now rotates ONLY real vectors (a, b, c) per nanoBragg.c:3056-3058, then recomputes reciprocal vectors maintaining metric duality
      - **Docstring compliance**: Added C-code reference per CLAUDE Rule #11 before implementation
      - **Test stability**: All crystal geometry, rotation, and lattice tests pass without regression
      - **Metric duality preserved**: V_actual computed from rotated real vectors, used to regenerate reciprocal vectors per CLAUDE Rule #13
      - **Vectorization maintained**: Batched tensor operations across phi/mosaic dimensions, device-neutral implementation
      - **Gradient flow preserved**: Cross product and division operations maintain autograd connectivity
    Next Actions:
      1. Phase L3k.3 — Execute verification gates VG-1⇢VG-5 (per-φ traces, pytest lattice with NB_RUN_PARALLEL=1, nb-compare ROI, delta audit, docs updates)
      2. Generate per-φ traces at φ=0°, 0.05°, 0.1° to validate b_Y drift eliminated
      3. Run nb-compare with supervisor command to verify correlation ≥0.9995, sum_ratio 0.99–1.01
      4. After gates pass: Execute Phase L3k.4 (complete Attempt with full metrics, mark fix_checklist rows, prepare Phase L4)
  * [2025-10-07] Attempt #98 (ralph loop i=98) — Result: **VALIDATION** (Phase L3k.3 VG-2 gate PASSED). **φ rotation fix validated via targeted lattice test.**
    Metrics: VG-2 test_f_latt_square_matches_c PASSED (5.79s) with NB_RUN_PARALLEL=1; test collection 653 tests; no code changes.
    Artifacts:
      - VG-2 test log: tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c PASSED
      - Test collection: 653 tests collected successfully (pytest --collect-only)
[2025-10-07T18:55:20] tokens used: 117,959

[2025-10-07T18:55:24] thinking

**Searching for specific attempt entry**
[2025-10-07T18:55:25] exec bash -lc 'rg "2025-11-23" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:25] bash -lc 'rg "2025-11-23" -n docs/fix_plan.md' exited 1 in 881ms:

[2025-10-07T18:55:25] tokens used: 120,249

[2025-10-07T18:55:28] thinking

**Inspecting recent commit changes**
[2025-10-07T18:55:29] exec bash -lc "sed -n '660,820p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:30] bash -lc "sed -n '660,820p' docs/fix_plan.md" succeeded in 767ms:
    Observations/Hypotheses:
      - **Spindle vectors identical:** Raw=[-1.0,0.0,0.0], Normalized=[-1.0,0.0,0.0], Magnitude=1.0 (exact unit vector)
      - **H1 verdict:** PyTorch's `unitize()` call in `rotate_axis` (utils/geometry.py:91) is a no-op; cannot explain Y-drift O(1e-2) Å
      - **H2 confirmed ruled out:** Volume delta O(1e-3) Å³ << Y-drift magnitude
      - **H3 promoted to primary:** MOSFLM matrix semantics now leading suspect (reciprocal perfect O(1e-9), real diverges in Y)
      - **Test stability:** `pytest --collect-only` passed 4/4 variants after instrumentation
    Next Actions: Phase L3h — Document H3 investigation plan (compare `read_mosflm_matrix` vs C A.mat parsing); update plans/active/cli-noise-pix0/plan.md L3g→[D] (✅ DONE); investigate MOSFLM real↔reciprocal recalculation sequencing before proposing corrective patches.
  * [2025-10-07] Attempt #92 (ralph loop i=92) — Result: **SUCCESS** (Phase L3h MOSFLM matrix probe COMPLETE). **H2 (volume mismatch) RULED OUT — V_formula ≈ V_actual to machine precision.**
    Metrics: V_formula=24682.2566301113 Å³, V_actual=24682.2566301114 Å³, Δ=1.45e-11 Å³ (rel_err=5.9×10⁻¹⁶); reciprocal regeneration exact to 15 digits; pytest collection 579 tests.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.md` - Primary evidence document
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log` - 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.log` - Full 43 TRACE_PY lines
      - `reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py` - Adapted harness from scaling_audit pattern
      - `reports/2025-10-cli-flags/phase_l/rot_vector/harness_run.log` - Execution log
      - `reports/2025-10-cli-flags/phase_l/rot_vector/test_collect.log` - Pytest collection validation
    Observations/Hypotheses:
      - **Volume hypothesis eliminated:** PyTorch uses correct V_actual throughout reciprocal→real→reciprocal pipeline per CLAUDE.md Rule #13
      - **Reciprocal recalculation perfect:** Post-misset a*/b*/c* match re-derived a*/b*/c* to 15 significant figures
      - **H2 cannot explain Y-drift:** Volume delta O(1e-11) Å³ is 7 orders of magnitude smaller than b_Y drift O(1e-2) Å
[2025-10-07T18:55:30] tokens used: 120,476

[2025-10-07T18:55:42] thinking

**Analyzing attempt data and file paths**

I'm examining the large document for entries about attempt #98, noting one commit added it but may not appear in the truncated view. I'm checking the plan updates to align with new evidence, especially about instrumentation. The file existence for delta metrics is puzzling—though the file appears present, the script flags it missing, possibly due to relative path or permission issues. I'm considering verifying the exact file path and inspecting related logs and commands to clarify this discrepancy.
[2025-10-07T18:55:48] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:48] bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt' succeeded in 689ms:
2025-10-07 11:46:17
# Phase L3k.3c.2: φ=0 Carryover Evidence Collection
# pytest collection check
env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q
Result: 653 tests collected successfully
[2025-10-07T18:55:48] tokens used: 124,212

[2025-10-07T18:55:53] thinking

**Checking for additional instrumentation**
[2025-10-07T18:55:55] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:55:55] bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log' succeeded in 840ms:
b_base_y 0.7173197865486145
rot_b_phi0_y 0.7173197865486145
rot_b_phi1_y 0.7122385501861572
k_frac_placeholder 980.31396484375
[2025-10-07T18:55:55] tokens used: 124,529

[2025-10-07T18:56:00] thinking

**Checking pyro values reference**
[2025-10-07T18:56:01] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:56:01] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md" succeeded in 723ms:
# φ=0 State Analysis — Phase L3k.3c.2 Evidence

**Date**: 2025-10-07
**Loop**: ralph i=107
**Mode**: Parity / Evidence Collection
**Status**: BLOCKED (awaiting C trace generation per Phase L3k.3b)

## Observed PyTorch Values

From `rot_vector_state_probe.log`:

```
b_base_y 0.7173197865486145
rot_b_phi0_y 0.7173197865486145
rot_b_phi1_y 0.7122385501861572
k_frac_placeholder 980.31396484375
```

### Interpretation

[2025-10-07T18:56:01] tokens used: 124,772

[2025-10-07T18:56:21] thinking

**Analyzing C trace and plan update**

I'm piecing together that the plan needs to run new instrumentation to generate a fresh C trace for the latest timestamp, since the existing trace file isn't recognized due to path or access issues. I’ll update the plan and fix_plan to mark relevant phases as in progress with this new requirement, ensure the attempt numbering aligns with recent commits, and add notes to clarify the need for generating and verifying new instrumentation data instead of reusing old traces.
[2025-10-07T18:56:22] exec bash -lc 'rg "rot_vector_state_probe" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:56:23] bash -lc 'rg "rot_vector_state_probe" -n docs/fix_plan.md' succeeded in 894ms:
503:      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log` — PyTorch φ=0 state probe (SHA256: ef946e94..., b_base_y=0.7173197865486145, rot_b_phi0_y=0.7173197865486145, rot_b_phi1_y=0.7122385501861572, k_frac_placeholder=980.31396484375)
[2025-10-07T18:56:23] tokens used: 127,456

[2025-10-07T18:56:25] thinking

**Checking specific line for entry**
[2025-10-07T18:56:26] exec bash -lc "sed -n '480,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:56:26] bash -lc "sed -n '480,520p' docs/fix_plan.md" succeeded in 708ms:
      - C reference extracted: `golden_suite_generator/nanoBragg.c:3044-3066` (φ rotation loop)
    Observations/Hypotheses:
      - **Root cause identified**: Current PyTorch implementation rotates real AND reciprocal vectors independently during φ rotation (crystal.py:1008-1022)
      - **C semantics**: C code rotates ONLY real vectors (nanoBragg.c:3056-3058), reciprocal vectors implicit through Miller index calculation
      - **Proposed fix**: Rotate only real vectors, recompute reciprocal from rotated real using cross products and V_actual (preserves metric duality per CLAUDE Rule #13)
      - **Implementation strategy**: Remove lines 1014-1022 (independent reciprocal rotation), add cross product computation after real rotation (lines ~1012)
      - **Verification thresholds documented**: b_Y drift ≤1e-6, k_frac ≤1e-6, correlation ≥0.9995, sum_ratio 0.99–1.01 (fix_checklist.md VG-1⇢VG-5)
      - Mode: Docs → implementation deferred to next code-focused loop per input.md guidance
    Next Actions:
      1. Implementation loop (Mode: TDD or standard): Execute Phase L3k.2 (add C-code docstring per CLAUDE Rule #11, implement reciprocal recomputation)
      2. After code changes: Execute Phase L3k.3 (VG-1⇢VG-5 verification gates with per-φ traces, pytest lattice, nb-compare, delta audit)
      3. After gates pass: Execute Phase L3k.4 (log implementation Attempt with metrics, update plan/fix_plan, prepare Phase L4)
  * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
    Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
    Artifacts:
      - `src/nanobrag_torch/models/crystal.py:1008-1035` — Fixed φ rotation implementation (Step 1: rotate only real vectors; Step 2: recompute reciprocal via cross products and V_actual)
      - `src/nanobrag_torch/models/crystal.py:1010-1013` — Added C-code reference comment (nanoBragg.c:3056-3058)
      - Test results: tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c PASSED (5.79s)
      - Test results: 57 crystal/geometry tests PASSED (test_at_geo*.py, test_crystal_geometry.py, test_at_crystal_absolute.py)
      - Collection: 653 tests collected successfully
[2025-10-07T18:56:26] tokens used: 127,782

[2025-10-07T18:56:33] thinking

**Analyzing plan discrepancies and file presence**
[2025-10-07T18:56:33] exec bash -lc 'git ls-files reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:56:34] bash -lc 'git ls-files reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log' succeeded in 680ms:
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log
[2025-10-07T18:56:34] tokens used: 129,592

[2025-10-07T18:56:52] thinking

**Adjusting plan to match latest attempt**
[2025-10-07T18:56:53] tokens used: 130,751

[2025-10-07T18:56:58] thinking

**Preparing patch for plan.md update**
[2025-10-07T18:57:01] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -4,2 +4,3 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
[2025-10-07T18:57:01] apply_patch(auto_approved=true) exited 0 in 17ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T18:57:01] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..47d677fe74a17ae63708d4893f92ece0788ccfc7
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.

[2025-10-07T18:57:01] tokens used: 131,458
[2025-10-07T18:57:01] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..47d677fe74a17ae63708d4893f92ece0788ccfc7
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.


[2025-10-07T18:57:05] thinking

**Updating verification gate table row**
[2025-10-07T18:57:09] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -287,3 +287,3 @@
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
[2025-10-07T18:57:09] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T18:57:09] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..a75b52e837389745d5e23543cbe2510d3b2d648c
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,7 +285,7 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 

[2025-10-07T18:57:09] tokens used: 132,382
[2025-10-07T18:57:09] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..a75b52e837389745d5e23543cbe2510d3b2d648c
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,7 +285,7 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 


[2025-10-07T18:57:14] thinking

**Updating checklist entries**
[2025-10-07T18:57:25] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -294,4 +294,4 @@
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
@@ -304,4 +304,4 @@
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
[2025-10-07T18:57:25] apply_patch(auto_approved=true) exited 0 in 36ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T18:57:25] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T18:57:25] tokens used: 134,204
[2025-10-07T18:57:25] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:57:35] thinking

**Updating plan and next actions in docs**

I’m aligning the plan to reference the replaced table states and ensuring the synergy for phase L3k.3c is clear. I need to revise `docs/fix_plan.md`, especially the CLI-FLAGS section’s “Next Actions” list, to reflect fresh instructions like regenerating traces for the 20251123 run, updating diagnosis with deltas for L3k.3c.2, and clarifying subsequent steps. I’ll carefully edit that bullet list to improve clarity and ensure consistency with our current process.
[2025-10-07T18:57:40] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -460,5 +460,5 @@
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
[2025-10-07T18:57:40] apply_patch(auto_approved=true) exited 0 in 25ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T18:57:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T18:57:40] tokens used: 136,561
[2025-10-07T18:57:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:57:50] thinking

**Clarifying plan update and input.md preparation**

I’m making sure the plan updates consistently reference all past attempts and statuses, especially attempt #108. Before producing the `input.md` and instructions for Ralph, I need to gather relevant mappings, command references, and documentation to accurately guide next steps like regenerating C traces and pairing with pyro. This requires checking earlier commands and scripts so the instructions are clear and actionable.
[2025-10-07T18:57:52] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/commands.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:57:53] bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/commands.txt' exited 1 in 899ms:
cat: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/commands.txt: No such file or directory
[2025-10-07T18:57:53] tokens used: 138,403
[2025-10-07T18:57:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:57:54] thinking

**Checking folder for commands file**
[2025-10-07T18:57:58] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:57:59] bash -lc 'ls reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839' succeeded in 725ms:
c_trace_phi_202510070839.log
comparison_stdout.txt
comparison_summary.md
diagnosis.md
trace_py_rot_vector_202510070839.log
trace_py_rot_vector_202510070839_per_phi.json
trace_py_rot_vector_202510070839_per_phi.log
[2025-10-07T18:57:59] tokens used: 139,245
[2025-10-07T18:57:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:02] thinking

**Searching for C trace commands**
[2025-10-07T18:58:02] exec bash -lc 'rg "TRACE_C_PHI" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:03] bash -lc 'rg "TRACE_C_PHI" -n' succeeded in 793ms:
input.md:61:        if 'TRACE_C_PHI phi_tic=0' in line:
input.md:71:- Compare against C trace lines: use `grep -n "TRACE_C_PHI phi_tic=0" ...` and `grep -n "TRACE_C_PHI phi_tic=9" ...` to extract the reference values; capture snippets in phi0_state_analysis.md with computed deltas (Δb_y ≈ +4.57e-2 Å, Δk_frac ≈ +2.28).
docs/fix_plan.md:461:1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
docs/fix_plan.md:517:      1. Execute Phase L3k.3b: Instrument golden_suite_generator/nanoBragg.c to emit TRACE_C_PHI for all φ steps, rebuild, run with supervisor command
docs/fix_plan.md:594:  * [2025-10-07] Attempt #101 (ralph loop i=101) — Result: **SUCCESS** (Phase L3k.3b per-φ trace regeneration COMPLETE). **TRACE_C_PHI instrumentation confirmed active; per-φ comparison identifies φ=0 initialization bug.**
docs/fix_plan.md:595:    Metrics: PyTorch k_frac drift Δk_max=0.018088 at φ_tic=0 (exceeds threshold <1e-6); φ_tic=1-9 within tolerance (Δk<3e-5); C comparison UNBLOCKED (10 TRACE_C_PHI lines captured); pytest collection 655 tests (no regression).
docs/fix_plan.md:597:      - C trace: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log (13K, 10 TRACE_C_PHI lines, φ_tic=0-9)
docs/fix_plan.md:605:      - C binary: golden_suite_generator/nanoBragg (confirmed up-to-date with TRACE_C_PHI instrumentation at lines 3156-3160)
docs/fix_plan.md:607:      - **TRACE_C_PHI PRESENT**: C binary already had per-φ instrumentation; required `-trace_pixel 685 1039` flag to activate (not included in original supervisor command)
docs/fix_plan.md:643:      - **C reference documented**: Comments reference authoritative C trace (c_trace_phi_202510070839.log TRACE_C_PHI phi_tic=0)
docs/fix_plan.md:865:      - **Per-φ evidence missing:** C trace shows oscillating `TRACE_C_PHI` entries (lines 280-287) that sum to the negative lattice factor; the current PyTorch artifact (`reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_per_phi.log`) contains no `TRACE_PY_PHI` lines despite simulator hooks, so the harness/instrumentation needs to be rerun or repaired
docs/fix_plan.md:867:    Next Actions: Instrument per-φ `TRACE_PY_PHI` logging for `_compute_structure_factor_components`, compare against `TRACE_C_PHI` (same pixel), and update plan tasks L3e/L3f before touching simulator code.
docs/fix_plan.md:1194:      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log` - C per-φ trace (TRACE_C_PHI instrumentation)
docs/fix_plan.md:1197:      - `golden_suite_generator/nanoBragg.c:3156-3160` - Added TRACE_C_PHI instrumentation to log phi_tic, phi_deg, k_frac, F_latt_b, F_latt per φ step
plans/active/cli-noise-pix0/plan.md:5:- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
plans/active/cli-noise-pix0/plan.md:7:- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
plans/active/cli-noise-pix0/plan.md:21:- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
plans/active/cli-noise-pix0/plan.md:212:| K3e | Capture per-φ Miller index parity | [D] | ✅ 2025-10-06 Attempt #45 (ralph). Created `scripts/trace_per_phi.py`, generated PyTorch trace (`per_phi_pytorch_20251006-151228.json`), added TRACE_C_PHI to nanoBragg.c:3156-3160, ran C trace, compared via `scripts/compare_per_phi_traces.py`. **Finding:** Δk≈6.042 at φ=0° (C k_frac=−3.857, Py k_frac=−9.899), persists across all φ steps. **Root cause:** Not a φ-sampling issue—base lattice vectors or scattering geometry differ before φ rotation. |
plans/active/cli-noise-pix0/plan.md:288:| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
plans/active/cli-noise-pix0/plan.md:295:| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
[2025-10-07T18:58:03] tokens used: 140,299
[2025-10-07T18:58:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:08] thinking

**Ensuring plan consistency and preparing input.md**

I'm keeping the plan consistent with previous gap snapshot notes about instrumentation, verifying clarity despite some historical contradictions. Next, I'll compose `input.md` including sections like summary, Mode (set to Parity), Focus (targeting `CLI-FLAGS-003` with specific phase), and Branch—checking which branch is current to note properly.
[2025-10-07T18:58:09] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:10] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 759ms:
feature/spec-based-2
[2025-10-07T18:58:10] tokens used: 142,327
[2025-10-07T18:58:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:19] thinking

**Analyzing test mapping and instrumentation plans**
[2025-10-07T18:58:20] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:21] bash -lc 'cat input.md' succeeded in 743ms:
Summary: Capture φ=0 state carryover evidence and outline a vectorized parity fix for CLI-FLAGS-003 before touching simulator code.
Mode: Parity
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q; tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c (expected red until carryover fix)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (L3k.3c update); reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json
Do Now: CLI-FLAGS-003 (Handle -nonoise and -pix0_vector_mm) — execute Phase L3k.3c.2 by collecting φ=0 carryover evidence, drafting the vectorized fix plan in diagnosis.md, logging all commands + hashes, generating delta metrics, then run env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q to confirm the harness still imports.
If Blocked: If A.mat or scaled.hkl are unavailable, switch to the existing C/Py traces under reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/, document the gap in diagnosis.md, capture a stub entry in commands.txt explaining the missing assets, update sha256.txt accordingly, emit a placeholder delta_metrics.json noting the missing data, and log a new Attempt referencing the dependency issue before proceeding.
Priorities & Rationale:
- docs/fix_plan.md:450 — CLI-FLAGS-003 next actions require L3k.3c evidence prior to code edits so the parity gate stays honest.
- plans/active/cli-noise-pix0/plan.md:274 — L3k.3c.2 mandates documenting the φ=0 carryover using trace comparisons and a proposed remediation path.
- golden_suite_generator/nanoBragg.c:3040 — Reveals the `if(phi!=0.0)` guard that leaves ap/bp/cp stale at φ=0, which explains the 0.6716 Å reference value.
- src/nanobrag_torch/models/crystal.py:1057 — Current Python loop is an interim hack; today’s memo must call out the requirement to re-vectorize with tensor masks.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md — VG-1.4 stays red until the carryover story is captured with artifacts; update references accordingly.
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/comparison_summary_20251119.md — Earlier findings already describe the φ drift; append the new evidence to close the loop.
- docs/debugging/debugging.md §Parallel Trace Comparison Rule — Governs how the new log and analysis should be structured and stored.
- docs/architecture/pytorch_design.md#vectorization-strategy — Any future fix must honor the batched flows; note this explicitly in the diagnosis write-up.
- specs/spec-a-parallel.md §Lattice rotation profile — Confirms φ sweeps must mimic the C ordering during parity work.
- docs/development/c_to_pytorch_config_map.md — Validates spindle-axis orientation and phi sequencing; cite it to prove the configuration is correct.
- docs/development/testing_strategy.md §1.4 — Device/dtype neutrality reminder; the eventual fix cannot reintroduce CPU-only code or Python loops.
[2025-10-07T18:58:21] tokens used: 142,878
[2025-10-07T18:58:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:27] thinking

**Preparing new input instructions**
[2025-10-07T18:58:27] exec bash -lc 'rg "trace_pixel" -n reports/2025-10-cli-flags -g"*.txt"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:28] bash -lc 'rg "trace_pixel" -n reports/2025-10-cli-flags -g"*.txt"' succeeded in 729ms:
reports/2025-10-cli-flags/phase_b/argparse/help.txt:36:                 [-printout] [-printout_pixel f s] [-trace_pixel s f]
reports/2025-10-cli-flags/phase_b/argparse/help.txt:176:  -trace_pixel s f      Instrument trace for a pixel
reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_stderr_cli.txt:36:                 [-printout] [-printout_pixel f s] [-trace_pixel s f]
[2025-10-07T18:58:28] tokens used: 144,791
[2025-10-07T18:58:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:31] thinking

**Inspecting trace_harness.py script**
[2025-10-07T18:58:32] exec bash -lc "sed -n '1,200p' scripts/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:33] bash -lc "sed -n '1,200p' scripts/trace_harness.py" exited 1 in 850ms:
sed: scripts/trace_harness.py: No such file or directory
[2025-10-07T18:58:33] tokens used: 145,122
[2025-10-07T18:58:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:37] thinking

**Searching for script location**
[2025-10-07T18:58:38] exec bash -lc 'rg "trace_harness" -l' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:39] bash -lc 'rg "trace_harness" -l' succeeded in 785ms:
docs/fix_plan.md
galph_memory.md
plans/active/cli-noise-pix0/plan.md
reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/summary.md
reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/implementation.md
reports/2025-10-cli-flags/phase_h6/pivot_fix.md
reports/2025-10-cli-flags/phase_h/implementation_notes.md
reports/2025-10-cli-flags/phase_h6/post_fix/attempt_notes.md
reports/2025-10-cli-flags/phase_h/implementation/pix0_mapping_analysis.md
reports/2025-10-cli-flags/phase_e/trace_summary.md
reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md
reports/2025-10-cli-flags/phase_e/trace_comparison.md
reports/2025-10-cli-flags/phase_g/trace_summary_orientation.md
reports/2025-10-cli-flags/phase_e/pytorch_instrumentation_notes.md
reports/2025-10-cli-flags/phase_k/base_lattice/README.md
reports/2025-10-cli-flags/phase_h5/parity_summary.md
reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md
reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md
reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md
reports/2025-10-cli-flags/phase_l/rot_vector/harness_run.log
[2025-10-07T18:58:39] tokens used: 145,334
[2025-10-07T18:58:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:42] thinking

**Checking for relevant scripts**
[2025-10-07T18:58:43] exec bash -lc "sed -n '1,160p' scripts/compare_per_phi_traces.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:58:43] bash -lc "sed -n '1,160p' scripts/compare_per_phi_traces.py" succeeded in 780ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Compare C vs PyTorch per-φ traces

Identifies the first φ where Δk exceeds tolerance (5e-4) to isolate the φ-grid mismatch.
"""

import json
import sys
from pathlib import Path

def parse_c_trace(log_file):
    """Parse C trace log file."""
    traces = []
    with open(log_file) as f:
        for line in f:
            if line.startswith('TRACE_C_PHI'):
                parts = line.split()
                traces.append({
                    'phi_tic': int(parts[1].split('=')[1]),
[2025-10-07T18:58:43] tokens used: 146,218
[2025-10-07T18:58:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:58:55] thinking

**Preparing execution instructions for C logging and nanoBragg commands**

I’m putting together detailed steps for Ralph to run the C binary with the original long-term goal flags plus the instrumentation flags like `-trace_pixel 685 1039` and `-printout`. I need to confirm building instrumentation with `make` in `golden_suite_generator` and clarify how to generate pyro per-phi JSON data using available scripts. I’ll make sure the instructions reflect all these nuances.
[2025-10-07T18:58:59] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:00] bash -lc 'ls reports/2025-10-cli-flags/phase_l/rot_vector/per_phi_postfix' succeeded in 935ms:
env_snapshot.txt
listing.txt
pytest_vg2_refresh.log
sha256.txt
trace_py_rot_vector_per_phi.json
trace_py_rot_vector_per_phi.log
trace_py_rot_vector_postfix.log
vg3_metrics.txt
[2025-10-07T18:59:00] tokens used: 149,275
[2025-10-07T18:59:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:59:03] thinking

**Searching for trace generation script**
[2025-10-07T18:59:04] exec bash -lc 'rg "trace_py_rot_vector_per_phi" -l scripts' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:05] bash -lc 'rg "trace_py_rot_vector_per_phi" -l scripts' exited 1 in 825ms:

[2025-10-07T18:59:05] tokens used: 149,588
[2025-10-07T18:59:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:59:07] thinking

**Searching for per_phi script**
[2025-10-07T18:59:08] exec bash -lc 'ls scripts' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:09] bash -lc 'ls scripts' succeeded in 778ms:
__init__.py
__pycache__
analyze_at012_plateau.py
analyze_correlation_fix.py
analyze_peak_displacement_at012.py
analyze_pix0_discrepancy.py
analyze_radial_intensity.py
analyze_rotation_offset.py
analyze_simple_cubic_gap.py
analyze_tilted_correlation.py
analyze_tilted_mismatch.py
analyze_triclinic_correlation.py
benchmarks
c_reference_runner.py
c_reference_utils.py
check_detector_pix0.py
compare_c_py_intensity_scaling.py
compare_c_python_pix0.py
compare_detector_geometry.py
compare_per_phi_traces.py
[2025-10-07T18:59:09] tokens used: 149,720
[2025-10-07T18:59:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:59:12] thinking

**Inspecting trace_per_phi.py script**
[2025-10-07T18:59:13] exec bash -lc "sed -n '1,200p' scripts/trace_per_phi.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:14] bash -lc "sed -n '1,200p' scripts/trace_per_phi.py" succeeded in 731ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Per-φ Miller Index Parity

This script captures Miller index + lattice factor traces for each φ step
(φ_tic=0…9) to diagnose the φ-grid mismatch between C and PyTorch.

Context: PyTorch reports k≈1.9997 (φ=0°) while C reports k≈1.9928 (φ=0.09°),
causing a 21.6% F_latt_b inflation. This per-φ dump will isolate the first φ
where Δk exceeds tolerance.

Usage:
    PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py \\
        --outdir reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/

Output:
    - per_phi_pytorch.json: Full per-φ trace data (PyTorch)
    - per_phi_summary.md: Comparison summary with first divergence
    - (C trace expected from instrumented nanoBragg.c separately)
"""
[2025-10-07T18:59:14] tokens used: 150,894
[2025-10-07T18:59:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:59:18] thinking

**Verifying pixel coordinates and script parameters**
[2025-10-07T18:59:19] exec bash -lc 'rg "685" reports/2025-10-cli-flags/phase_l/rot_vector -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:20] bash -lc 'rg "685" reports/2025-10-cli-flags/phase_l/rot_vector -n' succeeded in 725ms:
reports/2025-10-cli-flags/phase_l/rot_vector/harness_run.log:17:Pixel (685, 1039) final intensity: 2.38140349778394e-07
reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.log:9:TRACE_PY: diffracted_vec -0.151496685856205 0.38421867854754 -0.910727599905575
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md:23:  -trace_pixel 685 1039
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md:36:  --config supervisor --pixel 685 1039 \
reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log:157:        This test computes k_frac at φ=0 for the target pixel (685, 1039)
reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log:228:        # Target pixel from C trace (slow=685, fast=1039)
reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log:230:        target_s = 685
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/trace_py_rot_vector_202510070839_per_phi.json:4:    "slow": 685,
reports/2025-10-cli-flags/phase_l/rot_vector/trace_run.log:15:Pixel (685, 1039) final intensity: 2.38167999100369e-07
reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:19:| VG-1.4 | Per-φ JSON stability | Implementation Loop | ⚠️ | `per_phi_postfix/trace_py_rot_vector_per_phi.json`; **NEW: `base_vector_debug/202510070839/`** | k_frac span=0.018088 (threshold <1e-6 NOT MET); 10 φ entries captured. **Attempt #101 (2025-10-07 08:41):** Regenerated traces under `base_vector_debug/202510070839/` with **TRACE_C_PHI PRESENT**. C binary instrumented with `-trace_pixel 685 1039` flag. Comparison shows first divergence at φ_tic=0 (Δk=1.811649e-02), but φ_tic=1-9 within tolerance (Δk<3e-5). Documented in `diagnosis.md`. Root cause: PyTorch φ=0 initialization differs from C; φ>0 steps show correct parity. |
reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.md:15:- **Pixel**: (685, 1039)
reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.md:28:  --pixel 685 1039 \
reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.md:103:- `mosflm_matrix_probe.log` — 43 TRACE_PY lines (full simulator trace for pixel 685,1039)
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log:155:TRACE_CONFIG: tracing pixel (spixel=685, fpixel=1039)
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log:264:TRACE_C: scattering_vec_A_inv -1556230686.07047 3933478972.39855 913944567.685604
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log:266:TRACE_C: rot_b_angstroms -11.4986968432508 0.671588233999813 -29.1143056268565
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/trace_py_rot_vector_202510070839.log:9:TRACE_PY: diffracted_vec -0.151496685856205 0.38421867854754 -0.910727599905575
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/pytest_phi0.log:142:        This test computes k_frac at φ=0 for the target pixel (685, 1039)
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/pytest_phi0.log:212:        # Target pixel from C trace (slow=685, fast=1039)
reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/pytest_phi0.log:214:        target_s = 685
[2025-10-07T18:59:20] tokens used: 153,371
[2025-10-07T18:59:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:59:25] thinking

**Opening trace harness file**
[2025-10-07T18:59:26] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:27] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 782ms:
#!/usr/bin/env python
"""
Phase L3h MOSFLM Matrix Probe Harness

Extends the scaling trace harness to log MOSFLM reciprocal vectors at key stages:
- Before misset rotation
- After reciprocal→real reconstruction
- After real→reciprocal re-derivation

This captures the evidence needed to diagnose the Y-component drift in real-space
vectors identified in Phase L3f/L3g.

Date: 2025-10-07 (replayed from galph loop i=92)
Engineer: Ralph (evidence-only mode per input.md)
Plan Reference: plans/active/cli-noise-pix0/plan.md Phase L3h
"""

import argparse
import json
import sys
[2025-10-07T18:59:27] tokens used: 194,706
[2025-10-07T18:59:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T18:59:34] thinking

**Outlining trace generation and comparison steps**

I’m piecing together how to instruct running the harness to produce pyro traces, rebuild the golden C binary, generate new trace logs, and then compare them with the Python traces using the provided scripts. I’ll review relevant commands and docs to ensure the user can reproduce and update the trace data accurately.
[2025-10-07T18:59:36] exec bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T18:59:36] bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md" succeeded in 782ms:
# CLI-FLAGS-003 Phase L3k.3b Diagnosis
## Timestamp: 2025-10-07 08:41 UTC
## Tag: 202510070839

## Objective
Regenerate per-φ C and PyTorch traces with TRACE_C_PHI instrumentation active to diagnose φ rotation parity issues.

## C Trace Generation
**Command:**
```bash
./golden_suite_generator/nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl \
  -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 \
  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 \
  -distance 231.274660 -lambda 0.976800 -pixel 0.172 \
  -detpixels_x 2463 -detpixels_y 2527 \
  -odet_vector -0.000088 0.004914 -0.999988 \
  -sdet_vector -0.005998 -0.999970 -0.004913 \
  -fdet_vector 0.999982 -0.005998 -0.000118 \
  -pix0_vector_mm -216.336293 215.205512 -230.200866 \
  -beam_vector 0.00051387949 0.0 -0.99999986 \
[2025-10-07T18:59:36] tokens used: 199,953
[2025-10-07T18:59:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:02] thinking

**Composing detailed input.md instructions**

There's a lot here! I'm outlining step-by-step instructions for rerunning commands to regenerate traces under a new timestamp, carefully specifying expected outputs, commands to run in sequence, handling fallback scenarios, and including priority notes and pitfalls so the user can execute this precisely. Now I’m focusing on crafting the actual input.md content to replace the old one with about 100–200 lines covering all these details.
[2025-10-07T19:00:25] exec bash -lc "cat <<'EOF' > input.md
Summary: Regenerate the C per-φ trace and recompute VG-1 deltas so CLI-FLAGS-003 Phase L3k.3b is unblocked.
Mode: Parity
Focus: CLI-FLAGS-003 Phase L3k.3b TRACE_C_PHI rerun
Branch: feature/spec-based-2
Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_stdout_20251123.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (L3k.3c.2 update); reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
Do Now: CLI-FLAGS-003 (Handle -nonoise and -pix0_vector_mm) — execute Phase L3k.3b by rebuilding the instrumented C binary, rerunning the supervisor command with -trace_pixel 685 1039 to capture "'`c_trace_phi_20251123.log`, regenerating the PyTorch per-φ trace via `trace_harness.py`, and re-running `scripts/compare_per_phi_traces.py` so VG-1 deltas populate under the 20251123 timestamp before recording the updated metrics in diagnosis.md. Finish with env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q.
If Blocked: If the instrumented C binary is missing TRACE_C_PHI output, re-apply the instrumentation patch (see golden_suite_generator/nanoBragg.c:3156-3160), rerun `make -C golden_suite_generator`, and retry the command. If C still cannot be rebuilt on this machine, copy `c_trace_phi_202510070839.log` into the 20251123 directory, document the reuse decision in diagnosis.md, flag the delta computation as provisional inside delta_metrics.json, and stop after updating commands.txt + sha256.txt.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:288 — L3k.3 requires a fresh TRACE_C_PHI run paired with the 20251123 PyTorch probe before VG-1 can progress.
- plans/active/cli-noise-pix0/plan.md:300 — L3k.3c.2 stays [P] until Δb_y/Δk_frac are measured and logged.
- docs/fix_plan.md:458 — Next actions explicitly call for regenerating the C per-φ trace and updating diagnosis.md before moving on to nb-compare.
- docs/development/c_to_pytorch_config_map.md — Confirms the supervisor spindle axis / detector parameters that must match when regenerating parity traces.
- docs/debugging/debugging.md §Parallel Trace Comparison Rule — Governs the trace capture workflow and artifact naming.
How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123
- date '"'+%F %T TRACE START' | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
- make -C golden_suite_generator -j | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
- NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg \\
  -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 \\
  -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 \\
  -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 \\
  -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 \\
  -odet_vector -0.000088 0.004914 -0.999988 \\
  -sdet_vector -0.005998 -0.999970 -0.004913 \\
  -fdet_vector 0.999982 -0.005998 -0.000118 \\
  -pix0_vector_mm -216.336293 215.205512 -230.200866 \\
  -beam_vector 0.00051387949 0.0 -0.99999986 \\
  -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 \\
  -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 \\
  -trace_pixel 685 1039 \\
  2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python \\
  reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py \\
  --config supervisor --pixel 685 1039 \\
  --out reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123.log \\
  --device cpu --dtype float64 \\
  | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py \\
  reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json \\
  reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log \\
  | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_stdout_20251123.txt
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python - <<'PY'
import json, pathlib
base = pathlib.Path('reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123')
py = json.load((base/'trace_py_rot_vector_20251123_per_phi.json').open())['per_phi_entries']
with (base/'c_trace_phi_20251123.log').open() as fh:
    cvals = [float(line.split()[3].split('=')[1]) for line in fh if line.startswith('TRACE_C_PHI')]
metrics = {
    'status': 'ok',
    'phi0': {
        'py_k_frac': py[0]['k_frac'],
        'c_k_frac': cvals[0],
        'delta_k': py[0]['k_frac'] - cvals[0]
    },
    'phi9': {
        'py_k_frac': py[9]['k_frac'],
        'c_k_frac': cvals[9],
        'delta_k': py[9]['k_frac'] - cvals[9]
    }
}
(base/'delta_metrics.json').write_text(json.dumps(metrics, indent=2) + '\\n')
PY
- sha256sum reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/* > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
- Update reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md with an L3k.3c.2 entry summarising the new Δk values, the command hashes, and the remediation path (φ==0 mask or equivalent vectorized carryover) before touching simulator code.
- env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
Pitfalls To Avoid:
- Do not edit simulator/crystal code this loop; evidence only.
- Keep all command transcripts in commands.txt with timestamps so the rerun is auditable.
- Ensure NB_C_BIN points at golden_suite_generator/nanoBragg; the root binary lacks TRACE_C_PHI instrumentation.
- Maintain device/dtype neutrality when running harness scripts (stay on cpu/float64 as specified).
- Do not overwrite older base_vector_debug directories; add the new timestamp alongside 202510070839/20251122.
- Preserve failing pytest expectations in tests/test_cli_scaling_phi0.py; no edits to mask the red baseline.
- Run compare_per_phi_traces.py after both traces exist; it will raise if paths are wrong.
- Append to diagnosis.md rather than replacing earlier sections so chronology is intact.
- Regenerate sha256.txt after all files are in place to avoid stale hashes.
- Keep delta_metrics.json formatted as JSON (no trailing comments) for future automation.
Pointers:
- plans/active/cli-noise-pix0/plan.md:288-307 — Current L3k.3 checklist and subtasks.
- docs/fix_plan.md:458-466 — Next actions aligned with this loop.
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md — Reference commands from the prior successful TRACE_C_PHI run.
- golden_suite_generator/nanoBragg.c:3156-3160 — TRACE_C_PHI instrumentation hook.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md#L19 — VG-1.4 acceptance thresholds to update after deltas recorded.
Next Up: Once VG-1 deltas are in place, move to Phase L3k.3d to repair the nb-compare ROI totals.
EOF
" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:26] bash -lc "cat <<'EOF' > input.md
Summary: Regenerate the C per-φ trace and recompute VG-1 deltas so CLI-FLAGS-003 Phase L3k.3b is unblocked.
Mode: Parity
Focus: CLI-FLAGS-003 Phase L3k.3b TRACE_C_PHI rerun
Branch: feature/spec-based-2
Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_stdout_20251123.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (L3k.3c.2 update); reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
Do Now: CLI-FLAGS-003 (Handle -nonoise and -pix0_vector_mm) — execute Phase L3k.3b by rebuilding the instrumented C binary, rerunning the supervisor command with -trace_pixel 685 1039 to capture "'`c_trace_phi_20251123.log`, regenerating the PyTorch per-φ trace via `trace_harness.py`, and re-running `scripts/compare_per_phi_traces.py` so VG-1 deltas populate under the 20251123 timestamp before recording the updated metrics in diagnosis.md. Finish with env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q.
If Blocked: If the instrumented C binary is missing TRACE_C_PHI output, re-apply the instrumentation patch (see golden_suite_generator/nanoBragg.c:3156-3160), rerun `make -C golden_suite_generator`, and retry the command. If C still cannot be rebuilt on this machine, copy `c_trace_phi_202510070839.log` into the 20251123 directory, document the reuse decision in diagnosis.md, flag the delta computation as provisional inside delta_metrics.json, and stop after updating commands.txt + sha256.txt.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:288 — L3k.3 requires a fresh TRACE_C_PHI run paired with the 20251123 PyTorch probe before VG-1 can progress.
- plans/active/cli-noise-pix0/plan.md:300 — L3k.3c.2 stays [P] until Δb_y/Δk_frac are measured and logged.
- docs/fix_plan.md:458 — Next actions explicitly call for regenerating the C per-φ trace and updating diagnosis.md before moving on to nb-compare.
- docs/development/c_to_pytorch_config_map.md — Confirms the supervisor spindle axis / detector parameters that must match when regenerating parity traces.
- docs/debugging/debugging.md §Parallel Trace Comparison Rule — Governs the trace capture workflow and artifact naming.
How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123
- date '"'+%F %T TRACE START' | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
- make -C golden_suite_generator -j | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
- NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg \\
  -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 \\
  -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 \\
  -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 \\
  -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 \\
  -odet_vector -0.000088 0.004914 -0.999988 \\
  -sdet_vector -0.005998 -0.999970 -0.004913 \\
  -fdet_vector 0.999982 -0.005998 -0.000118 \\
  -pix0_vector_mm -216.336293 215.205512 -230.200866 \\
  -beam_vector 0.00051387949 0.0 -0.99999986 \\
  -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 \\
  -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 \\
  -trace_pixel 685 1039 \\
  2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python \\
  reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py \\
  --config supervisor --pixel 685 1039 \\
  --out reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123.log \\
  --device cpu --dtype float64 \\
  | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py \\
  reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json \\
  reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log \\
  | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_stdout_20251123.txt
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python - <<'PY'
import json, pathlib
base = pathlib.Path('reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123')
py = json.load((base/'trace_py_rot_vector_20251123_per_phi.json').open())['per_phi_entries']
with (base/'c_trace_phi_20251123.log').open() as fh:
    cvals = [float(line.split()[3].split('=')[1]) for line in fh if line.startswith('TRACE_C_PHI')]
metrics = {
    'status': 'ok',
    'phi0': {
        'py_k_frac': py[0]['k_frac'],
        'c_k_frac': cvals[0],
        'delta_k': py[0]['k_frac'] - cvals[0]
    },
    'phi9': {
        'py_k_frac': py[9]['k_frac'],
        'c_k_frac': cvals[9],
        'delta_k': py[9]['k_frac'] - cvals[9]
    }
}
(base/'delta_metrics.json').write_text(json.dumps(metrics, indent=2) + '\\n')
PY
- sha256sum reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/* > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
- Update reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md with an L3k.3c.2 entry summarising the new Δk values, the command hashes, and the remediation path (φ==0 mask or equivalent vectorized carryover) before touching simulator code.
- env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q | tee -a reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt
Pitfalls To Avoid:
- Do not edit simulator/crystal code this loop; evidence only.
- Keep all command transcripts in commands.txt with timestamps so the rerun is auditable.
- Ensure NB_C_BIN points at golden_suite_generator/nanoBragg; the root binary lacks TRACE_C_PHI instrumentation.
- Maintain device/dtype neutrality when running harness scripts (stay on cpu/float64 as specified).
- Do not overwrite older base_vector_debug directories; add the new timestamp alongside 202510070839/20251122.
- Preserve failing pytest expectations in tests/test_cli_scaling_phi0.py; no edits to mask the red baseline.
- Run compare_per_phi_traces.py after both traces exist; it will raise if paths are wrong.
- Append to diagnosis.md rather than replacing earlier sections so chronology is intact.
- Regenerate sha256.txt after all files are in place to avoid stale hashes.
- Keep delta_metrics.json formatted as JSON (no trailing comments) for future automation.
Pointers:
- plans/active/cli-noise-pix0/plan.md:288-307 — Current L3k.3 checklist and subtasks.
- docs/fix_plan.md:458-466 — Next actions aligned with this loop.
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md — Reference commands from the prior successful TRACE_C_PHI run.
- golden_suite_generator/nanoBragg.c:3156-3160 — TRACE_C_PHI instrumentation hook.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md#L19 — VG-1.4 acceptance thresholds to update after deltas recorded.
Next Up: Once VG-1 deltas are in place, move to Phase L3k.3d to repair the nb-compare ROI totals.
EOF
" succeeded in 906ms:

[2025-10-07T19:00:26] tokens used: 205,131
[2025-10-07T19:00:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:29] thinking

**Verifying JSON key structure**
[2025-10-07T19:00:30] exec bash -lc 'head -n 5 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:31] bash -lc 'head -n 5 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json' succeeded in 757ms:
{
  "timestamp": "2025-10-07T15:26:48.995393Z",
  "pixel": {
    "slow": 685,
    "fast": 1039
[2025-10-07T19:00:31] tokens used: 208,411
[2025-10-07T19:00:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:34] thinking

**Inspecting key structure**
[2025-10-07T19:00:35] exec bash -lc "rg 'per_phi' -n reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:36] bash -lc "rg 'per_phi' -n reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/trace_py_rot_vector_20251122_per_phi.json" succeeded in 700ms:
10:  "per_phi_entries": [
[2025-10-07T19:00:36] tokens used: 208,680
[2025-10-07T19:00:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:41] thinking

**Verifying key usage and commit steps**
[2025-10-07T19:00:42] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:43] bash -lc 'git status --short' succeeded in 741ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T19:00:43] tokens used: 209,040
[2025-10-07T19:00:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:46] thinking

**Reviewing plan diff**
[2025-10-07T19:00:46] exec bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:47] bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' succeeded in 685ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c..5cbbc79 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@ Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, al
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
[2025-10-07T19:00:47] tokens used: 209,308
[2025-10-07T19:00:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:50] thinking

**Verifying code modifications**
[2025-10-07T19:00:50] exec bash -lc "git diff plans/active/cli-noise-pix0/plan.md | sed -n '300,360p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:51] bash -lc "git diff plans/active/cli-noise-pix0/plan.md | sed -n '300,360p'" succeeded in 719ms:

[2025-10-07T19:00:51] tokens used: 211,005
[2025-10-07T19:00:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:55] thinking

**Checking diff for documentation fix**
[2025-10-07T19:00:56] exec bash -lc "git diff docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:00:57] bash -lc "git diff docs/fix_plan.md | sed -n '440,520p'" succeeded in 707ms:

[2025-10-07T19:00:57] tokens used: 211,144
[2025-10-07T19:00:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:00:59] thinking

**Checking diff visibility issue**
[2025-10-07T19:01:00] exec bash -lc 'git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:00] bash -lc 'git diff docs/fix_plan.md' succeeded in 706ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c09..3c11a9b 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
[2025-10-07T19:01:00] tokens used: 211,378
[2025-10-07T19:01:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:01:09] thinking

**Confirming diff and documentation references**
[2025-10-07T19:01:14] exec bash -lc 'git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:15] bash -lc 'git diff input.md' succeeded in 672ms:
diff --git a/input.md b/input.md
index 1e2b4f0..6b7d2db 100644
--- a/input.md
+++ b/input.md
@@ -1,114 +1,84 @@
-Summary: Capture φ=0 state carryover evidence and outline a vectorized parity fix for CLI-FLAGS-003 before touching simulator code.
+Summary: Regenerate the C per-φ trace and recompute VG-1 deltas so CLI-FLAGS-003 Phase L3k.3b is unblocked.
 Mode: Parity
-Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
+Focus: CLI-FLAGS-003 Phase L3k.3b TRACE_C_PHI rerun
 Branch: feature/spec-based-2
-Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q; tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c (expected red until carryover fix)
-Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (L3k.3c update); reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json
-Do Now: CLI-FLAGS-003 (Handle -nonoise and -pix0_vector_mm) — execute Phase L3k.3c.2 by collecting φ=0 carryover evidence, drafting the vectorized fix plan in diagnosis.md, logging all commands + hashes, generating delta metrics, then run env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q to confirm the harness still imports.
-If Blocked: If A.mat or scaled.hkl are unavailable, switch to the existing C/Py traces under reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/, document the gap in diagnosis.md, capture a stub entry in commands.txt explaining the missing assets, update sha256.txt accordingly, emit a placeholder delta_metrics.json noting the missing data, and log a new Attempt referencing the dependency issue before proceeding.
+Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q
+Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_stdout_20251123.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (L3k.3c.2 update); reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt
+Do Now: CLI-FLAGS-003 (Handle -nonoise and -pix0_vector_mm) — execute Phase L3k.3b by rebuilding the instrumented C binary, rerunning the supervisor command with -trace_pixel 685 1039 to capture `c_trace_phi_20251123.log`, regenerating the PyTorch per-φ trace via `trace_harness.py`, and re-running `scripts/compare_per_phi_traces.py` so VG-1 deltas populate under the 20251123 timestamp before recording the updated metrics in diagnosis.md. Finish with env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q.
+If Blocked: If the instrumented C binary is missing TRACE_C_PHI output, re-apply the instrumentation patch (see golden_suite_generator/nanoBragg.c:3156-3160), rerun `make -C golden_suite_generator`, and retry the command. If C still cannot be rebuilt on this machine, copy `c_trace_phi_202510070839.log` into the 20251123 directory, document the reuse decision in diagnosis.md, flag the delta computation as provisional inside delta_metrics.json, and stop after updating commands.txt + sha256.txt.
 Priorities & Rationale:
[2025-10-07T19:01:15] tokens used: 212,474
[2025-10-07T19:01:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:01:19] thinking

**Preparing memory update entry**

I'll summarize the evaluation of Ralph's recent work, noting progress and blockers, then append a concise new entry to `galph_memory.md` with the plan update, observations, instructions, and timeline referencing attempt #108 dated 2025-11-23.
[2025-10-07T19:01:21] exec bash -lc "date -u +'%Y-%m-%d'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:21] bash -lc "date -u +'%Y-%m-%d'" succeeded in 690ms:
2025-10-07
[2025-10-07T19:01:21] tokens used: 215,519
[2025-10-07T19:01:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:01:30] thinking

**Aligning timeline dates**
[2025-10-07T19:01:35] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-23 (galph loop — L3k.3b rerun planning)
- Reviewed Attempt #108 (commit 526f56d) — evidence captured the Py φ=0 probe but "'`delta_metrics.json` stayed BLOCKED because no fresh TRACE_C_PHI log accompanied the new timestamp; prior c-trace lives under 202510070839.
- Updated `plans/active/cli-noise-pix0/plan.md` (L3k.3 row + checklist) to reopen L3k.3b and mark L3k.3c.1 complete, with L3k.3c.2 now pointing at the pending Δk computation once C trace is regenerated.
- Refreshed `docs/fix_plan.md` Next Actions to (1) rerun TRACE_C_PHI for 20251123, (2) compute Δb_y/Δk_frac, (3) then return to nb-compare repairs.
- Authored new input.md steering Ralph to rebuild the C binary, rerun the supervisor command with `-trace_pixel 685 1039`, regenerate Py per-φ traces, run `scripts/compare_per_phi_traces.py`, update `delta_metrics.json`, and log the results before moving back to nb-compare.
- Feedback on Ralph’s recent work: Attempt #103 correctly restored the red guard tests; Attempt #108 gathered Py-only data but stalled without the paired C trace. Next loop should focus on producing the coeval TRACE_C_PHI artifact so VG-1.4 can flip from ⚠️ to actionable metrics.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:35] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-23 (galph loop — L3k.3b rerun planning)
- Reviewed Attempt #108 (commit 526f56d) — evidence captured the Py φ=0 probe but "'`delta_metrics.json` stayed BLOCKED because no fresh TRACE_C_PHI log accompanied the new timestamp; prior c-trace lives under 202510070839.
- Updated `plans/active/cli-noise-pix0/plan.md` (L3k.3 row + checklist) to reopen L3k.3b and mark L3k.3c.1 complete, with L3k.3c.2 now pointing at the pending Δk computation once C trace is regenerated.
- Refreshed `docs/fix_plan.md` Next Actions to (1) rerun TRACE_C_PHI for 20251123, (2) compute Δb_y/Δk_frac, (3) then return to nb-compare repairs.
- Authored new input.md steering Ralph to rebuild the C binary, rerun the supervisor command with `-trace_pixel 685 1039`, regenerate Py per-φ traces, run `scripts/compare_per_phi_traces.py`, update `delta_metrics.json`, and log the results before moving back to nb-compare.
- Feedback on Ralph’s recent work: Attempt #103 correctly restored the red guard tests; Attempt #108 gathered Py-only data but stalled without the paired C trace. Next loop should focus on producing the coeval TRACE_C_PHI artifact so VG-1.4 can flip from ⚠️ to actionable metrics.
EOF
' succeeded in 857ms:

[2025-10-07T19:01:35] tokens used: 216,274
[2025-10-07T19:01:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:01:41] thinking

**Preparing commit for updated files**
[2025-10-07T19:01:42] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:42] bash -lc 'git status --short' succeeded in 736ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
?? docs/bugs/c-bugs-unified.md
[2025-10-07T19:01:42] tokens used: 217,512
[2025-10-07T19:01:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:01:51] thinking

**Handling unexpected untracked documentation**
[2025-10-07T19:01:52] exec bash -lc 'git add docs/fix_plan.md input.md plans/active/cli-noise-pix0/plan.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:53] bash -lc 'git add docs/fix_plan.md input.md plans/active/cli-noise-pix0/plan.md galph_memory.md' succeeded in 710ms:

[2025-10-07T19:01:53] tokens used: 218,042
[2025-10-07T19:01:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:01:55] thinking

**Verifying repository status**
[2025-10-07T19:01:55] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:01:56] bash -lc 'git status --short' succeeded in 753ms:
M  docs/fix_plan.md
M  galph_memory.md
M  input.md
M  plans/active/cli-noise-pix0/plan.md
?? docs/bugs/c-bugs-unified.md
[2025-10-07T19:01:56] tokens used: 218,290
[2025-10-07T19:01:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:02:01] thinking

**Preparing commit message**
[2025-10-07T19:02:01] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 L3k.3b rerun plan - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:02:02] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 L3k.3b rerun plan - tests: not run"' succeeded in 713ms:
[feature/spec-based-2 4a74ca6] SUPERVISOR: CLI-FLAGS-003 L3k.3b rerun plan - tests: not run
 4 files changed, 92 insertions(+), 114 deletions(-)
[2025-10-07T19:02:02] tokens used: 218,565
[2025-10-07T19:02:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:02:07] thinking

**Pushing changes**
[2025-10-07T19:02:08] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:02:10] bash -lc 'git push' succeeded in 2.05s:
To github.com:hoidn/nanoBragg.git
   0da3a72..4a74ca6  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T19:02:10] tokens used: 218,762
[2025-10-07T19:02:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:02:18] thinking

**Preparing final message details**

I'll summarize the plan update, include feedback on Ralph's recent commit noting no regressions, mention the untracked file as a heads-up, reference instructions from input.md, and cite approximate line numbers for modifications in the plan and fix_plan files.
[2025-10-07T19:02:19] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,200p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:02:20] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,200p'" succeeded in 897ms:
     1	## Context
     2	- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
     3	- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
     4	- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
     5	- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
     6	- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
     7	- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
     8	- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
     9	- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
    10	- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
    11	- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
    12	- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
    13	- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
    14	- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
    15	- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
    16	- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
    17	- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
    18	- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
    19	- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
    20	- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
[2025-10-07T19:02:20] tokens used: 219,208
[2025-10-07T19:02:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:02:23] thinking

**Checking specific lines for table references**
[2025-10-07T19:02:24] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '280,340p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:02:25] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '280,340p'" succeeded in 772ms:
   280	Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
   281	Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
   282	Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
   283	
   284	| ID | Task Description | State | How/Why & Guidance |
   285	| --- | --- | --- | --- |
   286	| L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
   287	| L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
   288	| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
   289	
   290	#### L3k.3 Checklist — φ=0 Verification Recovery
   291	
   292	| ID | Task Description | State | How/Why & Guidance |
   293	| --- | --- | --- | --- |
   294	| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
   295	| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
   296	| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
   297	| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
   298	| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
   299	| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
[2025-10-07T19:02:25] tokens used: 238,544
[2025-10-07T19:02:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:02:30] thinking

**Checking lines in fix_plan.md**
[2025-10-07T19:02:31] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '450,480p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T19:02:32] bash -lc "nl -ba docs/fix_plan.md | sed -n '450,480p'" succeeded in 700ms:
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
   460	- Next Actions (2025-11-22 refresh → galph):
   461	1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
   462	2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
   463	3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
   464	- Attempts History:
   465	  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
   466	    Metrics: Planning-only (no tests executed).
   467	    Artifacts:
   468	      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
   469	      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T19:02:32] tokens used: 244,136
[2025-10-07T19:02:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T19:02:45] thinking

**Preparing final response structure**
[2025-10-07T19:02:45] codex

**Plan Sync**
- Added the 2025‑11‑23 gap snapshot so the L3k.3b dependence on a fresh TRACE_C_PHI log is explicit (`plans/active/cli-noise-pix0/plan.md:5`).
- Reframed L3k.3 guidance to fold in Attempts #99 and #108, directing Ralph to reopen VG‑1 with a new 20251123 trace pair (`plans/active/cli-noise-pix0/plan.md:288`).
- Reopened checklist row L3k.3b and marked L3k.3c.1 done while flagging L3k.3c.2 as in-progress pending the Δk computation from the regenerated C trace (`plans/active/cli-noise-pix0/plan.md:295` and `plans/active/cli-noise-pix0/plan.md:305-306`).
- Aligned CLI-FLAGS-003 Next Actions with that plan, sequencing (1) TRACE_C_PHI rerun, (2) Δb_y/Δk_frac logging, (3) nb-compare repair before L3k.3e (`docs/fix_plan.md:450-463`).

**Ralph Review**
- Recent work (d8881ab, 526f56d) restored the red φ=0 guard tests and captured the Py-only φ=0 probe, but Attempt #108 stalled without the companion C trace; the new plan/input now point directly at that gap.
- No regressions spotted in surrounding commits; evidence collection stayed in documentation/report space.
- Untracked file `docs/bugs/c-bugs-unified.md` predates this loop; left untouched.

**Next Steps**
- `input.md` now instructs Ralph to rebuild the instrumented C binary, rerun the supervisor command with `-trace_pixel 685 1039`, regenerate the Py per-φ trace via `trace_harness.py`, run `scripts/compare_per_phi_traces.py`, update `delta_metrics.json`, refresh diagnosis.md, capture hashes, and finish with `env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q`.
- Natural follow-up after VG‑1 deltas land: tackle Phase L3k.3d’s nb-compare ROI parity once the trace pair is in place.

Tests: not run.
[2025-10-07T19:02:55] tokens used: 246,409
[2025-10-07T19:02:55] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 68f0c0900bab6a4ff119b80466fdc403e79371b2..3c11a9b187c83b8849517cc2a482a565b5d53a1c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,9 +458,9 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
-2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
-3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
+1. Phase L3k.3b — Regenerate the C per-φ trace that pairs with the 20251123 PyTorch probe: rebuild the instrumented `golden_suite_generator/nanoBragg`, rerun the supervisor command with `TRACE_C_PHI` enabled, drop the output under `base_vector_debug/20251123/`, and rerun `scripts/compare_per_phi_traces.py` so `delta_metrics.json` and VG-1 entries show numeric deltas instead of `status="BLOCKED"`. If reuse of the 202510070839 trace is preferred, update the harness paths accordingly and record the decision in `diagnosis.md` and `commands.txt`.
+2. Phase L3k.3c.2 — With both traces available, compute Δb_y and Δk_frac for φ=0/φ₉, update `diagnosis.md` plus `fix_checklist.md` VG-1.4 with the measured gaps, and outline the vectorized carryover remediation (e.g., φ==0 mask) before touching simulator code.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 697213c22a8aa4ca9e3334051eec8d842e1a4942..5cbbc79438df99559db4d0ea9d434fd7ee5c1617
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,6 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
+- Gap snapshot update (2025-11-23): Attempt #108 gathered fresh PyTorch φ=0 state probes (reports/.../20251123/) confirming the rotation fix keeps φ=0 identical to base vectors, but the per-φ comparison pipeline could not locate a coeval C trace. Phase L3k.3b must regenerate TRACE_C_PHI output (or retarget the script to the existing 202510070839 asset) before VG-1 deltas can be recomputed.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
 - Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
@@ -284,15 +285,15 @@
 | --- | --- | --- | --- |
 | L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
 | L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
-| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, but Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5 with C ROI sum≈0). Work through the checklist below: keep the φ=0 tests red, pinpoint the residual rotation error, repair the nb-compare ROI path, then rerun VG-1/VG-3/VG-4 and finish VG-5 documentation before moving on. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. Re-open VG-1 workflow: re-run TRACE_C_PHI under the 20251123 timestamp (or update the harness to consume the 202510070839 asset), regenerate per-φ comparisons, then continue through the nb-compare ROI repair and documentation gates. Artifacts live under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |
 
 #### L3k.3 Checklist — φ=0 Verification Recovery
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #101 (2025-10-07 08:41) — TRACE_C_PHI instrumentation active (`c_trace_phi_202510070839.log`), Py traces regenerated, comparison shows φ_tic=0 Δk≈1.81e-2 while φ>0 ticks stay within 2.85e-5. Findings captured in `diagnosis.md`, `comparison_summary.md`, and `fix_checklist.md` VG-1.4. |
-| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Restore the C-expected assertions (allowing them to fail), then implement the fix so φ=0 parity matches the C trace. After the fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Update `comparison_summary.md` so the narrative matches the φ_tic table and capture fresh artifacts under `per_phi_postfix/` before flipping VG-1 rows to ✅. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [P] | Attempt #101 captured the initial TRACE_C_PHI run, but Attempt #108's probe shows the current harness cannot locate a C trace under the new `base_vector_debug/20251123/` workspace. Regenerate TRACE_C_PHI output with the supervisor command (preferred: emit a fresh 20251123 log; acceptable fallback: update the script to consume `.../202510070839/c_trace_phi_202510070839.log`) and re-run `scripts/compare_per_phi_traces.py` so VG-1 deltas populate instead of returning "BLOCKED." Record the rerun under a new timestamp and update `delta_metrics.json` + `fix_checklist.md` accordingly. |
+| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
 | L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
@@ -301,8 +302,8 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L3k.3c.1 | Reinstate C-aligned assertions | [ ] | Revert `tests/test_cli_scaling_phi0.py` to check against the C trace values (`rot_b_y=0.671588…`, `k_frac=-0.607255…`) captured in `c_trace_phi_202510070839.log`. Leave the test red and record the failing pytest output under `reports/2025-10-cli-flags/phase_l/rot_vector/pytest_phi0_regression.log`. Update docs/fix_plan.md Attempt history to note the regression. |
-| L3k.3c.2 | Diagnose φ=0 state carryover | [ ] | Using `trace_py_rot_vector_202510070839.log` vs `c_trace_phi_202510070839.log`, pinpoint where PyTorch resets the lattice vectors while the C code retains prior state. Confirm whether C reuses `ap/bp/cp` without reinitialisation. Document findings in `diagnosis.md` and propose the minimal PyTorch change (or C-side workaround) required to emulate the C behavior. |
+| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
+| L3k.3c.2 | Diagnose φ=0 state carryover | [P] | Attempt #108 logged the PyTorch φ=0 probe (`base_vector_debug/20251123/rot_vector_state_probe.log`) and documented that the rotation fix returns the base vector at φ=0 while φ₁ begins the expected drift. Finish the diagnosis by pairing this probe with a matching C TRACE_C_PHI run (L3k.3b), compute Δb_y/Δk_frac via `compare_per_phi_traces.py`, and update `diagnosis.md` with concrete deltas plus the chosen vectorized remediation (e.g., φ==0 mask preserving prior-state values). |
 | L3k.3c.3 | Implement + validate fix | [ ] | After agreeing on the fix approach, run the per-φ harness and targeted pytest selector (`tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`). Store passing artifacts under a new timestamped directory in `base_vector_debug/` and update `fix_checklist.md` VG-1.4 to ✅ once thresholds are met. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

Reading prompt from stdin...
Auto-commit blocked by forbidden dirty paths: docs/bugs/c-bugs-unified.md
[sync] Doc/meta whitelist violation detected; marking post-run as failed.
To github.com:hoidn/nanoBragg.git
   4a74ca6..1c4e6b1  HEAD -> feature/spec-based-2
Supervisor iteration failed rc=0. Stamped failure and pushed; exiting.
