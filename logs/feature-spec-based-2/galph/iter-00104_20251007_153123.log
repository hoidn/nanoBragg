Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=104
To github.com:hoidn/nanoBragg.git
   9824468..2bff7e7  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T15:31:27] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T15:31:27] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T15:31:30] thinking

**Preparing to run git pull with timeout**
[2025-10-07T15:31:31] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:33] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.05s:
Already up to date.
[2025-10-07T15:31:33] tokens used: 11,927

[2025-10-07T15:31:35] thinking

**Preparing to read galph_memory.md**
[2025-10-07T15:31:36] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:36] bash -lc 'cat galph_memory.md' succeeded in 678ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T15:31:36] tokens used: 12,057

[2025-10-07T15:31:39] thinking

**Starting documentation review**
[2025-10-07T15:31:40] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:40] bash -lc 'cat docs/index.md' succeeded in 676ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T15:31:40] tokens used: 15,831

[2025-10-07T15:31:43] thinking

**Opening specs/spec-a.md**
[2025-10-07T15:31:43] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:44] bash -lc 'cat specs/spec-a.md' succeeded in 670ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T15:31:44] tokens used: 34,421

[2025-10-07T15:31:47] thinking

**Considering additional specs**
[2025-10-07T15:31:48] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:48] bash -lc 'cat arch.md' succeeded in 675ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T15:31:48] tokens used: 36,317

[2025-10-07T15:31:51] thinking

**Reviewing next documentation file**
[2025-10-07T15:31:52] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:52] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 699ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T15:31:52] tokens used: 39,094

[2025-10-07T15:31:54] thinking

**Opening debugging documentation**
[2025-10-07T15:31:55] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:31:55] bash -lc 'cat docs/debugging/debugging.md' succeeded in 701ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T15:31:55] tokens used: 40,982

[2025-10-07T15:31:59] thinking

**Reading docs/fix_plan.md**
[2025-10-07T15:31:59] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:00] bash -lc 'cat docs/fix_plan.md' succeeded in 689ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T15:32:00] tokens used: 43,418

[2025-10-07T15:32:02] thinking

**Noting file truncation and next file**
[2025-10-07T15:32:02] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:03] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 685ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T15:32:03] tokens used: 46,334

[2025-10-07T15:32:05] thinking

**Preparing for detailed plan review**
[2025-10-07T15:32:06] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:07] bash -lc 'ls plans/active' succeeded in 717ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T15:32:07] tokens used: 48,993

[2025-10-07T15:32:10] thinking

**Reviewing plans for CLI features**
[2025-10-07T15:32:11] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:11] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 701ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T15:32:11] tokens used: 49,296

[2025-10-07T15:32:15] thinking

**Examining vectorization plans**
[2025-10-07T15:32:18] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:18] bash -lc 'cat plans/active/vectorization.md' succeeded in 702ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T15:32:18] tokens used: 52,195

[2025-10-07T15:32:23] thinking

**Preparing detailed codebase analysis**
[2025-10-07T15:32:24] exec bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:25] bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 678ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-07T15:32:25] tokens used: 53,878

[2025-10-07T15:32:26] thinking

**Previewing code section near line 450**
[2025-10-07T15:32:27] exec bash -lc "sed -n '450,650p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:28] bash -lc "sed -n '450,650p' docs/fix_plan.md" succeeded in 683ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-22 refresh → galph):
1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T15:32:28] tokens used: 54,178

[2025-10-07T15:32:32] thinking

**Preparing for deep code analysis**
[2025-10-07T15:32:32] exec bash -lc 'rg -n "VECTOR-TRICUBIC-001" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:33] bash -lc 'rg -n "VECTOR-TRICUBIC-001" docs/fix_plan.md' succeeded in 694ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
2008:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-07T15:32:33] tokens used: 57,370

[2025-10-07T15:32:35] thinking

**Requesting section detail**
[2025-10-07T15:32:36] exec bash -lc "sed -n '2008,2300p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:37] bash -lc "sed -n '2008,2300p' docs/fix_plan.md" succeeded in 710ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_progress (Phases A–B complete; Phase C implementation pending)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions (2025-11-21 refresh):
 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
- Attempts History:
  * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
    Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
    Artifacts:
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.collect.log` — Test collection output confirming 3 tests collected
[2025-10-07T15:32:37] tokens used: 57,668

[2025-10-07T15:32:41] thinking

**Planning next steps with coin flip**
[2025-10-07T15:32:42] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:42] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 702ms:
heads
[2025-10-07T15:32:42] tokens used: 60,467

[2025-10-07T15:32:45] thinking

**Reviewing recent commit history**
[2025-10-07T15:32:45] exec bash -lc 'git log --oneline -n 12' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:46] bash -lc 'git log --oneline -n 12' succeeded in 723ms:
2bff7e7 [SYNC i=104] actor=galph status=running
9824468 [SYNC i=104] actor=ralph → next=galph status=ok ralph_commit=3ab16d0
3ab16d0 CLI-FLAGS-003 L3k.3b docs: fix_plan Attempt #101 entry
99594f6 CLI-FLAGS-003 L3k.3b evidence: φ-trace regeneration, C instrumentation gap identified
f319ac8 [SYNC i=103] actor=ralph status=running
4b2bfdb [SYNC i=103] actor=galph → next=ralph status=ok galph_commit=63901c0
63901c0 SUPERVISOR: CLI-FLAGS L3k.3 checklist update - tests: not run
9d3f90d [SYNC i=103] actor=galph status=running
292ce44 [SYNC i=103] actor=ralph → next=galph status=ok ralph_commit=12742e5
12742e5 [SYNC i=102] actor=ralph VECTOR-TRICUBIC-001 Phase C3: shape assertions + device checks - tests: 8 passed, 0 failed
bc754e4 [SYNC i=102] actor=ralph status=running
3b9746b [SYNC i=102] actor=galph → next=ralph status=ok galph_commit=694e383
[2025-10-07T15:32:46] tokens used: 60,710

[2025-10-07T15:32:51] thinking

**Analyzing recent key commits**
[2025-10-07T15:32:51] exec bash -lc 'git show 12742e5' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:52] bash -lc 'git show 12742e5' succeeded in 708ms:
commit 12742e5d9b8a4d86f6df0c506e2f00eba515e15a
Author: ollie <ohoidn>
Date:   Tue Oct 7 08:15:13 2025 -0700

    [SYNC i=102] actor=ralph VECTOR-TRICUBIC-001 Phase C3: shape assertions + device checks - tests: 8 passed, 0 failed

diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 65e4d42..1f3b1b2 100644
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -37,14 +37,14 @@ Implementation notes: capture all Phase C artifacts under `reports/2025-10-vecto
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+| C3 | Add shape assertions & cache hooks | [D] | ✅ Completed 2025-10-07 (Attempt #6). Shape assertions added for `(B, 4, 4, 4)` neighborhoods and output shapes; device consistency checks ensure tensors stay on input device. No explicit caching present in tricubic path. All targeted tests passing (5 gather + 1 acceptance). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, test_at_str_002_phi.log, implementation_notes.md}`. Code refs: `crystal.py:414-427` (shape/device assertions), `crystal.py:440-447` (scalar output assertions), `crystal.py:461-462` (batched fallback assertions). |
 
 #### Phase C3 Verification Checklist
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
[2025-10-07T15:32:52] tokens used: 61,272

[2025-10-07T15:32:55] thinking

**Reviewing commit for regressions**
[2025-10-07T15:32:56] exec bash -lc 'git show 99594f6' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:32:56] bash -lc 'git show 99594f6' succeeded in 719ms:
commit 99594f655e853b351911c0b1fadd1a28142f3233
Author: ollie <ohoidn>
Date:   Tue Oct 7 08:29:25 2025 -0700

    CLI-FLAGS-003 L3k.3b evidence: φ-trace regeneration, C instrumentation gap identified
    
    Evidence-only loop per input.md Do Now. No production code changes.
    
    Changes:
    - Generated fresh per-φ traces under base_vector_debug/20251122/ (10 φ steps, k_frac span=0.018088)
    - Identified C trace lacks TRACE_C_PHI instrumentation (c_trace_mosflm.log contains only static geometry)
    - Fixed compare_per_phi_traces.py to handle 'per_phi_entries' JSON key
    - Documented findings in diagnosis.md with hypotheses and next actions
    - Updated fix_checklist.md VG-1.4 with Attempt #101 notes
    
    Artifacts:
    - reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/*.{log,json,md,txt}
    - scripts/compare_per_phi_traces.py (JSON key compatibility fix)
    
    Metrics:
[2025-10-07T15:32:56] tokens used: 64,250

[2025-10-07T15:33:02] thinking

**Reviewing evidence addition and commit details**
[2025-10-07T15:33:03] exec bash -lc 'git show 3ab16d0' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:33:03] bash -lc 'git show 3ab16d0' succeeded in 690ms:
commit 3ab16d0405f1be74415bafe1b087e7505c5f5b20
Author: ollie <ohoidn>
Date:   Tue Oct 7 08:30:28 2025 -0700

    CLI-FLAGS-003 L3k.3b docs: fix_plan Attempt #101 entry
    
    Evidence-only loop documentation update per prompts/update_fix_plan.md.
    
    Changes:
    - Added Attempt #101 to CLI-FLAGS-003 Attempts History
    - Documented findings: C trace gap (no TRACE_C_PHI instrumentation)
    - Recorded metrics: k_frac drift Δk=0.018088, C comparison blocked
    - Listed all artifacts under base_vector_debug/20251122/
    - Documented observations/hypotheses and next actions
    - Flagged decision point: C instrumentation vs direct fix implementation
    
    References:
    - plans/active/cli-noise-pix0/plan.md:292 (Phase L3k.3b task)
    - reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/diagnosis.md
    - reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md VG-1.4
[2025-10-07T15:33:03] tokens used: 113,298

[2025-10-07T15:33:17] thinking

**Reviewing parity summary inconsistencies**

I’m looking into a new file claiming parity was achieved despite lacking data, which seems contradictory and possibly a bug. I want to verify if the script changed to handle missing data properly and decide if the existing plans for CLI flags and vectorization need updates based on this new info. I’ll check detailed reports to understand the context better before deciding on next steps.
[2025-10-07T15:33:18] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:33:19] bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md' succeeded in 698ms:
# CLI-FLAGS-003 Phase K3e: Per-φ Parity Comparison

**PyTorch:** `trace_py_rot_vector_20251122_per_phi.json`  
**C:**       `c_trace_mosflm.log`  

## Comparison Table

| φ_tic | φ (deg) | C k_frac | PyTorch k_frac | Δk | Status |
|-------|---------|----------|----------------|-------|--------|

## Summary

**✅ PARITY ACHIEVED**

- Max Δk: 0.000000e+00 (< 5e-4 threshold)

## Next Actions

1. Proceed to Phase K3f validation
2. Close Phase K3e with success evidence
[2025-10-07T15:33:19] tokens used: 164,262

[2025-10-07T15:33:54] thinking

**Synthesizing analysis and planning options**

I'm sorting through the current state of plans and recent commits to decide if the next step should update the CLI-FLAGS plan to include missing C instrumentation and fix outdated next actions, since the parity success summary is misleading without per-phi C data. I’m preparing to weigh whether to focus on planning updates or housekeeping to align everything properly before moving forward.
[2025-10-07T15:34:00] exec bash -lc 'cat specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:34:01] bash -lc 'cat specs/spec-a-cli.md' succeeded in 891ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-07T15:34:01] tokens used: 217,193

[2025-10-07T15:34:08] thinking

**Noting to reference architecture docs**
[2025-10-07T15:34:09] exec bash -lc 'head -n 80 docs/architecture/detector.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:34:10] bash -lc 'head -n 80 docs/architecture/detector.md' succeeded in 703ms:
# Detector Architecture Deep Dive

**Status:** Authoritative Specification  
**Last Updated:** Phase 5 Implementation

**⚠️ CRITICAL:** This component uses a [hybrid unit system](#61-critical-hybrid-unit-system-overrides-global-rule) that overrides the global Angstrom-only rule.

This document provides the complete technical specification for the Detector component. For global project rules on units and coordinate systems, see [Global Conventions](./conventions.md).

---

## 1. Overview

The Detector class manages the detector geometry for diffraction simulations, including:
- Position and orientation (basis vectors)
- Pixel coordinate generation and caching
- Support for various detector conventions (MOSFLM, XDS)
- Dynamic geometry with rotations and tilts
- Full differentiability for optimization workflows

[2025-10-07T15:34:10] tokens used: 227,991

[2025-10-07T15:34:37] thinking

**Updating plan with instrumentation details**

I’m working on revising the plan to address blocked per-φ comparison due to missing C instrumentation by adding new sub-tasks and updating context and checklist tables. This includes clarifying that the existing summary is inaccurate, instructing instrumentation steps, and aligning with other docs before finalizing the patch.

[2025-10-07T15:34:39] thinking

**Previewing plan near L3k.3 table**
[2025-10-07T15:34:39] exec bash -lc "sed -n '220,360p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:34:40] bash -lc "sed -n '220,360p' plans/active/cli-noise-pix0/plan.md" succeeded in 879ms:
| K3f4 | Record root cause & fix outline | [D] | 2025-11-08 update appended to `base_lattice/summary.md` documenting the placeholder-volume root cause and the 46ba36b fix; evidence lives under `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/`. Coordinate docs/fix_plan Next Actions so K3g3 focuses on scaling parity. |

#### Phase K3g — MOSFLM real-vector rescale implementation
Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
| K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |

### Phase L — Supervisor Command Normalization
Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
[2025-10-07T15:34:40] tokens used: 230,261

[2025-10-07T15:34:48] thinking

**Preparing patch to update plan and context**
[2025-10-07T15:34:49] exec bash -lc 'rg -n "2025-11-15" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:34:50] bash -lc 'rg -n "2025-11-15" plans/active/cli-noise-pix0/plan.md' succeeded in 694ms:
18:- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
[2025-10-07T15:34:50] tokens used: 232,168

[2025-10-07T15:34:52] thinking

**Reviewing placement for new bullet**
[2025-10-07T15:34:53] exec bash -lc "sed -n '1,60p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:34:54] bash -lc "sed -n '1,60p' plans/active/cli-noise-pix0/plan.md" succeeded in 683ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T15:34:54] tokens used: 232,580

[2025-10-07T15:34:57] thinking

**Adding new timeline bullet point**
[2025-10-07T15:35:01] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./plans/active/cli-noise-pix0/plan.md
@@ -18,2 +18,3 @@
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
[2025-10-07T15:35:01] apply_patch(auto_approved=true) exited 0 in 16ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:35:01] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..95411089409eb7356276b6720d2475ea6d0c811e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.

[2025-10-07T15:35:01] tokens used: 234,531
[2025-10-07T15:35:01] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..95411089409eb7356276b6720d2475ea6d0c811e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.


[2025-10-07T15:35:18] thinking

**Updating L3k.3 table rows**

I’m planning to revise the L3k.3 table by expanding the `L3k.3b` row to include instrumentation steps and detailed instructions for trace comparison. I’ll add a new subtask row `L3k.3b1` to track the instrumentation specifically, ensuring the instructions remain clear and follow the checklist formatting rules. I’m also thinking about how to format the detailed steps within the table cell, possibly using multi-sentence text to keep it clean.
[2025-10-07T15:35:23] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./plans/active/cli-noise-pix0/plan.md
@@ -292,3 +292,3 @@
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into a fresh timestamped subdir, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>` and treat missing/empty C entries as a **failure** (fix `comparison_summary.md` so no ✅ banner appears while C data is absent). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
[2025-10-07T15:35:23] apply_patch(auto_approved=true) exited 0 in 22ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:35:23] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..94a4ed854304484da3846fb85397a791af0ecbd8
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into a fresh timestamped subdir, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>` and treat missing/empty C entries as a **failure** (fix `comparison_summary.md` so no ✅ banner appears while C data is absent). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |

[2025-10-07T15:35:23] tokens used: 236,148
[2025-10-07T15:35:23] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..94a4ed854304484da3846fb85397a791af0ecbd8
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into a fresh timestamped subdir, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>` and treat missing/empty C entries as a **failure** (fix `comparison_summary.md` so no ✅ banner appears while C data is absent). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:35:28] thinking

**Planning storage path updates**
[2025-10-07T15:35:32] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./plans/active/cli-noise-pix0/plan.md
@@ -292,3 +292,3 @@
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into a fresh timestamped subdir, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>` and treat missing/empty C entries as a **failure** (fix `comparison_summary.md` so no ✅ banner appears while C data is absent). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
[2025-10-07T15:35:32] apply_patch(auto_approved=true) exited 0 in 20ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:35:32] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |

[2025-10-07T15:35:32] tokens used: 247,172
[2025-10-07T15:35:32] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:35:38] thinking

**Updating fix_plan.md with instrumentation changes**
[2025-10-07T15:35:43] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./docs/fix_plan.md
@@ -460,3 +460,3 @@
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
[2025-10-07T15:35:43] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T15:35:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |

[2025-10-07T15:35:43] tokens used: 249,595
[2025-10-07T15:35:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:35:50] thinking

**Preparing input.md with mode selection**
[2025-10-07T15:35:51] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:35:52] bash -lc 'cat input.md' succeeded in 948ms:
Summary: Regenerate φ-trace artifacts to isolate the residual rotation drift before rerunning VG gates.
Mode: Parity
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q (collection only, defer execution)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
Do Now: CLI-FLAGS-003 · Phase L3k.3b — regenerate per-φ traces; run PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_20251122.log --device cpu --dtype float64
If Blocked: Capture the failure mode in base_vector_debug/20251122/blockers.md with command + stderr, then run pytest --collect-only -q and stash the log beside it.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:279 — L3k.3 checklist now demands a fresh diagnosis before VG reruns.
- docs/fix_plan.md:458 — Next Actions call for L3k.3b evidence (per-φ harness diff) ahead of nb-compare fixes.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:20 — VG-1.4 remains ⚠️, so we must quantify the drift.
- specs/spec-a-cli.md §Sampling — confirms φ grid (osc=0.1, phisteps=10) to match in harness.
- docs/development/testing_strategy.md §2 — keep parity evidence organized under reports/ with reproducible commands.

How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_20251122.log --device cpu --dtype float64
- mv trace_py_rot_vector_20251122.log reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/
[2025-10-07T15:35:52] tokens used: 251,180
[2025-10-07T15:35:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:35:55] thinking

**Preparing to update input.md with new instructions**
[2025-10-07T15:35:56] exec bash -lc 'git branch --show-current' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:35:57] bash -lc 'git branch --show-current' succeeded in 679ms:
feature/spec-based-2
[2025-10-07T15:35:57] tokens used: 252,456
[2025-10-07T15:35:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:36:17] thinking

**Preparing detailed instrumentation instructions**

I’m assembling a thorough input that includes a clear summary, mode, focus, branch, mapped tests, artifact paths with timestamp placeholders, and detailed “Do Now” steps for instrumenting C code, rebuilding, running the trace capture command with environment variables, rerunning PyTorch tests, and updating comparison summaries—all organized with priorities, how-to steps, pitfalls, file pointers, and optionally next tasks. This will ensure the user has precise, step-by-step guidance for successful instrumentation and trace collection.
[2025-10-07T15:36:40] exec bash -lc "cat <<'EOF' > input.md
Summary: Instrument the C binary for per-φ traces and regenerate comparison artifacts without reporting false parity.
Mode: Parity
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/, reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/c_trace_phi_<timestamp>.log, reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/diagnosis.md
Do Now: CLI-FLAGS-003 · Phase L3k.3b — add TRACE_C_PHI instrumentation to golden_suite_generator/nanoBragg.c, rebuild, then run NB_C_BIN=./golden_suite_generator/nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/c_trace_phi_<timestamp>.log
If Blocked: Capture the failing stdout/patch under reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/blocked.md, stash any partial changes, run pytest --collect-only -q, and log the selector + failure text in blocked.md.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:33 — L3k.3b now mandates C instrumentation plus truthful BLOCKED reporting before VG gates.
- docs/fix_plan.md:458 — Next Actions call out the missing TRACE_C_PHI data and the false ✅ summary that must be corrected.
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md — currently misreports parity because C trace was empty.
- specs/spec-a-cli.md:129 — Confirms φ sampling (osc=0.1 with phisteps=10) that the harness and C run must match.
- docs/debugging/debugging.md:41 — Parallel trace SOP requires C and PyTorch traces before diagnosing physics discrepancies.

How-To Map:
- export TAG="'$(date +%Y%m%d%H%M)
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG
- Edit golden_suite_generator/nanoBragg.c inside the φ loop (see nanoBragg.c:3044-3068) to emit TRACE_C_PHI lines for h,k,l, rot_b, k_frac, F_latt.
- timeout 120 make -C golden_suite_generator
- NB_C_BIN=./golden_suite_generator/nanoBragg KMP_DUPLICATE_LIB_OK=TRUE ./golden_suite_generator/nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/c_trace_phi_$TAG.log
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_$TAG.log --device cpu --dtype float64
- mv trace_py_rot_vector_$TAG.log reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/
- mv reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_$TAG_per_phi.* reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/
- python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/trace_py_rot_vector_$TAG_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/c_trace_phi_$TAG.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/comparison_stdout.txt
- Edit comparison_summary.md so it reports BLOCKED when C entries are missing, then write diagnosis.md capturing k_frac deltas, TRACE_C availability, and next hypotheses. Copy updates into fix_checklist.md VG-1.4. Finish with pytest --collect-only -q | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/pytest_collect.log

Pitfalls To Avoid:
- Do not leave TRACE_C instrumentation in repo without noting it; keep changes under golden_suite_generator/ only.
- No ✅ wording in comparison outputs when C data is absent—explicitly mark BLOCKED.
- Ensure NB_C_BIN points at the rebuilt binary; don’t accidentally invoke the frozen root ./nanoBragg.
- Maintain CPU + float64 parity; avoid CUDA for these traces.
- Preserve prior artifacts; use the new $TAG subdir rather than overwriting 20251122.
- Keep vectorization (no manual loops) when touching trace harness; follow docs/architecture/pytorch_design.md.
- Remember Protected Assets from docs/index.md (input.md, loop.sh, etc.) when editing.
- If make fails, do not partially commit; document the failure and revert instrumentation.
- Don’t run nb-compare yet; ROI work lives in L3k.3d.
- Avoid editing production PyTorch code in this loop.

Pointers:
- plans/active/cli-noise-pix0/plan.md:33
- docs/fix_plan.md:455
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md
- docs/debugging/debugging.md:41
- specs/spec-a-cli.md:90

Next Up:
1. L3k.3d — repair nb-compare ROI metrics after per-φ parity is unblocked.
2. L3k.3e — finalize documentation and prepare the L3k.4 attempt log.
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:36:41] bash -lc "cat <<'EOF' > input.md
Summary: Instrument the C binary for per-φ traces and regenerate comparison artifacts without reporting false parity.
Mode: Parity
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/, reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/c_trace_phi_<timestamp>.log, reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/diagnosis.md
Do Now: CLI-FLAGS-003 · Phase L3k.3b — add TRACE_C_PHI instrumentation to golden_suite_generator/nanoBragg.c, rebuild, then run NB_C_BIN=./golden_suite_generator/nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/c_trace_phi_<timestamp>.log
If Blocked: Capture the failing stdout/patch under reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<timestamp>/blocked.md, stash any partial changes, run pytest --collect-only -q, and log the selector + failure text in blocked.md.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:33 — L3k.3b now mandates C instrumentation plus truthful BLOCKED reporting before VG gates.
- docs/fix_plan.md:458 — Next Actions call out the missing TRACE_C_PHI data and the false ✅ summary that must be corrected.
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md — currently misreports parity because C trace was empty.
- specs/spec-a-cli.md:129 — Confirms φ sampling (osc=0.1 with phisteps=10) that the harness and C run must match.
- docs/debugging/debugging.md:41 — Parallel trace SOP requires C and PyTorch traces before diagnosing physics discrepancies.

How-To Map:
- export TAG="'$(date +%Y%m%d%H%M)
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG
- Edit golden_suite_generator/nanoBragg.c inside the φ loop (see nanoBragg.c:3044-3068) to emit TRACE_C_PHI lines for h,k,l, rot_b, k_frac, F_latt.
- timeout 120 make -C golden_suite_generator
- NB_C_BIN=./golden_suite_generator/nanoBragg KMP_DUPLICATE_LIB_OK=TRUE ./golden_suite_generator/nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/c_trace_phi_$TAG.log
- PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --out trace_py_rot_vector_$TAG.log --device cpu --dtype float64
- mv trace_py_rot_vector_$TAG.log reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/
- mv reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_$TAG_per_phi.* reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/
- python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/trace_py_rot_vector_$TAG_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/c_trace_phi_$TAG.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/comparison_stdout.txt
- Edit comparison_summary.md so it reports BLOCKED when C entries are missing, then write diagnosis.md capturing k_frac deltas, TRACE_C availability, and next hypotheses. Copy updates into fix_checklist.md VG-1.4. Finish with pytest --collect-only -q | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/$TAG/pytest_collect.log

Pitfalls To Avoid:
- Do not leave TRACE_C instrumentation in repo without noting it; keep changes under golden_suite_generator/ only.
- No ✅ wording in comparison outputs when C data is absent—explicitly mark BLOCKED.
- Ensure NB_C_BIN points at the rebuilt binary; don’t accidentally invoke the frozen root ./nanoBragg.
- Maintain CPU + float64 parity; avoid CUDA for these traces.
- Preserve prior artifacts; use the new $TAG subdir rather than overwriting 20251122.
- Keep vectorization (no manual loops) when touching trace harness; follow docs/architecture/pytorch_design.md.
- Remember Protected Assets from docs/index.md (input.md, loop.sh, etc.) when editing.
- If make fails, do not partially commit; document the failure and revert instrumentation.
- Don’t run nb-compare yet; ROI work lives in L3k.3d.
- Avoid editing production PyTorch code in this loop.

Pointers:
- plans/active/cli-noise-pix0/plan.md:33
- docs/fix_plan.md:455
- reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md
- docs/debugging/debugging.md:41
- specs/spec-a-cli.md:90

Next Up:
1. L3k.3d — repair nb-compare ROI metrics after per-φ parity is unblocked.
2. L3k.3e — finalize documentation and prepare the L3k.4 attempt log.
EOF
' succeeded in 881ms:

[2025-10-07T15:36:41] tokens used: 255,740
[2025-10-07T15:36:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:36:54] thinking

**Reviewing command redundancy and planning commits**
[2025-10-07T15:37:02] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:03] bash -lc 'git status --short' succeeded in 925ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:37:03] tokens used: 258,210
[2025-10-07T15:37:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:06] thinking

**Preparing to update galph_memory.md**
[2025-10-07T15:37:07] exec bash -lc 'tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:08] bash -lc 'tail -n 40 galph_memory.md' succeeded in 722ms:
- Replaced `input.md` (Docs mode, 100 lines) to steer Ralph toward executing Phase L3k, running pytest/nb-compare with the canonical command, and documenting VG-1⇢VG-5 artifacts.
- Expect Ralph to draft the implementation memo, add the docstring reference, implement the φ rotation patch, drive `fix_checklist.md` to ✅, and log Attempt #96 before attempting Phase L4 parity.
## 2025-11-21 (galph loop — CLI-FLAGS L3k triage)
- Reviewed Phase L3k memo + recent traces; PyTorch still rotates reciprocal vectors during φ, yielding k_frac drift (≈−0.59 vs C −0.607) and F_latt sign flip (+1.35 vs −2.38) in `trace_py_scaling_20251117.log`. Root cause remains mismatched φ rotation pipeline.
- Identified secondary nuisance: per-φ harness already built; thresholds summarized (k_frac Δ≤1e-6, F_latt sign match, b_Y Δ≤1e-6) for VG-1; instrumentation command retained.
- Selected Debug/Parity focus on CLI-FLAGS-003; next confirm step is to implement Phase L3k reciprocal recompute, then re-run per-φ traces, targeted pytest lattice selector, and ROI nb-compare per checklist.
- Authored `input.md` (Parity) directing Ralph to add the nanoBragg.c docstring, rotate only real vectors, recompute reciprocals, run harness + pytest + nb-compare, update fix_checklist + fix_plan, and archive old traces. Artifacts to land under `reports/2025-10-cli-flags/phase_l/rot_vector/` subfolders.
- No new plans required; vectorization plan already current (Phase C2/C3). Await Phase L3k evidence before scheduling Phase L4 rerun.
## 2025-11-21 (galph loop — CLI-FLAGS Next Actions refresh)
- Validated Phase L3k memo + plan remain authoritative; noted docs/fix_plan.md still referenced L3k.1 even though memo is complete.
- Updated `docs/fix_plan.md:458-460` so Next Actions now point at L3k.2 implementation, L3k.3 verification, and L3k.4 logging; no other ledger edits.
- Rewrote `input.md` (Parity mode) to focus Ralph on executing L3k.2 with the targeted pytest selector and checklist-driven nb-compare/trace steps; artifacts to stay under `reports/2025-10-cli-flags/phase_l/`.
- Expect Ralph to deliver the φ-rotation patch next loop, follow fix_checklist VG-1..VG-5, and record a new Attempt before we reopen Phase L4 parity testing.
## 2025-11-21 (galph loop — L3k.3 evidence prep)
- Refreshed CLI-FLAGS-003 Next Actions (docs/fix_plan.md:458) to focus on completing VG-1/VG-3/VG-4 and the VG-5 doc updates before logging L3k.4.
- Marked VG-2 ✅ in rot_vector/fix_checklist.md and updated status block with 2025-11-21 timestamp; remaining gates explicit for Ralph.
- Rewrote input.md (Parity mode) steering Ralph through per-φ harness capture, compare_per_phi_traces.py, nb-compare metrics, checksum/env snapshots, and documentation updates.
- Expect Ralph to generate new per_phi_postfix/ artefacts, flip VG-1⇢VG-5, append Attempt entry, then proceed to Phase L4 rerun next loop.
## 2025-11-21 (galph loop — L3k φ=0 parity evidence request)
- Re-read Phase L3k evidence: Py per-φ traces still show `rot_b_y` ≈ 0.7173 and `k_frac` ≈ −0.589 at φ=0 (reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log:15-20) vs C’s 0.671588/−0.607256 (c_trace_scaling.log:266-277). Root cause for VG-1 failure is upstream of φ rotation, likely the real-vector reconstruction.
[2025-10-07T15:37:08] tokens used: 258,399
[2025-10-07T15:37:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:10] thinking

**Appending update summary**
[2025-10-07T15:37:15] exec bash -lc "cat <<'EOF' >> galph_memory.md
## 2025-11-22 (galph loop — L3k.3b instrumentation guard)
- Detected Attempt #101 left per-φ comparison artifacts claiming parity despite missing C TRACE_C_PHI data; "'`comparison_summary.md` showed ✅ with an empty table.
- Updated `plans/active/cli-noise-pix0/plan.md` to require C instrumentation before any per-φ diff, explicitly mandating BLOCKED status when C entries are absent.
- Synced `docs/fix_plan.md` Next Actions with the new instrumentation guard so L3k.3b focuses on emitting TRACE_C_PHI and regenerating traces under a fresh timestamp.
- Replaced `input.md` (Parity) directing Ralph to add TRACE_C_PHI prints in `golden_suite_generator/nanoBragg.c`, rebuild, rerun the supervisor command, regenerate PyTorch traces, fix the misleading comparison summary, and capture updated diagnosis + checklist notes.
- Follow-up: Expect Ralph to land the instrumentation, produce `c_trace_phi_<timestamp>.log`, update comparison_summary to BLOCKED (until data present), refresh VG-1.4, and only then proceed toward VG-3/VG-4.
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:15] bash -lc "cat <<'EOF' >> galph_memory.md
## 2025-11-22 (galph loop — L3k.3b instrumentation guard)
- Detected Attempt #101 left per-φ comparison artifacts claiming parity despite missing C TRACE_C_PHI data; "'`comparison_summary.md` showed ✅ with an empty table.
- Updated `plans/active/cli-noise-pix0/plan.md` to require C instrumentation before any per-φ diff, explicitly mandating BLOCKED status when C entries are absent.
- Synced `docs/fix_plan.md` Next Actions with the new instrumentation guard so L3k.3b focuses on emitting TRACE_C_PHI and regenerating traces under a fresh timestamp.
- Replaced `input.md` (Parity) directing Ralph to add TRACE_C_PHI prints in `golden_suite_generator/nanoBragg.c`, rebuild, rerun the supervisor command, regenerate PyTorch traces, fix the misleading comparison summary, and capture updated diagnosis + checklist notes.
- Follow-up: Expect Ralph to land the instrumentation, produce `c_trace_phi_<timestamp>.log`, update comparison_summary to BLOCKED (until data present), refresh VG-1.4, and only then proceed toward VG-3/VG-4.
EOF
' succeeded in 682ms:

[2025-10-07T15:37:15] tokens used: 260,678
[2025-10-07T15:37:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:18] thinking

**Preparing to commit changes**
[2025-10-07T15:37:19] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:20] bash -lc 'git status --short' succeeded in 691ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T15:37:20] tokens used: 261,145
[2025-10-07T15:37:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:24] thinking

**Preparing to commit changes**
[2025-10-07T15:37:24] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:25] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 736ms:

[2025-10-07T15:37:25] tokens used: 284,803
[2025-10-07T15:37:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:27] thinking

**Preparing commit message**
[2025-10-07T15:37:29] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS L3k.3b guard - tests: not run"' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:30] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS L3k.3b guard - tests: not run"' succeeded in 744ms:
[feature/spec-based-2 c6f002b] SUPERVISOR: CLI-FLAGS L3k.3b guard - tests: not run
 4 files changed, 46 insertions(+), 36 deletions(-)
[2025-10-07T15:37:30] tokens used: 285,157
[2025-10-07T15:37:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:33] thinking

**Pushing changes to remote**
[2025-10-07T15:37:36] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:38] bash -lc 'git push' succeeded in 2.04s:
To github.com:hoidn/nanoBragg.git
   2bff7e7..c6f002b  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T15:37:38] tokens used: 294,616
[2025-10-07T15:37:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:46] thinking

**Preparing final response outline**
[2025-10-07T15:37:47] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,80p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:48] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,80p'" succeeded in 831ms:
     1	## Context
     2	- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
     3	- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
     4	- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
     5	- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
     6	- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
     7	- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
     8	- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
     9	- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
    10	- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
    11	- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
    12	- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
    13	- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
    14	- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
    15	- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
    16	- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
    17	- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
    18	- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
    19	- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
    20	- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
[2025-10-07T15:37:48] tokens used: 295,248
[2025-10-07T15:37:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:50] thinking

**Checking line location for bullet mention**
[2025-10-07T15:37:51] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '18,40p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:51] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '18,40p'" succeeded in 716ms:
    18	- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
    19	- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
    20	- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
    21	- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
    22	- Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
    23	- Gap snapshot update (2025-11-18 late): Attempt #81 implemented `.to(device=device, dtype=dtype)` and added the `TestHKLDevice::test_hkl_tensor_respects_device` regression (CPU/CUDA × float32/float64). Next blocker: Phase L3e scaling validation to prove all factors match C (≤1e-6) before rerunning nb-compare in Phase L4.
    24	- Gap snapshot addendum (2025-10-06T17:59 replayed 2025-11-09): Re-running Phase L1 with `Fdump_scaled_20251006175946.bin` shows the cache stores 182,700 doubles (≈9,534 more than the 173,166 expected from header ranges) and that reflections shift by Δk≈+10–12 / Δl≈−2…−8 relative to HKL indices. Use this dataset to reverse-engineer the C layout before touching PyTorch HKL IO.
    25	- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
    26	- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
    27	- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
    28	- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
    29	- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
    30	- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
    31	- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
    32	- Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
    33	- Gap snapshot recap (2025-11-22): L3k.2 landed (Attempt #97) with reciprocal recompute + docstring, VG-2 passed (Attempt #98), but VG-1/VG-3 failed (Attempt #99) — k_frac span 1.8×10⁻², correlation 0.985, sum_ratio 1.16×10⁵ because the C ROI sum came back ≈0. Attempt #100 realigned the φ=0 tests to the supervisor spindle axis so the drift is now captured in red tests. Focus next: diagnose the residual φ rotation error, fix the nb-compare ROI anomaly, then rerun VG-1⇢VG-4 before logging L3k.4.
    34	- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
    35	- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
    36	- Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
    37	- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
[2025-10-07T15:37:51] tokens used: 296,866
[2025-10-07T15:37:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:37:54] thinking

**Updating row and referencing docs**
[2025-10-07T15:37:55] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '450,520p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T15:37:56] bash -lc "nl -ba docs/fix_plan.md | sed -n '450,520p'" succeeded in 655ms:
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
   460	- Next Actions (2025-11-22 refresh → galph):
   461	1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
   462	2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
   463	3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
   464	- Attempts History:
   465	  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
   466	    Metrics: Planning-only (no tests executed).
   467	    Artifacts:
   468	      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
   469	      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T15:37:56] tokens used: 301,218
[2025-10-07T15:37:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |


[2025-10-07T15:38:05] thinking

**Organizing final summary structure**
[2025-10-07T15:38:05] codex

**Loop Outcome**
- Tightened CLI parity plan: `plans/active/cli-noise-pix0/plan.md:19` now mandates adding `TRACE_C_PHI` instrumentation, regenerating traces under a new timestamped folder, and explicitly marking comparison outputs BLOCKED until C data exists; `docs/fix_plan.md:461` mirrors those Next Actions.
- Long-term goal review: Goal #1 remains gated by missing C φ traces and nb-compare ROI anomalies; instrumentation plus honest trace summaries are prerequisites before normalization work resumes. Goal #2 (vectorization) advanced to Phase C3 completion (`docs/fix_plan.md:2008`, commit 12742e5) so the next push should pivot to polynomial vectorization (Phase D) once CLI work stabilises.
- Recent commit check: 99594f6 writes `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251122/comparison_summary.md:9` as “✅ PARITY ACHIEVED” despite zero C entries—future loops must correct this artifact and treat it as a failure until TRACE_C_PHI exists.
- Steering memo refreshed: `input.md` instructs Ralph to add the C instrumentation, rerun the supervisor command, regenerate PyTorch traces, and update diagnosis/checklist evidence without touching production PyTorch code.

Next steps for Ralph: follow the new `input.md` Do Now to emit `c_trace_phi_<timestamp>.log`, fix the misleading comparison summary, and update VG-1.4; after that, move on to the nb-compare ROI fix (L3k.3d) and documentation checkpoints.
[2025-10-07T15:38:10] tokens used: 304,747
[2025-10-07T15:38:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index e4ea8801dbbb3f7f42e89574f4ba94e787703eac..613eae5783e8bf880d39823828243e371cac0272
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-22 refresh → galph):
-1. Phase L3k.3b — Re-run the per-φ harness (store under `rot_vector/base_vector_debug/20251122/`), diff against `c_trace_scaling.log`, and document the first divergent tensor in `diagnosis.md` + `fix_checklist.md` (VG-1.4 notes).
+1. Phase L3k.3b — Instrument the golden C binary to emit `TRACE_C_PHI` for the supervisor pixel, rebuild, then regenerate PyTorch traces under a fresh `base_vector_debug/<timestamp>/`. Run `scripts/compare_per_phi_traces.py` and ensure the comparison artifacts flag **BLOCKED** when C data is missing (no ✅ banner). Document the outcome in `diagnosis.md` and refresh `fix_checklist.md` VG-1.4.
 2. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01.
 3. Phase L3k.3e → L3k.4 — After VG-1/VG-3/VG-4 pass, flip the remaining checklist rows, update `mosflm_matrix_correction.md`, then log the new attempt here with metrics (correlation, sum_ratio, b_Y, k_frac) ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 575520de59bcd1be2e1d11a53e0156a4fbbc4754..efd340c7c34b02405611350822a4949d8e3e3c9e
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -16,6 +16,7 @@
 - Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
 - Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
 - Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
+- Gap snapshot update (2025-11-22): Attempt #101 (L3k.3b evidence loop) regenerated per-φ PyTorch traces and confirmed k_frac span=1.8088e-2. No matching `TRACE_C_PHI` lines exist in the current C trace, so the comparison tooling falsely reports "parity achieved." Phase L3k now requires explicit instrumentation of the golden C binary plus a guard that treats missing C data as a blocking failure before nb-compare/ROI work resumes.
 - Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
 - Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
 - Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
@@ -289,7 +290,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
-| L3k.3b | Diagnose residual φ rotation drift | [ ] | Regenerate per-φ traces with `trace_harness.py` (store under `rot_vector/base_vector_debug/20251122/`), run `python scripts/compare_per_phi_traces.py <new_json> c_trace_mosflm.log`, and isolate the first divergent tensor (expected within real-vector reconstruction). Document findings and hypotheses in `diagnosis.md`, updating `fix_checklist.md` VG-1.4 notes. |
+| L3k.3b | Restore C↔Py per-φ comparison pipeline | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to emit `TRACE_C_PHI` lines for the supervisor pixel, rebuild (`make -C golden_suite_generator`), and capture the resulting `c_trace_phi_YYYYMMDD.log`. Regenerate PyTorch traces (float64) with `trace_harness.py` into `rot_vector/base_vector_debug/<timestamp>/`, then run `python scripts/compare_per_phi_traces.py <py_json> <c_trace>`; if the C trace lacks entries, record the run as **BLOCKED** (update `comparison_summary.md`/`comparison_stdout.txt` accordingly—no ✅ banner). Record findings and hypotheses in `diagnosis.md` and update `fix_checklist.md` VG-1.4. |
 | L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | After applying the targeted fix, rerun the per-φ harness to ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6. Capture logs/SHA256 in `per_phi_postfix/` and flip VG-1 rows in the checklist to ✅. |
 | L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
 | L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   c6f002b..66071b0  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=104...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=104
Updating 66071b0..575b986
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   66071b0..575b986  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=104
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 575b986..ee83081
Fast-forward
 docs/fix_plan.md                                   |  46 +-
 .../202510070839/c_trace_phi_202510070839.log      | 342 +++++++++++
 .../202510070839/comparison_stdout.txt             |  44 ++
 .../202510070839/comparison_summary.md             |  49 ++
 .../base_vector_debug/202510070839/diagnosis.md    |  99 +++
 .../trace_py_rot_vector_202510070839.log           |  43 ++
 .../trace_py_rot_vector_202510070839_per_phi.json  |  82 +++
 .../trace_py_rot_vector_202510070839_per_phi.log   |  10 +
 .../rot_vector/base_vector_debug/c_trace_phi_.log  |   1 +
 .../base_vector_debug/pytest_collect.log           | 665 ++++++++++++++++++++-
 .../phase_l/rot_vector/fix_checklist.md            |   2 +-
 .../phase_l/rot_vector/trace_py_env.json           |   4 +-
 12 files changed, 1361 insertions(+), 26 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/c_trace_phi_202510070839.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/comparison_stdout.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/diagnosis.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/trace_py_rot_vector_202510070839.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/trace_py_rot_vector_202510070839_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/202510070839/trace_py_rot_vector_202510070839_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/c_trace_phi_.log
From github.com:hoidn/nanoBragg
   575b986..ee83081  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating ee83081..98ee030
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   ee83081..98ee030  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=105
Ralph completed iteration 104; proceeding to 105
