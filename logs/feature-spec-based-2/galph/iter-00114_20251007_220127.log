Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=114
To github.com:hoidn/nanoBragg.git
   d93a4bd..f584650  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T22:01:32] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T22:01:32] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T22:01:34] thinking

**Preparing to run git pull rebase**
[2025-10-07T22:01:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:38] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' succeeded in 2.31s:
Already up to date.
[2025-10-07T22:01:38] tokens used: 14,056

[2025-10-07T22:01:39] thinking

**Preparing to read latest galph_memory entry**
[2025-10-07T22:01:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:40] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' succeeded in 693ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T22:01:40] tokens used: 14,298

[2025-10-07T22:01:44] thinking

**Preparing to read key documentation**
[2025-10-07T22:01:44] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:45] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/index.md" succeeded in 704ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T22:01:45] tokens used: 31,579

[2025-10-07T22:01:46] thinking

**Reading specification file**
[2025-10-07T22:01:47] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:48] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' specs/spec-a.md" succeeded in 717ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T22:01:48] tokens used: 33,309

[2025-10-07T22:01:50] thinking

**Considering spec-a-core necessity**
[2025-10-07T22:01:50] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:51] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' arch.md" succeeded in 718ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T22:01:51] tokens used: 33,673

[2025-10-07T22:01:53] thinking

**Planning to read more documentation**
[2025-10-07T22:01:54] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:54] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 673ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T22:01:54] tokens used: 36,240

[2025-10-07T22:01:57] thinking

**Opening debugging documentation**
[2025-10-07T22:01:58] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:01:59] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/debugging/debugging.md" succeeded in 710ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T22:01:59] tokens used: 38,204

[2025-10-07T22:02:00] thinking

**Reviewing fix_plan.md document**
[2025-10-07T22:02:01] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:02] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,160p' docs/fix_plan.md" succeeded in 702ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T22:02:02] tokens used: 40,545

[2025-10-07T22:02:04] thinking

**Reviewing initial sections and testing strategy**

I’m starting by reading the initial section of this large file to get a grasp of the content. I also plan to look at the testing_strategy.md document in the docs/development folder to understand how testing is approached here. This will help me figure out what else I might need to explore next.
[2025-10-07T22:02:05] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:06] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 685ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T22:02:06] tokens used: 43,606

[2025-10-07T22:02:09] thinking

**Preparing for thorough codebase analysis**
[2025-10-07T22:02:09] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:10] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 728ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-07T22:02:10] tokens used: 46,259

[2025-10-07T22:02:12] thinking

**Assessing project scope and vectorization plan**
[2025-10-07T22:02:12] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:13] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' plans/active/vectorization.md" succeeded in 678ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). Reusable tricubic and absorption harnesses now live under `scripts/benchmarks/` (see Phase A artifacts) for ongoing baseline comparisons.
- Gap Snapshot (2025-11-23 refresh): Phase C1–C3 are COMPLETE with logs in `reports/2025-10-vectorization/phase_c/`; assertions and device checks landed in commit 12742e5. The next gating work is Phase D (vectorize `polint`/`polin2`/`polin3`) followed by Phase E validation before touching detector absorption (Phase F).
- Supervisory note (2025-11-23): Before coding Phase D, ensure the polynomial vectorization tasks record explicit tensor-shape math, gradient expectations, and targeted regression selectors in `phase_d/` notes. Capture proof (CPU+CUDA) for each helper as it is batched, then roll those artifacts into the Phase E parity/perf sweep prior to resuming absorption work.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T22:02:13] tokens used: 49,550

[2025-10-07T22:02:16] thinking

**Reviewing long-term goals and plans**
[2025-10-07T22:02:16] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:17] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 730ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
513:      - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
688:      - C trace evidence indicates state carryover within the reference implementation. Until we either patch the C code or emulate this behavior, PyTorch must conform to the reference output to unblock CLI-FLAGS-003.
2049:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-07T22:02:17] tokens used: 51,156

[2025-10-07T22:02:19] thinking

**Reviewing relevant lines**
[2025-10-07T22:02:20] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,750p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:20] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,750p' docs/fix_plan.md" succeeded in 707ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-26 refresh → galph loop i=112):
1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
[2025-10-07T22:02:20] tokens used: 52,208

[2025-10-07T22:02:24] thinking

**Analyzing phi bug and long-term goals**
[2025-10-07T22:02:25] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/bugs/verified_c_bugs.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:25] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1,200p' docs/bugs/verified_c_bugs.md" succeeded in 709ms:
# Verified `nanoBragg.c` Bugs (2025-10)

## Severity Overview
- **High:** C-IMPL-BUG-002, C-DESIGN-FLAW-001, C-DESIGN-FLAW-003, NANO-C-BUG-001, NANO-C-BUG-002
- **Medium:** C-DESIGN-FLAW-002, C-DESIGN-FLAW-005, C-PARITY-001
- **Low:** C-LOGGING-BUG-001

Artifact logs for the reproductions below live under `docs/bugs/artifacts/`.

---

### C-IMPL-BUG-002 — Incorrect Angle Units in `mosaic_rotation_umat` (High)
**Summary:** The random misset path feeds `90.0` (degrees) into `mosaic_rotation_umat`, but the helper interprets angles in radians. The code therefore constructs rotation matrices using a 90-radian cap (≈5156°), which produces non-physical orientations.

**Reproduction:**
```bash
./golden_suite_generator/nanoBragg \
  -cell 50 60 70 80 90 100 \
  -misset random \
  -default_F 1 -N 0 \
[2025-10-07T22:02:25] tokens used: 55,694

[2025-10-07T22:02:29] thinking

**Planning stepwise analysis and spec review**

I’m organizing the task to follow instructions carefully—starting with a deep analysis of Step 1 before moving to the coin flip in Step 2. I want to understand the long-term goals around running parallel tests with specific CLI flags, verify the phi carryover bug isn’t in the spec, and prepare for the vectorization plan. That means digging into the spec docs, especially on phi, to ensure everything aligns before crafting the Step 1 summary.
[2025-10-07T22:02:30] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "phi" -n specs/spec-a-core.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:31] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "phi" -n specs/spec-a-core.md | head' succeeded in 685ms:
211:                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
248:    - Define steps = (number of sources) · (number of mosaic domains) · (phisteps) · (oversample^2).
414:        - Steps = (#accepted divergence points) × dispsteps × mosaic_domains × phisteps ×
507:    - For each of horizontal divergence, vertical divergence, spectral dispersion, phi, and detector thickness sampling, missing combinations of count/range/step SHALL be resolved per the rules in “Sources, Divergence & Dispersion” and “Sampling & Accumulation”, resulting in:
575:    - Setup: sources=1; mosaic_domains=1; oversample=1; phisteps=2 with identical physics across steps (e.g., zero mosaic and symmetric phi so F_cell and F_latt identical); disable thickness/polar/omega oversample toggles.
[2025-10-07T22:02:31] tokens used: 59,171

[2025-10-07T22:02:34] thinking

**Seeking specific line in file**
[2025-10-07T22:02:35] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '180,260p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:36] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '180,260p' specs/spec-a-core.md" succeeded in 678ms:
        - If domains set > 0 and spread < 0: force domains = 1, spread = 0.

Sampling & Accumulation (Normative)

- Loop order per pixel within ROI and unmasked:
    - For each detector thickness layer index t = 0..thicksteps-1:
        - Odet = t·(thickness/steps) (meters).
        - For subpixel grid (oversample × oversample):
            - Compute detector-plane coordinates (meters): Fdet and Sdet at subpixel centers.
            - Detector point in lab frame: P = D0 + Fdet·f + Sdet·s + Odet·o. If curved detector is
enabled, an alternative spherical mapping is used: start at distance along b and rotate about s and
f by small angles Sdet/distance and Fdet/distance respectively.
            - Diffracted unit vector d = unit(P); airpath R = ||P||.
            - Solid angle per subpixel:
                - ω = pixel^2 / R^2 · (close_distance / R).
                - If point-pixel mode: ω = 1 / R^2.
            - Absorption per thickness layer (if enabled):
                - Parallax factor: ρ = d·o.
                - Capture fraction for this layer: exp(−t·Δz·μ/ρ) − exp(−(t+1)·Δz·μ/ρ), where Δz =
thickness/steps.
[2025-10-07T22:02:36] tokens used: 60,192

[2025-10-07T22:02:43] thinking

**Analyzing phi rotation and spec alignment**

I'm focusing on deeply analyzing the phi rotation parity issue, ensuring the spec doesn't reflect a carryover bug, and checking relevant plans and code in `src/nanobrag_torch/models/crystal.py` to clarify current status without editing. This will help me summarize issues and gaps for step 1 before moving to subsequent instructions.
[2025-10-07T22:02:45] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1000,1200p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:46] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1000,1200p' src/nanobrag_torch/models/crystal.py" succeeded in 784ms:
                                            if( mosaic_spread > 0.0 )
                                            {
                                                rotate_umat(ap,a,&mosaic_umats[mos_tic*9]);
                                                rotate_umat(bp,b,&mosaic_umats[mos_tic*9]);
                                                rotate_umat(cp,c,&mosaic_umats[mos_tic*9]);
                                            }
                                            else
                                            {
                                                a[1]=ap[1];a[2]=ap[2];a[3]=ap[3];
                                                b[1]=bp[1];b[2]=bp[2];b[3]=bp[3];
                                                c[1]=cp[1];c[2]=cp[2];c[3]=cp[3];
                                            }
        ```

        Args:
            config: CrystalConfig containing rotation parameters.

        Returns:
            Tuple containing:
            - First tuple: rotated (a, b, c) real-space vectors with shape (N_phi, N_mos, 3)
[2025-10-07T22:02:46] tokens used: 62,438

[2025-10-07T22:02:55] thinking

**Analyzing carryover bug conflict and spec alignment**

I’m sorting through a carryover bug tied to `_phi_last_cache` that the current code intentionally replicates but the spec says should be reset each step. There’s a tension between maintaining CLI parity by replicating the bug and aligning the implementation with the spec’s correct behavior. I need to check spec documents and plans for this, understand if a parity mode toggle might be needed, and summarize the status of each long-term goal concerning this bug and related vectorization efforts.
[2025-10-07T22:02:56] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '900,1150p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:02:57] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '900,1150p' docs/fix_plan.md" succeeded in 755ms:
      - **Device comparison quirk handled:** `.device.type` comparison used instead of direct `.device ==` to handle PyTorch's cuda:0 resolution
      - **Phase L3d exit criteria satisfied:** Device transfer patch landed, regression test covers CLI→Crystal HKL flow, smoke tests pass
    Next Actions: Phase L3e scaling validation per plan (extend compare_scaling_chain.py to diff TRACE_C/TRACE_PY with ≤1e-6 deltas for all scaling factors). Supervisor should update fix_plan with this attempt and proceed to L3e or L4 parity rerun.
  * [2025-10-07] Attempt #82 (ralph loop) — Result: **SUCCESS** (Phase L3e scaling validation script extension COMPLETE). **Extended compare_scaling_traces.py to emit structured JSON metrics + run metadata with ≤1e-6 tolerance enforcement per Phase L3e guidance.**
    Metrics: Script successfully generates 3 artifacts (markdown, metrics.json, run_metadata.json); reports 5 divergent factors (I_before_scaling CRITICAL, polar/omega_pixel/cos_2theta MINOR, I_pixel_final CRITICAL) with I_before_scaling as first divergence. Pytest collection stable (50+ tests collected).
    Artifacts:
      - `scripts/validation/compare_scaling_traces.py:1-322` - Extended script with JSON output, sub-micro tolerance enforcement, git SHA + torch version capture
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/scaling_validation_summary.md` - Phase L3e markdown summary with tolerance header (≤1.00e-06 relative), fractional deltas (scientific notation), and updated phase label
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json` - Structured per-factor metrics (c_value, py_value, abs_delta, rel_delta, status) plus tolerance_rel, first_divergence, num_divergent
      - `reports/2025-10-cli-flags/phase_l/scaling_validation/run_metadata.json` - Run metadata (timestamp ISO 8601, git_sha 22233b8, torch 2.8.0+cu128, command, c_trace/py_trace absolute paths, tolerance_rel)
    Observations/Hypotheses:
      - **JSON artifacts satisfy input.md requirements:** metrics.json contains per-factor deltas with ≤1e-6 relative threshold enforcement; run_metadata.json captures env snapshot and command invocation for reproducibility
      - **Tolerance enforcement updated:** Changed assessment from percentage-based (0.001%/1%/10%) to fractional (1e-6 PASS/1e-4 MINOR/1e-2 DIVERGENT) per Phase L3e spec
      - **Relative deltas now fractional:** Output format changed from percentage (`+0.003%`) to scientific notation (`+3.094e-08`) for consistency with threshold
      - **Deprecation warning fixed:** Replaced datetime.utcnow() with datetime.now().astimezone() to avoid Python 3.13+ deprecation warning
      - **No production code changes:** Evidence-only loop per input.md Parity mode; script updates are tooling-layer only
    Next Actions: Phase L3f documentation sync — Update analysis.md + architectural docs with finalized ingestion/normalization flow once scaling validation passes (per input.md lines 462-463).
  * [2025-11-19] Attempt #83 (galph loop) — Result: **EVIDENCE UPDATE** (Phase L3e parity snapshot). **Reran scaling comparison with latest PyTorch trace (`trace_py_scaling_20251117.log`) and documented the surviving lattice-factor gap.**
    Metrics: Comparison reports 5 divergent factors with `I_before_scaling` still CRITICAL (−0.24397 relative). `r_e^2`, `fluence`, `steps`, `capture_fraction` remain PASS; `polar`, `omega_pixel`, `cos_2theta` MINOR. `I_pixel_final` mirrors the raw accumulation delta (−0.17343 relative).
    Artifacts:
[2025-10-07T22:02:57] tokens used: 66,507

[2025-10-07T22:02:59] thinking

**Planning coin flip implementation**
[2025-10-07T22:03:00] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:03:01] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" succeeded in 724ms:
tails
[2025-10-07T22:03:01] tokens used: 70,489

[2025-10-07T22:03:26] thinking

**Evaluating planning and focus issue selection**
[2025-10-07T22:03:26] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "carryover" specs' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:03:27] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "carryover" specs' exited 1 in 919ms:

[2025-10-07T22:03:27] tokens used: 73,388

[2025-10-07T22:03:30] thinking

**Checking for cache usage in specs**
[2025-10-07T22:03:31] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba src/nanobrag_torch/models/crystal.py | sed -n '1090,1200p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:03:31] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba src/nanobrag_torch/models/crystal.py | sed -n '1090,1200p'" succeeded in 708ms:
  1090	                config.spindle_axis, device=self.device, dtype=self.dtype
  1091	            )
  1092	
  1093	            a_last = rotate_axis(self.a.unsqueeze(0), spindle_axis_temp.unsqueeze(0), last_phi_rad.unsqueeze(0))
  1094	            b_last = rotate_axis(self.b.unsqueeze(0), spindle_axis_temp.unsqueeze(0), last_phi_rad.unsqueeze(0))
  1095	            c_last = rotate_axis(self.c.unsqueeze(0), spindle_axis_temp.unsqueeze(0), last_phi_rad.unsqueeze(0))
  1096	
  1097	            self._phi_last_cache = (
  1098	                a_last.squeeze(0),
  1099	                b_last.squeeze(0),
  1100	                c_last.squeeze(0)
  1101	            )
  1102	
  1103	        # Initialize output tensors to hold rotated vectors
  1104	        a_phi = []
  1105	        b_phi = []
  1106	        c_phi = []
  1107	
  1108	        # Process each φ angle individually to match C's phi!=0.0 guard
  1109	        for i in range(config.phi_steps):
[2025-10-07T22:03:31] tokens used: 73,703

[2025-10-07T22:03:33] thinking

**Preparing to track line references**
[2025-10-07T22:03:34] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba specs/spec-a-core.md | sed -n '200,240p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:03:35] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba specs/spec-a-core.md | sed -n '200,240p'" succeeded in 682ms:
   200	            - For each source:
   201	                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
   202	                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
   203	                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
   204	                - Polarization factor (if enabled; Kahn model):
   205	                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
   206	                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
   207	plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
   208	                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
   209	the Kahn factor from -polar.
   210	                - Crystal orientation:
   211	                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
   212	about u by φ to get (ap,bp,cp).
   213	                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
   214	(a,b,c).
   215	                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
   216	                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
   217	                - Lattice factor F_latt:
   218	                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
   219	where
[2025-10-07T22:03:35] tokens used: 75,978

[2025-10-07T22:03:37] thinking

**Checking line numbers around C-PARITY**
[2025-10-07T22:03:37] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/bugs/verified_c_bugs.md | sed -n '150,220p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:03:38] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/bugs/verified_c_bugs.md | sed -n '150,220p'" succeeded in 665ms:
   150	  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-with-hkl.txt
   151	
   152	# Second run: no -hkl, automatically reads the cache
   153	./golden_suite_generator/nanoBragg -cell 70 70 70 90 90 90 -N 0 \
   154	  -distance 100 -detpixels 2 -pixel 0.1 \
   155	  -floatfile /tmp/cache2_float.bin -intfile /tmp/cache2_int.img -noisefile /tmp/cache2_noise.img \
   156	  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-no-hkl.txt
   157	```
   158	The follow-up log contains `reading Fs from Fdump.bin`, demonstrating the implicit dependency.
   159	
   160	**Relevant code:**
   161	- `golden_suite_generator/nanoBragg.c:1297-1304` — attempts to open `Fdump.bin` whenever `-hkl` is absent.
   162	- `golden_suite_generator/nanoBragg.c:2355-2368` — rehydrates the cached structure factors silently.
   163	
   164	---
   165	
   166	### C-PARITY-001 — φ=0 Uses Stale Crystal Vectors (Medium)
   167	**Summary:** Inside the φ loop, the rotated vectors `ap/bp/cp` are only updated when `phi != 0.0`; otherwise, they retain the previous state (often from the prior pixel’s final φ step). This produces step-0 Miller fractions that mirror the previous pixel rather than the unrotated lattice.
   168	
   169	**Reproduction:**
[2025-10-07T22:03:38] tokens used: 77,291

[2025-10-07T22:04:11] thinking

**Preparing evidence analysis and updating documentation plan**

I'm working through Step 3.2 by gathering and summarizing evidence from key documents and code files to support instructions for Ralph. This involves cross-checking the spec and bug documentation, considering next actions from fix_plan, and planning to produce a detailed memo or report focusing on documentation that clarifies spec compliance versus bugs. I may update fix_plan with references to the evidence and outline precise doc steps to ensure alignment with the long-term goal of preserving spec correctness while addressing current bugs via a parity shim. I'll prepare content for input.md that directs Ralph to produce these documentation deliverables next.
[2025-10-07T22:04:14] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && date -u' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:04:15] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && date -u' succeeded in 861ms:
Tue Oct  7 22:04:15 UTC 2025
[2025-10-07T22:04:15] tokens used: 80,698

[2025-10-07T22:04:21] thinking

**Analyzing timeline discrepancies and attempt numbering**
[2025-10-07T22:04:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Attempt #" docs/fix_plan.md | tail' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:04:22] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "Attempt #" docs/fix_plan.md | tail' succeeded in 703ms:
  * [2025-10-07] Attempt #6 — Result: **Phase C2 COMPLETE** (OOB warning single-fire test authored and validated). Test regression locks fallback behavior.
  * [2025-10-07] Attempt #7 (ralph loop, Mode: Code) — Result: **Phase C3 COMPLETE** (shape assertions/device audit landed). Pipeline now ready for Phase D polynomial work.
  * [2025-10-01] Attempt #1 — Result: success. Fixed 27+ dtype mismatch tests by adding `dtype=torch.float64` parameter to Detector/Crystal/Simulator constructors in precision-critical tests.
  * [2025-11-17] Attempt #0 — Result: backlog entry. Logged bug description (pixel centers forwarded to absorption) and created plan `plans/active/oversample-thick-subpixel.md`; no code changes yet.
  * [2025-11-17] Attempt #0 — Result: backlog entry. Issue documented and plan `plans/active/source-weight-normalization.md` created; awaiting evidence collection.
  * [2025-10-05] Attempt #1 — Result: success. Added batched-input detection and fallback to nearest-neighbor lookup.
  * [2025-10-06] Attempt #22 — Phase H3b pix0 transform implementation (ralph)
  * [2025-10-06] Attempt #23 — Phase H3b1 complete (ralph) **CRITICAL DISCOVERY: C-code ignores `-pix0_vector_mm` when custom vectors provided**
      - **Cross-platform gap**: C pix0_vector vs PyTorch (with override) shows 1.14mm Y-axis error, exactly matching prior Phase H3a/Attempt #22 findings.
      - **Root cause of Attempt #22 failure**: Implementation tried to apply pix0_override via projection math, but C-code precedence means the override should be IGNORED when custom vectors are present. The supervisor command provides BOTH custom vectors AND `-pix0_vector_mm`, so C ignores the latter.
[2025-10-07T22:04:22] tokens used: 81,725

[2025-10-07T22:04:30] thinking

**Preparing detailed documentation patch**

I’m aiming to update the Next Actions in the plan by expanding bullet #2 to cite specific spec line numbers and PyTorch code lines replicating the bug, so it clarifies the spec-mandated behavior versus the current bug, and proposes a path for a spec-compliant default with an optional parity shim. I’ll use a precise patch to minimally modify that section with those references.
[2025-10-07T22:04:34] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -461,3 +461,3 @@
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
[2025-10-07T22:04:34] apply_patch(auto_approved=true) exited 0 in 10ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T22:04:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:

[2025-10-07T22:04:34] tokens used: 83,067
[2025-10-07T22:04:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:


[2025-10-07T22:04:38] thinking

**Planning documentation updates**
[2025-10-07T22:04:44] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -4,3 +4,3 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
[2025-10-07T22:04:44] apply_patch(auto_approved=true) exited 0 in 20ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:04:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.

[2025-10-07T22:04:44] tokens used: 84,817
[2025-10-07T22:04:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:04:48] thinking

**Preparing input.md content**
[2025-10-07T22:04:48] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:04:49] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' succeeded in 944ms:
## feature/spec-based-2...origin/feature/spec-based-2
 M docs/fix_plan.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:04:49] tokens used: 85,834
[2025-10-07T22:04:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:04:54] thinking

**Clarifying test commands for docs mode**
[2025-10-07T22:04:55] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:04:56] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' succeeded in 724ms:
Summary: Capture spec-vs-parity guidance for φ=0 so we stop perpetuating the C carryover bug.
Mode: Docs
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q tests/test_cli_scaling_phi0.py
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (refresh), docs/fix_plan.md (Attempt log)
Do Now: CLI-FLAGS-003 L3k.3c.4 — update reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md with spec-vs-parity analysis and log the attempt; then run `pytest --collect-only -q tests/test_cli_scaling_phi0.py`.
If Blocked: Record the blocker in docs/fix_plan.md Attempt history, capture the collect-only output, and drop the raw notes under reports/2025-10-cli-flags/phase_l/rot_vector/blockers.md for follow-up.
Priorities & Rationale:
- specs/spec-a-core.md:211 — Spec mandates φ sampling uses fresh rotations each step; we must cite this to justify rejecting the carryover.
- docs/bugs/verified_c_bugs.md:166 — C-PARITY-001 documents the C bug; the memo needs this pointer to keep parity work quarantined.
- src/nanobrag_torch/models/crystal.py:1115 — Current implementation caches φ=last and reuses it, so the documentation must call out this divergence before we change code.
- plans/active/cli-noise-pix0/plan.md:309 — Plan still tells us to emulate the carryover; the refreshed memo must drive the upcoming plan edit and guard future attempts.
- docs/development/testing_strategy.md:1, 103 — Testing SOP requires collect-only confirmation for docs loops and references the parity harness; include the selector so the guard stays green.
How-To Map:
- Update reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md with sections covering: (1) normative spec quote, (2) summary of C-PARITY-001 evidence, (3) current PyTorch behavior, (4) compatibility plan (e.g., default spec path vs optional parity shim), and (5) checklist items that must flip before code edits.
- Cross-link the memo from plans/active/cli-noise-pix0/plan.md (L3k.3c.4 guidance) and add an Attempt entry in docs/fix_plan.md citing the refreshed diagnosis.
- After edits, run `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and stash the log under reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log.
- Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` exported in your shell before invoking pytest (per docs/development/testing_strategy.md §1.4).
Pitfalls To Avoid:
[2025-10-07T22:04:56] tokens used: 86,410
[2025-10-07T22:04:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:09] thinking

**Preparing to overwrite input.md with updated instructions**
[2025-10-07T22:05:19] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Refresh the φ=0 rotation memo with explicit spec citations and outline how we default to spec-compliant behavior while preserving a parity shim.
Mode: Docs
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (rewrite), plans/active/cli-noise-pix0/plan.md (cross-link), docs/fix_plan.md (Attempt log), reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log
Do Now: CLI-FLAGS-003 L3k.3c.4 — update reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md with the spec-vs-C analysis, note the parity shim plan in docs/fix_plan.md, then run "'`KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py` and stash the log.
If Blocked: Capture the obstacle in docs/fix_plan.md Attempt history, save working notes under reports/2025-10-cli-flags/phase_l/rot_vector/blockers.md, and still run the collect-only selector for traceability.
Priorities & Rationale:
- specs/spec-a-core.md:211 — Normative requirement that every φ step rotates the reference lattice; memo must quote this to ground the fix.
- docs/bugs/verified_c_bugs.md:166 — C-PARITY-001 documents the carryover defect; use it to justify keeping the shim quarantined.
- src/nanobrag_torch/models/crystal.py:1097 — Current `_phi_last_cache` path proves PyTorch mirrors the bug; highlight this gap before code changes.
- plans/active/cli-noise-pix0/plan.md:6 — Plan now insists on spec compliance by default; the memo must align with it and spell out the toggle strategy.
- docs/development/testing_strategy.md:104 — SOP tells us to run collect-only for docs loops and to respect parity harness dependencies.
How-To Map:
- Rewrite diagnosis.md sections to include: (1) verbatim spec quote with line reference, (2) summary of the C bug evidence, (3) description of current PyTorch behavior with links to trace/code, (4) decision table for default spec path vs parity shim, (5) checklist updates gating code edits.
- Update plans/active/cli-noise-pix0/plan.md L3k.3c.4 guidance by linking the refreshed memo (no broader reflow needed).
- Append a new Attempt entry to docs/fix_plan.md for CLI-FLAGS-003 noting the memo refresh, references, and the pending action items.
- After documentation edits, execute `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py` and save the output to reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log.
Pitfalls To Avoid:
- Do not modify production code or tests while in Docs mode.
- Keep diagnosis.md diff surgical; avoid rewrapping unrelated sections.
- Cite exact line numbers for spec and bug references (no paraphrasing without anchors).
- Maintain `_phi_last_cache` description factual—no implementation decisions until the shim plan is ratified.
- Use existing reports directory hierarchy; no stray folders.
- Ensure fix_plan Attempt numbering increments correctly; never overwrite prior history.
- Remember to set KMP_DUPLICATE_LIB_OK=TRUE before running pytest.
- Skip full pytest runs; collect-only is sufficient per SOP.
- Leave device/dtype guidance intact—no CPU-only assumptions in examples.
- Document any open questions at the end of diagnosis.md to convert into future plan tasks.
Pointers:
- specs/spec-a-core.md:211
- docs/bugs/verified_c_bugs.md:166
- src/nanobrag_torch/models/crystal.py:1097
- plans/active/cli-noise-pix0/plan.md:6
- plans/active/cli-noise-pix0/plan.md:309
- docs/fix_plan.md:450
- docs/development/testing_strategy.md:104
Next Up (optional): 1) Draft the plan edits that introduce the parity toggle implementation sequence. 2) Prototype the code-side guard in Crystal.get_rotated_real_vectors after the memo lands.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:20] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Refresh the φ=0 rotation memo with explicit spec citations and outline how we default to spec-compliant behavior while preserving a parity shim.
Mode: Docs
Focus: CLI-FLAGS-003 — Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (rewrite), plans/active/cli-noise-pix0/plan.md (cross-link), docs/fix_plan.md (Attempt log), reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log
Do Now: CLI-FLAGS-003 L3k.3c.4 — update reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md with the spec-vs-C analysis, note the parity shim plan in docs/fix_plan.md, then run "'`KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py` and stash the log.
If Blocked: Capture the obstacle in docs/fix_plan.md Attempt history, save working notes under reports/2025-10-cli-flags/phase_l/rot_vector/blockers.md, and still run the collect-only selector for traceability.
Priorities & Rationale:
- specs/spec-a-core.md:211 — Normative requirement that every φ step rotates the reference lattice; memo must quote this to ground the fix.
- docs/bugs/verified_c_bugs.md:166 — C-PARITY-001 documents the carryover defect; use it to justify keeping the shim quarantined.
- src/nanobrag_torch/models/crystal.py:1097 — Current `_phi_last_cache` path proves PyTorch mirrors the bug; highlight this gap before code changes.
- plans/active/cli-noise-pix0/plan.md:6 — Plan now insists on spec compliance by default; the memo must align with it and spell out the toggle strategy.
- docs/development/testing_strategy.md:104 — SOP tells us to run collect-only for docs loops and to respect parity harness dependencies.
How-To Map:
- Rewrite diagnosis.md sections to include: (1) verbatim spec quote with line reference, (2) summary of the C bug evidence, (3) description of current PyTorch behavior with links to trace/code, (4) decision table for default spec path vs parity shim, (5) checklist updates gating code edits.
- Update plans/active/cli-noise-pix0/plan.md L3k.3c.4 guidance by linking the refreshed memo (no broader reflow needed).
- Append a new Attempt entry to docs/fix_plan.md for CLI-FLAGS-003 noting the memo refresh, references, and the pending action items.
- After documentation edits, execute `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py` and save the output to reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log.
Pitfalls To Avoid:
- Do not modify production code or tests while in Docs mode.
- Keep diagnosis.md diff surgical; avoid rewrapping unrelated sections.
- Cite exact line numbers for spec and bug references (no paraphrasing without anchors).
- Maintain `_phi_last_cache` description factual—no implementation decisions until the shim plan is ratified.
- Use existing reports directory hierarchy; no stray folders.
- Ensure fix_plan Attempt numbering increments correctly; never overwrite prior history.
- Remember to set KMP_DUPLICATE_LIB_OK=TRUE before running pytest.
- Skip full pytest runs; collect-only is sufficient per SOP.
- Leave device/dtype guidance intact—no CPU-only assumptions in examples.
- Document any open questions at the end of diagnosis.md to convert into future plan tasks.
Pointers:
- specs/spec-a-core.md:211
- docs/bugs/verified_c_bugs.md:166
- src/nanobrag_torch/models/crystal.py:1097
- plans/active/cli-noise-pix0/plan.md:6
- plans/active/cli-noise-pix0/plan.md:309
- docs/fix_plan.md:450
- docs/development/testing_strategy.md:104
Next Up (optional): 1) Draft the plan edits that introduce the parity toggle implementation sequence. 2) Prototype the code-side guard in Crystal.get_rotated_real_vectors after the memo lands.
EOF
' succeeded in 843ms:

[2025-10-07T22:05:20] tokens used: 89,677
[2025-10-07T22:05:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:27] thinking

**Reviewing commit and update sequence**
[2025-10-07T22:05:28] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:28] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 738ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:05:28] tokens used: 91,250
[2025-10-07T22:05:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:30] thinking

**Preparing to commit changes**
[2025-10-07T22:05:31] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:32] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff' succeeded in 690ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8..0e405c6 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/input.md b/input.md
index 8e675e9..b1e2fd6 100644
--- a/input.md
+++ b/input.md
@@ -1,38 +1,39 @@
-Summary: Capture spec-vs-parity guidance for φ=0 so we stop perpetuating the C carryover bug.
+Summary: Refresh the φ=0 rotation memo with explicit spec citations and outline how we default to spec-compliant behavior while preserving a parity shim.
[2025-10-07T22:05:32] tokens used: 91,429
[2025-10-07T22:05:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:34] thinking

**Staging files for commit**
[2025-10-07T22:05:34] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:35] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md' succeeded in 696ms:

[2025-10-07T22:05:35] tokens used: 93,108
[2025-10-07T22:05:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:37] thinking

**Preparing commit message**
[2025-10-07T22:05:38] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI φ memo guidance - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:39] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: CLI φ memo guidance - tests: not run"' succeeded in 755ms:
[feature/spec-based-2 10333c0] SUPERVISOR: CLI φ memo guidance - tests: not run
 3 files changed, 31 insertions(+), 30 deletions(-)
[2025-10-07T22:05:39] tokens used: 93,374
[2025-10-07T22:05:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:40] thinking

**Pushing changes to remote**
[2025-10-07T22:05:41] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:43] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.31s:
To github.com:hoidn/nanoBragg.git
   f584650..10333c0  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T22:05:43] tokens used: 93,699
[2025-10-07T22:05:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:48] thinking

**Appending update to galph_memory.md**
[2025-10-07T22:05:54] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-10-07 (galph loop — φ=0 spec alignment)
- Reconfirmed spec mandate ("'`specs/spec-a-core.md:211-214`) that every φ step re-rotates the lattice and that C’s carryover bug is quarantined in `docs/bugs/verified_c_bugs.md:166-204`.
- Noted PyTorch still mirrors the bug via `_phi_last_cache` (`src/nanobrag_torch/models/crystal.py:1097-1198`); updated `docs/fix_plan.md` Next Actions and `plans/active/cli-noise-pix0/plan.md` context to call this out and require a parity shim decision.
- Issued new `input.md` (Docs mode) directing Ralph to refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, log the attempt, cross-link the plan, and run the collect-only selector with `KMP_DUPLICATE_LIB_OK=TRUE`.
- No tests run; repo clean after commit `10333c0`.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:54] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-10-07 (galph loop — φ=0 spec alignment)
- Reconfirmed spec mandate ("'`specs/spec-a-core.md:211-214`) that every φ step re-rotates the lattice and that C’s carryover bug is quarantined in `docs/bugs/verified_c_bugs.md:166-204`.
- Noted PyTorch still mirrors the bug via `_phi_last_cache` (`src/nanobrag_torch/models/crystal.py:1097-1198`); updated `docs/fix_plan.md` Next Actions and `plans/active/cli-noise-pix0/plan.md` context to call this out and require a parity shim decision.
- Issued new `input.md` (Docs mode) directing Ralph to refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, log the attempt, cross-link the plan, and run the collect-only selector with `KMP_DUPLICATE_LIB_OK=TRUE`.
- No tests run; repo clean after commit `10333c0`.
EOF
' succeeded in 683ms:

[2025-10-07T22:05:54] tokens used: 94,310
[2025-10-07T22:05:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:05:58] thinking

**Checking for unstaged changes**
[2025-10-07T22:05:59] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:05:59] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 698ms:
 M galph_memory.md
[2025-10-07T22:05:59] tokens used: 95,764
[2025-10-07T22:05:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:06:02] thinking

**Committing and pushing changes**
[2025-10-07T22:06:02] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:06:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add galph_memory.md' succeeded in 706ms:

[2025-10-07T22:06:03] tokens used: 96,324
[2025-10-07T22:06:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:06:05] thinking

**Committing code changes**
[2025-10-07T22:06:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: φ spec memo log - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:06:07] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: φ spec memo log - tests: not run"' succeeded in 733ms:
[feature/spec-based-2 0dfc46c] SUPERVISOR: φ spec memo log - tests: not run
 1 file changed, 6 insertions(+)
[2025-10-07T22:06:07] tokens used: 96,620
[2025-10-07T22:06:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:06:09] thinking

**Pushing changes to remote**
[2025-10-07T22:06:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:06:12] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.36s:
To github.com:hoidn/nanoBragg.git
   10333c0..0dfc46c  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T22:06:12] tokens used: 96,940
[2025-10-07T22:06:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.


[2025-10-07T22:06:20] thinking

**Preparing final summary message**

I’m gathering all change details to craft a clear final message that highlights analysis and updates—like modifications to docs/fix_plan.md, plans/active/cli-noise-pix0/plan.md, input.md, and galph_memory—while referencing relevant spec and code lines. I’ll include a concise bullet list covering main findings, instructions to Ralph, and next steps, ensuring everything is neatly explained and easy to follow.
[2025-10-07T22:06:22] codex

- Clarified that the spec already forbids φ carryover (`specs/spec-a-core.md:211`) and that the C defect stays quarantined in `docs/bugs/verified_c_bugs.md:166`, noting PyTorch still mirrors the bug via `_phi_last_cache` (`src/nanobrag_torch/models/crystal.py:1097`).
- Updated the CLI parity fix-plan guidance so Next Actions call out the exact spec, bug, and code loci and require a spec-compliant default plus an explicit parity shim (`docs/fix_plan.md:459`).
- Refreshed the active CLI plan’s context to point at the same anchors and insist the remediation removes or gates `_phi_last_cache` after CLI validation (`plans/active/cli-noise-pix0/plan.md:6`).
- Reissued the steering memo directing Ralph to rewrite the diagnosis note, log an Attempt, cross-link the plan, and run the collect-only guard with `KMP_DUPLICATE_LIB_OK=TRUE` (`input.md`).
- Logged the loop in supervisor memory so future runs know the spec citations, outstanding shim decision, and the clean state after commit `0dfc46c` (`galph_memory.md`).

Next steps for Ralph: deliver the refreshed diagnosis memo, append the Attempt entry, update the plan cross-link, and capture the collect-only output in the reports tree.
[2025-10-07T22:06:23] tokens used: 97,685
[2025-10-07T22:06:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 294d8c8453241708dce3f58aba1c4c5cfcdc9f65..0e405c626bff1f683d44355bb5defd9cd6a43f53
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-26 refresh → galph loop i=112):
 1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing specs/spec-a-core.md §4 and docs/bugs/verified_c_bugs.md §C-PARITY-001 to clarify the spec-mandated behavior (no carryover) vs the C reference bug, and outline how PyTorch will deliver spec-compliant defaults with an explicit parity shim if needed. Link the memo in this fix-plan entry.
+2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 7655f0be3f145486c4c27a9c2d43079f196b739d..99047b750b8133a47f76adb0fd3e3bf1549ffabd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): specs/spec-a-core.md §4 states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in docs/bugs/verified_c_bugs.md (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior.
+- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
 - Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
 - Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   0dfc46c..cd9774b  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=114...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=114
Updating cd9774b..3339e88
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   cd9774b..3339e88  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=114
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 3339e88..0856435
Fast-forward
 plans/active/cli-noise-pix0/plan.md                |   2 +-
 .../phase_l/rot_vector/collect_only.log            | 666 +--------------------
 2 files changed, 4 insertions(+), 664 deletions(-)
From github.com:hoidn/nanoBragg
   3339e88..0856435  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 0856435..7c6dfef
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   0856435..7c6dfef  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=115
Ralph completed iteration 114; proceeding to 115
