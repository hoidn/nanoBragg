Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=25
To github.com:hoidn/nanoBragg.git
   e26f8c6..e339f48  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T06:45:28] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T06:45:28] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
Phase Gate (Evidence): If the active plan phase is Evidence, Do Now SHALL be evidence‑only: run the authoritative reference reproduction commands and capture the required artifacts; at most run the project’s test discovery (no execution). Do not include runnable tests.

Validation Preflight (tests): Before listing any test file/identifier in Do Now, validate that it resolves via the project’s documented test discovery; if validation fails, omit tests and note “(none — evidence‑only this loop)” and add a TODO in docs/fix_plan.md documenting the missing mapping.

Human Summary (input.md header): Prepend a short summary block with the following lines (validated where applicable):
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>

Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it relate to? 
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? if not, fix. things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, this should be addressed. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
- Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
- Header: timestamp, current commit hash (short), author “galph”, and Active Focus summary.
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it. If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T06:45:30] thinking

**Executing git pull with timeout**
[2025-10-06T06:45:31] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' succeeded in 2.11s:
Already up to date.
[2025-10-06T06:45:33] tokens used: 12,625

[2025-10-06T06:45:35] thinking

**Preparing to read latest galph_memory entry**
[2025-10-06T06:45:35] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n +1 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:36] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n +1 galph_memory.md' succeeded in 691ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T06:45:36] tokens used: 12,836

[2025-10-06T06:45:40] thinking

**Preparing to read key documentation files**
[2025-10-06T06:45:41] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:41] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' succeeded in 683ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T06:45:41] tokens used: 15,776

[2025-10-06T06:45:43] thinking

**Switching to next spec file**
[2025-10-06T06:45:43] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:44] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' succeeded in 669ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T06:45:44] tokens used: 17,503

[2025-10-06T06:45:45] thinking

**Reviewing shard instructions**
[2025-10-06T06:45:47] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:47] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' succeeded in 711ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T06:45:47] tokens used: 17,793

[2025-10-06T06:45:49] thinking

**Reviewing architecture and docs**
[2025-10-06T06:45:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' succeeded in 721ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T06:45:50] tokens used: 20,497

[2025-10-06T06:45:51] thinking

**Opening debugging documentation**
[2025-10-06T06:45:52] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:53] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' succeeded in 698ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T06:45:53] tokens used: 22,463

[2025-10-06T06:45:55] thinking

**Checking size of fix_plan.md**
[2025-10-06T06:45:56] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:45:57] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/fix_plan.md' succeeded in 663ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T06:45:57] tokens used: 25,000

[2025-10-06T06:45:58] thinking

**Planning testing strategy**
[2025-10-06T06:45:59] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:00] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' succeeded in 718ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T06:46:00] tokens used: 27,948

[2025-10-06T06:46:03] thinking

**Starting strategic codebase review**
[2025-10-06T06:46:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:04] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' succeeded in 714ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T06:46:04] tokens used: 30,717

[2025-10-06T06:46:06] thinking

**Starting to review relevant plans**
[2025-10-06T06:46:07] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:07] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' succeeded in 713ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |

### Phase B — CLI & Config Wiring
Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T06:46:07] tokens used: 30,947

[2025-10-06T06:46:09] thinking

**Checking for truncated output**
[2025-10-06T06:46:10] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '120,240p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:11] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '120,240p' plans/active/cli-noise-pix0/plan.md" succeeded in 721ms:

[2025-10-06T06:46:11] tokens used: 32,555

[2025-10-06T06:46:14] thinking

**Checking file completion**
[2025-10-06T06:46:14] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:15] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l plans/active/cli-noise-pix0/plan.md' succeeded in 709ms:
     112 plans/active/cli-noise-pix0/plan.md
[2025-10-06T06:46:15] tokens used: 32,783

[2025-10-06T06:46:20] thinking

**Checking file truncation and next file**
[2025-10-06T06:46:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:21] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' succeeded in 684ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T06:46:21] tokens used: 33,088

[2025-10-06T06:46:31] thinking

**Reviewing active plans and phases**
[2025-10-06T06:46:32] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 912ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T06:46:33] tokens used: 35,915

[2025-10-06T06:46:38] thinking

**Retrieving specific file section**
[2025-10-06T06:46:39] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '448,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:40] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '448,620p' docs/fix_plan.md" succeeded in 752ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
- Attempts History:
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
    Observations/Hypotheses:
[2025-10-06T06:46:40] tokens used: 36,266

[2025-10-06T06:46:44] thinking

**Checking for extended plan phases**

I want to find out if the plan continues past Phase F and includes Phase H or others, since the current view feels truncated. I'll look toward the bottom of the plan file using `sed` to see if there are more details beyond what I've already seen.
[2025-10-06T06:46:45] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 100 plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:45] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 100 plans/active/cli-noise-pix0/plan.md' succeeded in 706ms:
| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |

### Phase B — CLI & Config Wiring
Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
Prereqs: Phase A report published; confirm existing CLI regression tests green (run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_entrypoint.py -q` if available).
Exit Criteria: `nanoBragg --help` lists both flags; manual dry run of supervisor command completes argument parsing and produces float image without raising.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| B1 | Extend argparse surface | [D] | `create_parser()` now exposes both flags (see `src/nanobrag_torch/__main__.py:187-206`); keep help text aligned with `nanoBragg.c` usage block. |
| B2 | Thread `-nonoise` to simulator | [D] | `parse_and_validate_args()` records `suppress_noise`, and the noise writer at `__main__.py:1170-1199` skips SMV noise output when true. Add warning copy before closing Phase C. |
| B3 | Support pix0 overrides | [D] | Fixed detector override assignment bug (2025-10-05). `_calculate_pix0_vector()` now assigns to `self.pix0_vector` and sets `r_factor=1.0`, `distance_corrected=distance`. Device/dtype coercion preserved via `.to()`. Verified: CLI `-pix0_vector_mm 100 200 300` → tensor([0.1, 0.2, 0.3]). |
| B4 | Preserve meter and mm flag parity | [D] | Run paired parser smoke checks proving `-pix0_vector` (meters) and `-pix0_vector_mm` (millimetres) yield identical `pix0_override_m` tensors and that dual-flag usage raises `ValueError`. Record commands + stdout in `reports/2025-10-cli-flags/phase_b/detector/pix0_override_equivalence.txt`. ✅ 2025-10-05: Verified parser equivalence and dual-flag ValueError handling. |
| B5 | Unit & cache hygiene | [D] | Capture a detector mini-harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python - <<'PY' …`) showing `Detector(..., pix0_override_m=...)` preserves device/dtype after `invalidate_cache()` and when moved across CPU/CUDA. Store log in `reports/2025-10-cli-flags/phase_b/detector/cache_handoff.txt`; note any follow-on assertions needed in code/tests. ✅ 2025-10-05: Cache stability confirmed on CPU/CUDA with device/dtype preservation. |

### Phase C — Validation & Documentation
[2025-10-06T06:46:45] tokens used: 39,342

[2025-10-06T06:46:54] thinking

**Analyzing plan file truncation**
[2025-10-06T06:46:55] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '100,112p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:46:56] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '100,112p' plans/active/cli-noise-pix0/plan.md" succeeded in 913ms:
| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |

### Phase I — Polarization Alignment (follow-up)
Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
Prereqs: Phases F–H complete; traces show `F_latt` parity.
Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
[2025-10-06T06:46:56] tokens used: 41,359

[2025-10-06T06:46:59] thinking

**Identifying current active phase**
[2025-10-06T06:47:00] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '80,108p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:01] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '80,108p' plans/active/cli-noise-pix0/plan.md" succeeded in 702ms:
### Phase G — MOSFLM Matrix Orientation Support
Goal: Preserve full crystal orientation from `-mat` files so PyTorch matches C lattice vectors and downstream physics.
Prereqs: Detector parity (Phase F) achieved or at least traced; clarity on orientation data flow.
Exit Criteria: Crystal trace (rotated a/b/c vectors) aligns with C for the supervisor command; CLI accepts orientation without manual overrides.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| G1 | Extend CLI config to retain A* vectors | [D] | ✅ Commit 28fc584 stores MOSFLM reciprocal vectors from `-mat` in `parse_and_validate_args` and threads them into `CrystalConfig`; 26-case CLI regression sweep captured in Attempt #15 notes. |
| G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
| G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |

### Phase H — Lattice Structure Factor Alignment
Goal: Ensure the CLI-provided beam vector propagates through Detector→Simulator and bring scattering/lattice parity back in line before polarization work.
Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
Exit Criteria: Trace comparison shows `pix0_vector` components matching C within 5e-5 m, `h`, `k`, `l` fractional components within 1e-3, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
[2025-10-06T06:47:01] tokens used: 42,110

[2025-10-06T06:47:04] thinking

**Preparing for detailed analysis**
[2025-10-06T06:47:05] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:06] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 40 galph_memory.md' succeeded in 735ms:

## 2025-10-06 (galph loop — Phase H lattice kickoff)
- Sync clean (4dab2ea). Reviewed required specs, architecture docs, testing strategy, `plans/active/*`, and `docs/fix_plan.md` per SOP before analysis.
- Goal 1 status: Orientation ingestion + MOSFLM transpose fixes landed (commits 2bc6f4e, b73f0e2), yet traces still show `hkl_frac` ≈ (2.098, 2.017, -12.871) vs C (2.001, 1.993, -12.991) and `F_latt` 62.68 vs 3.56e4, so intensity parity remains off by ~1e5×.
- Updated `plans/active/cli-noise-pix0/plan.md` to add Phase H (lattice structure factor alignment) with tasks H1–H3 and moved polarization to new Phase I. Context now calls out the lattice gap and sequencing (H before I).
- Refreshed `docs/fix_plan.md` `[CLI-FLAGS-003]` entry: status line now lists phases completed, Next Actions target Phase H artifacts under `reports/2025-10-cli-flags/phase_h/`, exit criteria include Phase H lattice + Phase I polarization.
- Coin flip=heads triggered a review of Ralph’s recent work: orientation ingestion commits solid (tests pass, MOSFLM parity proven) but Phase H remains unstarted; harness still overrides beam vector manually. Feedback: evidence first, no polarization tweaks yet.
- Vectorization goal unchanged — plan stays at Phase A evidence until CLI parity narrows the gap.
- Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
- Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.

## 2025-10-06 (galph loop)
- Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
- Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
- docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
- Authored new input.md (Do Now: Phase H2 beam propagation + targeted pytest) and committed with message "SUPERVISOR: CLI H2 plan refresh - tests: not run".
- Working tree clean post-push (feature/spec-based-2 @ 35cd319).
 - Follow-up: Ralph to wire detector.beam_vector into Simulator, rerun beam trace, and land targeted pytest per input.md.
## 2025-10-06 (galph loop — Phase H3 evidence prep)
- git sync clean (ba649f0). Reviewed required specs/arch/testing docs plus plans/active entries before analysis per SOP.
[2025-10-06T06:47:06] tokens used: 43,538

[2025-10-06T06:47:09] thinking

**Planning codebase analysis**
[2025-10-06T06:47:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:11] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 813ms:

[2025-10-06T06:47:11] tokens used: 45,642

[2025-10-06T06:47:13] thinking

**Reviewing recent commits**
[2025-10-06T06:47:14] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git log -5 --oneline' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:15] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git log -5 --oneline' succeeded in 696ms:
e339f48 [SYNC i=25] actor=galph status=running
e26f8c6 [SYNC i=25] actor=ralph → next=galph status=ok ralph_commit=0f18548
0f18548 [CLI-FLAGS-003] Phase H3 evidence complete - pix0 divergence root cause quantified
6b4ae59 [SYNC i=24] actor=ralph status=running
2c30055 [SYNC i=24] actor=galph → next=ralph status=ok galph_commit=88092d3
[2025-10-06T06:47:15] tokens used: 45,846

[2025-10-06T06:47:17] thinking

**Checking commit details**
[2025-10-06T06:47:17] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git show 0f18548' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:18] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git show 0f18548' succeeded in 763ms:
commit 0f18548492d002138cd17a79cae327394df0d2c3
Author: ollie <ohoidn>
Date:   Sun Oct 5 23:44:15 2025 -0700

    [CLI-FLAGS-003] Phase H3 evidence complete - pix0 divergence root cause quantified
    
    Evidence-only loop per supervisor directive. No code changes.
    
    ROOT CAUSE: PyTorch applies raw -pix0_vector_mm override without BEAM-pivot
    transformation that C applies. 1.14 mm Y-component error is FIRST DIVERGENCE
    cascading through: pix0 → pixel position → scattering vector → Miller indices → F_latt.
    
    Metrics:
    - pix0 delta: 1.14 mm Y-component
    - Miller index deltas: within 1e-3 threshold (Δh=0.00008, Δk=0.00003, Δl=0.0003)
    - F_latt component differences: 0.3-3.4%
    - Test collection: successful (pytest --collect-only -q passed)
    
    Artifacts generated:
    - trace_py_after_H3_refresh.log - fresh PyTorch trace (50 lines)
[2025-10-06T06:47:18] tokens used: 46,166

[2025-10-06T06:47:21] thinking

**Analyzing commit and plan status**
[2025-10-06T06:47:22] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '360,448p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:22] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '360,448p' docs/fix_plan.md" succeeded in 690ms:
    Artifacts: None yet; must create `reports/routing/<date>-loop-audit.txt` during Plan Phase A.
    Observations/Hypotheses: Until we capture the audit and restore single-iteration `prompts/debug.md`, automation poses risk of repeated bad pushes (Protected Assets rule reminder: do not delete `loop.sh`).
    Next Actions: Ralph to execute plan tasks A1–A3 before any further automation runs; supervisor to hold routing plan open until audit log and corrective diff exist.
  * [2025-10-06] Attempt #2 — Result: regression. Discovered automation script once again runs `prompts/main.md` inside a fixed loop, violating routing guard and spamming `git push`. Plan rebooted (now archived at `plans/archive/routing-loop-guard/plan.md`) with Phase A tasks pending at the time.
    Metrics: n/a
    Artifacts: To be captured during Phase A (see plan tasks A1–A3).
    Observations/Hypotheses: Likely rebase dropped prior fix; guard needs reinstatement alongside single-iteration workflow.
    Next Actions: Execute Phase A to document current state, then complete Phases B–C per plan.
  * [2025-10-01] Attempt #1 — Result: success. `loop.sh` now runs a single `git pull` and invokes `prompts/debug.md` only; verification captured in `reports/routing/2025-10-01-loop-verify.txt`.
    Metrics: n/a
    Artifacts: reports/routing/2025-10-01-loop-verify.txt
    Observations/Hypotheses: Guard prevents Ralph from re-entering prompts/main.md while parity tests fail.
    Next Actions: Monitor automation once AT suite is fully green before permitting main prompt.
  * [2025-10-01] Attempt #5 — Result: success (plan Phases A–C complete). Captured audit showing violations (40-iteration loop using prompts/main.md with unconditional push), remediated script to single-execution prompts/debug.md with git pull --rebase and conditional push, verified compliance.
    Metrics: Crystal geometry smoke test 19/19 passed post-change; no regressions.
    Artifacts: reports/routing/20251001-loop-audit.txt (Phase A), reports/routing/20251001-compliance-verified.txt (Phase C), loop.sh (git diff).
    Observations/Hypotheses: Regression had doubled to 40 iterations from prior 20; routing guard now restored per plan exit criteria (single debug.md execution, conditional push, rebase-before-work).
    Next Actions: ✅ Plan archived; continue monitoring automation for future regressions.
  * [2025-10-01] Attempt #9 — Result: success (audit verification complete). Re-ran Phase A audit to confirm loop.sh remains compliant after commit 853cf08 restoration.
    Metrics: loop.sh matches ffd9a5c baseline exactly (zero diff), all three guard elements present.
[2025-10-06T06:47:22] tokens used: 49,732

[2025-10-06T06:47:25] thinking

**Preparing for step analysis**
[2025-10-06T06:47:26] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_h/implementation_notes.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:26] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat reports/2025-10-cli-flags/phase_h/implementation_notes.md' succeeded in 719ms:
# Phase H3 Implementation Notes

**Date:** 2025-10-05
**Focus:** Lattice factor mismatch diagnosis

## Validated Components ✅

1. **Incident Beam Vector:** Perfect match after H2 fix (commit 8c1583d)
2. **Reciprocal Vectors:** rot_a_star, rot_b_star, rot_c_star identical to C (Phase G3)
3. **Orientation Matrix:** MOSFLM A* ingestion correct (Phase G2)

## Outstanding Issues 🔴

### Issue 1: F_latt Component Sign and Magnitude
- C produces positive values ~25-40
- PyTorch produces mix of signs, magnitude ~2-10
- Product differs by 568× (35636 vs 62.7)

### Issue 2: Miller Indices Fractional Precision
- h: Δ≈0.097 (exceeds 1e-3 threshold)
[2025-10-06T06:47:26] tokens used: 52,116

[2025-10-06T06:47:28] thinking

**Checking specific report file**
[2025-10-06T06:47:29] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 reports/2025-10-cli-flags/phase_h/pix0_reproduction.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:30] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 40 reports/2025-10-cli-flags/phase_h/pix0_reproduction.md' succeeded in 701ms:
# Pix0 + Lattice Reproduction
pix0_override_m: -0.216336293000, 0.215205512000, -0.230200866000
pix0_c_formula_m: -0.216336514802, 0.215206668836, -0.230198010449
pix0_delta_m: -0.000000221802, 0.000001156836, 0.000002855551

## Pixel positions (meters)
pixel_py: -0.099504821084, 0.035709685862, -0.231093193780
pixel_c: -0.099505042886, 0.035710842698, -0.231090338228
pixel_delta: -0.000000221802, 0.000001156836, 0.000002855551

## Scattering vectors (1/Å)
scattering_py: -0.401381653140, 0.143856611876, 0.092791036024
scattering_c: -0.401386249330, 0.143862601024, 0.092793940575
scattering_delta: -0.000004596191, 0.000005989148, 0.000002904551

## Miller indices (fractional)
hkl_py: 2.099910581725, 2.010431773566, -12.869255026506
hkl_c: 2.099829406661, 2.010404082040, -12.869526246456
hkl_delta: -0.000081175065, -0.000027691527, -0.000271219950

[2025-10-06T06:47:30] tokens used: 55,432

[2025-10-06T06:47:48] thinking

**Evaluating plan phases and preparing analysis**

I'm reviewing the current long-term goals and the plan status, focusing on whether evidence gathering (H3) is complete and if the next step (H4 implementation fix) should start. I'll analyze the code around `pix0` in the detector module to inform the planned fix and consider updating plan statuses accordingly.
[2025-10-06T06:47:50] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0" src/nanobrag_torch/models/detector.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:51] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0" src/nanobrag_torch/models/detector.py' succeeded in 885ms:
134:        # Calculate and cache pix0_vector (position of first pixel)
135:        self._calculate_pix0_vector()
144:        self._cached_pix0_vector = self.pix0_vector.clone()
147:        # These will be set properly in _calculate_pix0_vector
152:        if not hasattr(self, 'pix0_vector'):
153:            self.pix0_vector: Optional[torch.Tensor] = None
237:        # Recalculate pix0_vector when geometry changes
238:        self._calculate_pix0_vector()
250:            tuple: (beam_f_m, beam_s_m) in meters for use in pix0_vector calculation
326:    def _calculate_pix0_vector(self):
330:        This follows the C-code convention where pix0_vector represents the
343:        - BEAM pivot: pix0_vector = -Fbeam*fdet_vec - Sbeam*sdet_vec + distance*beam_vec
344:        - SAMPLE pivot: Calculate pix0_vector BEFORE rotations, then rotate it
362:            pix0_vector[1] = -Fclose*fdet_vector[1]-Sclose*sdet_vector[1]+close_distance*odet_vector[1];
363:            pix0_vector[2] = -Fclose*fdet_vector[2]-Sclose*sdet_vector[2]+close_distance*odet_vector[2];
364:            pix0_vector[3] = -Fclose*fdet_vector[3]-Sclose*sdet_vector[3]+close_distance*odet_vector[3];
367:            rotate(pix0_vector,pix0_vector,detector_rotx,detector_roty,detector_rotz);
368:            rotate_axis(pix0_vector,pix0_vector,twotheta_axis,detector_twotheta);
375:            pix0_vector[1] = -Fbeam*fdet_vector[1]-Sbeam*sdet_vector[1]+distance*beam_vector[1];
376:            pix0_vector[2] = -Fbeam*fdet_vector[2]-Sbeam*sdet_vector[2]+distance*beam_vector[2];
[2025-10-06T06:47:51] tokens used: 56,808

[2025-10-06T06:47:53] thinking

**Inspecting _calculate_pix0_vector function**
[2025-10-06T06:47:54] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '326,550p' src/nanobrag_torch/models/detector.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:47:55] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '326,550p' src/nanobrag_torch/models/detector.py" succeeded in 677ms:
    def _calculate_pix0_vector(self):
        """
        Calculate the position of the first pixel (0,0) in 3D space.

        This follows the C-code convention where pix0_vector represents the
        3D position of pixel (0,0), taking into account the beam center offset
        and detector positioning.

        The calculation depends on:
        1. detector_pivot mode (BEAM vs SAMPLE)
        2. detector convention (MOSFLM vs CUSTOM)
        3. r-factor distance correction (AT-GEO-003)

        CRITICAL: C code switches to CUSTOM convention when twotheta_axis is
        explicitly specified and differs from MOSFLM default [0,0,-1].
        CUSTOM convention removes the +0.5 pixel offset that MOSFLM adds.

        - BEAM pivot: pix0_vector = -Fbeam*fdet_vec - Sbeam*sdet_vec + distance*beam_vec
        - SAMPLE pivot: Calculate pix0_vector BEFORE rotations, then rotate it

[2025-10-06T06:47:55] tokens used: 58,671

[2025-10-06T06:48:01] thinking

**Planning fix for pix0_vector override**
[2025-10-06T06:48:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0_vector" nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:03] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0_vector" nanoBragg.c' exited 2 in 694ms:
rg: nanoBragg.c: IO error for operation on nanoBragg.c: No such file or directory (os error 2)
[2025-10-06T06:48:03] tokens used: 61,718

[2025-10-06T06:48:05] thinking

**Checking file location**
[2025-10-06T06:48:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:06] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls' succeeded in 680ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
PHASE_5_IMPLEMENTATION_SUMMARY.md
[2025-10-06T06:48:06] tokens used: 61,974

[2025-10-06T06:48:10] thinking

**Searching for nanoBragg.c file**
[2025-10-06T06:48:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0_vector" golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:11] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0_vector" golden_suite_generator/nanoBragg.c' succeeded in 691ms:
266:    double pix0_vector[4]  = {0,0,0,0};
740:            if(strstr(argv[i], "-pix0_vector") && (argc > (i+3)))
743:                pix0_vector[0] = 1.0;
744:                pix0_vector[1] = atof(argv[i+1]);
745:                pix0_vector[2] = atof(argv[i+2]);
746:                pix0_vector[3] = atof(argv[i+3]);
1386:        printf("\t-pix0_vector     \tvector from crystal to first pixel in image (default: beam centered on detector)\n");
1739:        pix0_vector[1] = -Fclose*fdet_vector[1]-Sclose*sdet_vector[1]+close_distance*odet_vector[1];
1740:        pix0_vector[2] = -Fclose*fdet_vector[2]-Sclose*sdet_vector[2]+close_distance*odet_vector[2];
1741:        pix0_vector[3] = -Fclose*fdet_vector[3]-Sclose*sdet_vector[3]+close_distance*odet_vector[3];
1744:        rotate(pix0_vector,pix0_vector,detector_rotx,detector_roty,detector_rotz);
1745:        rotate_axis(pix0_vector,pix0_vector,twotheta_axis,detector_twotheta);
1833:        pix0_vector[1] = -Fbeam*fdet_vector[1]-Sbeam*sdet_vector[1]+distance*beam_vector[1];
1834:        pix0_vector[2] = -Fbeam*fdet_vector[2]-Sbeam*sdet_vector[2]+distance*beam_vector[2];
1835:        pix0_vector[3] = -Fbeam*fdet_vector[3]-Sbeam*sdet_vector[3]+distance*beam_vector[3];
1838:        /* Log final pix0_vector */
1839:        trace_vec("pix0_vector", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
1844:    Fclose         = -dot_product(pix0_vector,fdet_vector);
1845:    Sclose         = -dot_product(pix0_vector,sdet_vector);
1846:    close_distance =  dot_product(pix0_vector,odet_vector);
[2025-10-06T06:48:11] tokens used: 63,623

[2025-10-06T06:48:27] thinking

**Investigating -pix0_vector handling**
[2025-10-06T06:48:29] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1720,1850p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:30] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1720,1850p' golden_suite_generator/nanoBragg.c" succeeded in 957ms:

    if(beam_convention == ADXV) printf("adxv");
    if(beam_convention == MOSFLM) printf("mosflm");
    if(beam_convention == XDS) printf("xds");
    if(beam_convention == DIALS) printf("dials");
    if(beam_convention == DENZO) printf("denzo");
    if(beam_convention == CUSTOM) printf("custom");
    printf(" convention selected.\n");

    /* first off, what is the relationship between the two "beam centers"? */
    rotate(odet_vector,vector,detector_rotx,detector_roty,detector_rotz);
    ratio = dot_product(beam_vector,vector);
    if(ratio == 0.0) { ratio = DBL_MIN; }
    if(isnan(close_distance)) close_distance = fabs(ratio*distance);
    distance = close_distance/ratio;

    if(detector_pivot == SAMPLE){
        printf("pivoting detector around sample\n");
        /* initialize detector origin before rotating detector */
        pix0_vector[1] = -Fclose*fdet_vector[1]-Sclose*sdet_vector[1]+close_distance*odet_vector[1];
[2025-10-06T06:48:30] tokens used: 64,936

[2025-10-06T06:48:32] thinking

**Checking usages of pix0_vector[0]**
[2025-10-06T06:48:33] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\[0\\]\" golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:34] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\[0\\]\" golden_suite_generator/nanoBragg.c" succeeded in 675ms:
743:                pix0_vector[0] = 1.0;
[2025-10-06T06:48:34] tokens used: 67,523

[2025-10-06T06:48:36] thinking

**Searching for pix0_vector[0] checks**
[2025-10-06T06:48:36] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\[0\\]\" -g\"*/*.c\"" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:37] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\[0\\]\" -g\"*/*.c\"" succeeded in 682ms:
golden_suite_generator/nanoBragg.c:743:                pix0_vector[0] = 1.0;
[2025-10-06T06:48:37] tokens used: 67,839

[2025-10-06T06:48:41] thinking

**Investigating pix0_vector usage**
[2025-10-06T06:48:43] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\s*\\[0\\]\" golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:44] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\s*\\[0\\]\" golden_suite_generator/nanoBragg.c" succeeded in 685ms:
743:                pix0_vector[0] = 1.0;
[2025-10-06T06:48:44] tokens used: 68,195

[2025-10-06T06:48:51] thinking

**Investigating pix0_vector override usage**
[2025-10-06T06:48:52] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"if\\s*\\(pix0_vector\" golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:53] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"if\\s*\\(pix0_vector\" golden_suite_generator/nanoBragg.c" exited 1 in 759ms:

[2025-10-06T06:48:53] tokens used: 68,759

[2025-10-06T06:48:58] thinking

**Analyzing override and BEAM vector usage**
[2025-10-06T06:48:59] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "Fbeam" golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:48:59] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "Fbeam" golden_suite_generator/nanoBragg.c' succeeded in 717ms:
278:    double Fbeam=NAN,Sbeam=NAN;
1184:    if(isnan(Fbeam)) Fbeam = Fclose;
1204:        Fbeam = Xbeam;
1220:        Fbeam = Ybeam + 0.5*pixel_size;
1235:        Fbeam = Ybeam + 0.0*pixel_size;
1250:        Fbeam = Xbeam;
1265:        Fbeam = Xbeam;
1273:        Fbeam = Xbeam;
1822:        printf("TRACE_C:convention_mapping=Fbeam←Ybeam_mm(+0.5px),Sbeam←Xbeam_mm(+0.5px),beam_vec=[1 0 0]\n");
1823:        trace_scalar("Fbeam_m", Fbeam);
1828:        trace_vec("term_fast", -Fbeam*fdet_vector[1], -Fbeam*fdet_vector[2], -Fbeam*fdet_vector[3]);
1833:        pix0_vector[1] = -Fbeam*fdet_vector[1]-Sbeam*sdet_vector[1]+distance*beam_vector[1];
1834:        pix0_vector[2] = -Fbeam*fdet_vector[2]-Sbeam*sdet_vector[2]+distance*beam_vector[2];
1835:        pix0_vector[3] = -Fbeam*fdet_vector[3]-Sbeam*sdet_vector[3]+distance*beam_vector[3];
1857:    Fbeam = dot_product(fdet_vector,newvector);
2662:    printf("  Fbeam=%lg Sbeam=%lg\n",Fbeam,Sbeam);
3441:    fprintf(outfile,"ADXV_CENTER_X=%g;\nADXV_CENTER_Y=%g;\n",Fbeam*1000.0,(detsize_s-Sbeam)*1000);
3442:    fprintf(outfile,"MOSFLM_CENTER_X=%g;\nMOSFLM_CENTER_Y=%g;\n",(Sbeam-0.5*pixel_size)*1000.0,(Fbeam-0.5*pixel_size)*1000);
3443:    fprintf(outfile,"DENZO_X_BEAM=%g;\nDENZO_Y_BEAM=%g;\n",(Sbeam-0.0*pixel_size)*1000.0,(Fbeam-0.0*pixel_size)*1000);
3540:    fprintf(outfile,"ADXV_CENTER_X=%g;\nADXV_CENTER_Y=%g;\n",Fbeam*1000.0,(detsize_s-Sbeam)*1000);
[2025-10-06T06:48:59] tokens used: 69,236

[2025-10-06T06:49:02] thinking

**Checking override handling in nanoBragg.c**
[2025-10-06T06:49:04] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1180,1270p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:49:05] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1180,1270p' golden_suite_generator/nanoBragg.c" succeeded in 850ms:
    if(isnan(Fclose)) Fclose = (detsize_f - 0*pixel_size)/2.0;
    if(isnan(Sclose)) Sclose = (detsize_s + 0*pixel_size)/2.0;
    if(isnan(Xclose)) Xclose = Fclose;
    if(isnan(Yclose)) Yclose = Sclose;
    if(isnan(Fbeam)) Fbeam = Fclose;
    if(isnan(Sbeam)) Sbeam = Sclose;
    if(roi_xmin < 0) roi_xmin = 0;
    if(roi_xmax < 0) roi_xmax = fpixels;
    if(roi_ymin < 0) roi_ymin = 0;
    if(roi_ymax < 0) roi_ymax = spixels;
    progress_pixels = (roi_xmax-roi_xmin+1)*(roi_ymax-roi_ymin+1);

    if(beam_convention == ADXV)
    {
        /* first pixel is at 0,0 pix and pixel_size,pixel_size*npixels mm */
        if(isnan(Xbeam)) Xbeam = (detsize_f + pixel_size)/2.0;
        if(isnan(Ybeam)) Ybeam = (detsize_s - pixel_size)/2.0;
           beam_vector[1]=  0;    beam_vector[2]=  0;    beam_vector[3]=  1;
           fdet_vector[1]=  1;    fdet_vector[2]=  0;    fdet_vector[3]=  0;
           sdet_vector[1]=  0;    sdet_vector[2]= -1;    sdet_vector[3]=  0;
[2025-10-06T06:49:05] tokens used: 70,123

[2025-10-06T06:49:07] thinking

**Continuing to review custom code**
[2025-10-06T06:49:07] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1270,1370p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:49:08] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1270,1370p' golden_suite_generator/nanoBragg.c" succeeded in 693ms:
    {
        if(isnan(Xbeam)) Xbeam = Xclose;
        if(isnan(Ybeam)) Ybeam = Yclose;
        Fbeam = Xbeam;
        Sbeam = Ybeam;
        Fclose = Xbeam;
        Sclose = Ybeam;
    }

    /* straighten up vectors */
    unitize(beam_vector,beam_vector);
    unitize(fdet_vector,fdet_vector);
    unitize(sdet_vector,sdet_vector);
    if(unitize(odet_vector,odet_vector) != 1.0)
    {
        printf("WARNING: auto-generating odet_vector\n");
        cross_product(fdet_vector,sdet_vector,odet_vector);
        unitize(odet_vector,odet_vector);
    }
    unitize(polar_vector,polar_vector);
[2025-10-06T06:49:08] tokens used: 72,253

[2025-10-06T06:49:32] thinking

**Analyzing pix0 override usage**
[2025-10-06T06:49:34] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\[1\\]\" golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:49:35] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && rg -n \"pix0_vector\\[1\\]\" golden_suite_generator/nanoBragg.c" succeeded in 1.00s:
744:                pix0_vector[1] = atof(argv[i+1]);
1739:        pix0_vector[1] = -Fclose*fdet_vector[1]-Sclose*sdet_vector[1]+close_distance*odet_vector[1];
1833:        pix0_vector[1] = -Fbeam*fdet_vector[1]-Sbeam*sdet_vector[1]+distance*beam_vector[1];
1839:        trace_vec("pix0_vector", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
1849:    printf("DETECTOR_PIX0_VECTOR %.15g %.15g %.15g\n", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
1853:    newvector[1] = close_distance/ratio*beam_vector[1]-pix0_vector[1];
2879:                        pixel_pos[1] = Fdet*fdet_vector[1]+Sdet*sdet_vector[1]+Odet*odet_vector[1]+pix0_vector[1];
2937:                                printf("TRACE_C: pix0_vector_meters %.15g %.15g %.15g\n", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
[2025-10-06T06:49:35] tokens used: 75,769

[2025-10-06T06:50:05] thinking

**Analyzing pix0 override handling**
[2025-10-06T06:50:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0_vector" specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:07] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "pix0_vector" specs/spec-a-cli.md' succeeded in 883ms:
60:    - -pix0_vector x y z: Detector origin offset vector (meters) from sample to the first (min fast,
143:- Custom basis vectors or -pix0_vector set convention to CUSTOM and use provided vectors where
[2025-10-06T06:50:07] tokens used: 77,880

[2025-10-06T06:50:16] thinking

**Exploring the codebase**
[2025-10-06T06:50:16] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '40,90p' specs/spec-a-cli.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:17] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '40,90p' specs/spec-a-cli.md" succeeded in 719ms:
Sets pivot to SAMPLE.
    - -point_pixel: Use 1/R^2 solid-angle only (no obliquity).
- Detector orientation:
    - -detector_rotx <deg>, -detector_roty <deg>, -detector_rotz <deg>: Detector rotations about lab
axes (radians internally).
    - -twotheta <deg>: Detector rotation about twotheta_axis.
    - -twotheta_axis x y z: Axis (unit vector) for -twotheta.
    - -curved_det: Treat detector pixels as lying on a sphere so all pixels are equidistant from
sample. Switch only; no argument used.
- Detector absorption:
    - -detector_abs <µm>|inf|0: Attenuation depth (µm); “inf” or 0 disable absorption (μ=0,
thickness=0).
    - -detector_thick <µm>: Sensor thickness (µm).
    - -detector_thicksteps <int> or -thicksteps <int>: Discretization layers through the thickness.
- Beam/conventions:
    - -mosflm, -xds, -adxv, -denzo, -dials: Predefined detector/beam conventions (see Geometry
& conventions).
    - -pivot beam|sample: Override pivot; otherwise set by convention or certain flags as noted.
    - -fdet_vector x y z, -sdet_vector x y z, -odet_vector x y z, -beam_vector x y z, -polar_vector
x y z, -spindle_axis x y z, -twotheta_axis x y z: Custom unit vectors; sets convention to CUSTOM.
[2025-10-06T06:50:17] tokens used: 78,229

[2025-10-06T06:50:23] thinking

**Analyzing pix0_vector handling and rotation**
[2025-10-06T06:50:24] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-vectorization' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:24] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls reports/2025-10-vectorization' exited 1 in 761ms:
ls: reports/2025-10-vectorization: No such file or directory
[2025-10-06T06:50:24] tokens used: 79,682

[2025-10-06T06:50:27] thinking

**Checking latest instructions**
[2025-10-06T06:50:28] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:28] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat input.md' succeeded in 708ms:
timestamp: 2025-10-06 06:37:45Z
commit: ae4ac7f
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3 lattice mismatch diagnosis
Summary: Prove the pix0-driven lattice divergence and log an evidence-backed fix plan before touching detector code.
Phase: Evidence
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q
Artifacts: reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log; reports/2025-10-cli-flags/phase_h/pix0_reproduction.md; reports/2025-10-cli-flags/phase_h/attempt_log.txt

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — evidence: execute the trace harness + pix0 reproduction per How-To Map, then run `pytest --collect-only -q`.
If Blocked: Capture stdout/stderr for any failing command under `reports/2025-10-cli-flags/phase_h/blocked/` and diff against the prior attempt before escalating.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:105 — Phase H3 now requires a C-style pix0 reconstruction plus restored attempt log before implementation.
- docs/fix_plan.md:472 — Next Actions call for demonstrating the ~1.14 mm pix0 delta and propagating it through to h/k/l.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:54 — Latest entry flags Miller index divergence but leaves the detector fix plan blank.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log:1 — Current trace still reflects the mismatched pix0; we need a refreshed run tied to today’s evidence.
- docs/development/testing_strategy.md:1 — Authoritative commands doc; keep `pytest --collect-only -q` as the validation touchpoint for evidence loops.
[2025-10-06T06:50:28] tokens used: 79,870

[2025-10-06T06:50:33] thinking

**Preparing to flip coin for next step**
[2025-10-06T06:50:34] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:35] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 723ms:
heads
[2025-10-06T06:50:35] tokens used: 82,581

[2025-10-06T06:50:38] thinking

**Reviewing recent commits by Ralph**
[2025-10-06T06:50:38] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git log --author=ralph -n 10 --oneline' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:39] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git log --author=ralph -n 10 --oneline' succeeded in 865ms:

[2025-10-06T06:50:39] tokens used: 82,913

[2025-10-06T06:50:42] thinking

**Checking recent git authors**
[2025-10-06T06:50:43] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && git log -n 10 --pretty=format:'%h %an %ad %s'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:43] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && git log -n 10 --pretty=format:'%h %an %ad %s'" succeeded in 682ms:
e339f48 ollie Sun Oct 5 23:45:27 2025 -0700 [SYNC i=25] actor=galph status=running
e26f8c6 ollie Sun Oct 5 23:45:19 2025 -0700 [SYNC i=25] actor=ralph → next=galph status=ok ralph_commit=0f18548
0f18548 ollie Sun Oct 5 23:44:15 2025 -0700 [CLI-FLAGS-003] Phase H3 evidence complete - pix0 divergence root cause quantified
6b4ae59 ollie Sun Oct 5 23:40:29 2025 -0700 [SYNC i=24] actor=ralph status=running
2c30055 ollie Sun Oct 5 23:40:25 2025 -0700 [SYNC i=24] actor=galph → next=ralph status=ok galph_commit=88092d3
88092d3 ollie Sun Oct 5 23:40:01 2025 -0700 SUPERVISOR: CLI H3 evidence plan refresh - tests: not run
ae4ac7f ollie Sun Oct 5 23:31:05 2025 -0700 [SYNC i=24] actor=galph status=running
3279ed9 ollie Sun Oct 5 23:30:54 2025 -0700 [SYNC i=24] actor=ralph → next=galph status=ok ralph_commit=4e0e36e
4e0e36e ollie Sun Oct 5 23:30:09 2025 -0700 [CLI-FLAGS-003] Phase H3 evidence gathering: sincg hypothesis rejected
8d77152 ollie Sun Oct 5 23:25:52 2025 -0700 [SYNC i=23] actor=ralph status=running
[2025-10-06T06:50:43] tokens used: 83,132

[2025-10-06T06:50:46] thinking

**Reviewing recent commits**
[2025-10-06T06:50:47] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git show 4e0e36e' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:50:48] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git show 4e0e36e' succeeded in 695ms:
commit 4e0e36ed0f15bcddcfd42c5e45c3253ed2dbd25b
Author: ollie <ohoidn>
Date:   Sun Oct 5 23:30:09 2025 -0700

    [CLI-FLAGS-003] Phase H3 evidence gathering: sincg hypothesis rejected
    
    Evidence-only loop per input.md Do Now - no code changes.
    
    Investigation Summary:
    - Ran trace harness after H2 beam vector fix
    - Performed manual sincg calculation to test argument hypothesis
    - Updated implementation notes with findings
    - Verified pytest collection (625 tests, no breakage)
    
    Key Finding: sincg arguments are CORRECT
    - Both C (sincg(π*h, Na)) and PyTorch (sincg(π*(h-h0), Na)) produce
      identical results (Δ ~2.8e-12, float64 noise level)
    - Manual calculation with h=2.001203, Na=36 yields 35.889 for both
    - This matches C expected value within 0.001%
    
[2025-10-06T06:50:48] tokens used: 83,830

[2025-10-06T06:51:34] thinking

**Planning detailed phase updates**
[2025-10-06T06:51:51] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -99,4 +99,5 @@
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
[2025-10-06T06:51:51] apply_patch(auto_approved=true) exited 0 in 17ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T06:51:51] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:51:51] tokens used: 90,806
[2025-10-06T06:51:51] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:51:57] thinking

**Updating fix_plan.md Next Actions**
[2025-10-06T06:51:57] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '456,490p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:51:58] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '456,490p' docs/fix_plan.md" succeeded in 940ms:
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
- Attempts History:
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
    Observations/Hypotheses:
      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
      - Float/int/PGM images still generated when -nonoise is active
      - C code treats `-pix0_vector` and `-pix0_vector_mm` identically (strstr match, no unit conversion)
      - **Critical finding:** C code does NOT divide by 1000 for `_mm` suffix; caller must provide pre-scaled values
      - Both pix0 flags trigger `beam_convention = CUSTOM` side effect
      - Output pix0_vector: -0.216475836 0.216343050 -0.230192414 (meters)
  * [2025-10-05] Phase C1 Complete — Task C1 executed (CLI regression tests).
    Metrics: 18 test cases, 18 passed, 0 failed, 0 skipped (CPU); 17 passed, 1 skipped (CUDA unavailable in environment).
[2025-10-06T06:51:58] tokens used: 92,188
[2025-10-06T06:51:58] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:52:01] thinking

**Updating Next Actions bullet**
[2025-10-06T06:52:05] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,3 +457,3 @@
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
[2025-10-06T06:52:05] apply_patch(auto_approved=true) exited 0 in 20ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T06:52:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:52:05] tokens used: 94,052
[2025-10-06T06:52:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:52:10] thinking

**Preparing detailed input.md rewrite**
[2025-10-06T06:52:11] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git rev-parse --short HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:52:12] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git rev-parse --short HEAD' succeeded in 707ms:
e339f48
[2025-10-06T06:52:12] tokens used: 94,885
[2025-10-06T06:52:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:52:15] thinking

**Getting current timestamp**
[2025-10-06T06:52:16] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && date -u +"%Y-%m-%d %H:%M:%SZ"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:52:17] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && date -u +"%Y-%m-%d %H:%M:%SZ"' succeeded in 694ms:
2025-10-06 06:52:17Z
[2025-10-06T06:52:17] tokens used: 95,118
[2025-10-06T06:52:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:52:27] thinking

**Preparing detailed input.md content**
[2025-10-06T06:52:49] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
timestamp: 2025-10-06 06:52:17Z
commit: e339f48
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
Summary: Implement the BEAM-pivot pix0 override transform and prove it with a targeted CLI regression test.
Phase: Implementation
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
Artifacts: reports/2025-10-cli-flags/phase_h/implementation/

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run "'`pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, note the first divergence in `implementation_notes.md`, and halt before reverting code. Record the attempt in `attempt_log.txt`.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b now demands the BEAM-pivot transform implementation plus a regression test.
- docs/fix_plan.md:468 — Next Actions call for applying the nanoBragg.c formula when `pix0_override_m` is set and logging artifacts under the implementation directory.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Quantifies the 1.14 mm delta we must eliminate; use these numbers in assertions.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Latest section lays out the detector-side fix proposal that today’s work should fulfill.
- docs/development/testing_strategy.md:14 — Device/dtype discipline requires CPU/CUDA neutrality; mirror this in the new test where feasible.

How-To Map:
- Export the authoritative commands doc: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`.
- Create the implementation workspace: `mkdir -p reports/2025-10-cli-flags/phase_h/implementation` before generating outputs.
- Implement detector change in `src/nanobrag_torch/models/detector.py`: when `pix0_override_m` is present under BEAM pivot, apply `pix0 = -Fbeam*fdet_vec - Sbeam*sdet_vec + distance_corrected*beam_vector` so CUSTOM overrides follow the C semantics.
- Add pytest coverage in `tests/test_cli_flags.py` (new class `TestCLIPix0Override`) that drives the CLI parser with the supervisor command flags and asserts `detector.pix0_vector` matches the analytic C formula to ≤1e-6 m; parameterise over dtype/device (`cpu` plus CUDA when available).
- Validation command (after code + test updates): `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`.
- Capture supporting math in `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`, echoing the reproduction script but using the new code path.
- Update `reports/2025-10-cli-flags/phase_h/implementation_notes.md` with a 2025-10-06 entry covering the change, test results, and remaining parity risks.

Pitfalls To Avoid:
- Do not bypass the cached basis vectors—reuse existing tensors to keep differentiability intact.
- No `.cpu()`/`.item()` in production code; respect device/dtype neutrality.
- Keep override handling confined to BEAM pivot; SAMPLE pivot must continue ignoring overrides per spec.
- Preserve Protected Assets (docs/index.md references) and avoid touching `scaled.hkl` files this loop.
- Don’t rerun full pytest; stick to the targeted node plus any newly added test collection if needed.
- Ensure new test skips gracefully on CUDA absence instead of failing.
- Avoid ad-hoc scripts outside `reports/...`; keep artifacts within the designated implementation folder.
- Do not alter nb-compare or trace harness yet; parity rerun happens in Phase H4.
- Maintain vectorization helpers untouched; no reintroducing Python loops in detector pix0 math.
- Document the attempt in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` once the fix is validated.

Pointers:
- plans/active/cli-noise-pix0/plan.md:99 — Phase H3b task definition and exit criteria.
- docs/fix_plan.md:464 — Current status and artifact expectations for `[CLI-FLAGS-003]`.
- docs/architecture/detector.md:210 — Reference equations for pix0 under BEAM pivot.
- golden_suite_generator/nanoBragg.c:1833 — Source formula to mirror in PyTorch.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Numeric targets for the new assertions.

Next Up: Phase H4 parity smoke (trace rerun + intensity comparison) once the pix0 fix merges cleanly.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:52:50] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
timestamp: 2025-10-06 06:52:17Z
commit: e339f48
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
Summary: Implement the BEAM-pivot pix0 override transform and prove it with a targeted CLI regression test.
Phase: Implementation
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
Artifacts: reports/2025-10-cli-flags/phase_h/implementation/

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run "'`pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, note the first divergence in `implementation_notes.md`, and halt before reverting code. Record the attempt in `attempt_log.txt`.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b now demands the BEAM-pivot transform implementation plus a regression test.
- docs/fix_plan.md:468 — Next Actions call for applying the nanoBragg.c formula when `pix0_override_m` is set and logging artifacts under the implementation directory.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Quantifies the 1.14 mm delta we must eliminate; use these numbers in assertions.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Latest section lays out the detector-side fix proposal that today’s work should fulfill.
- docs/development/testing_strategy.md:14 — Device/dtype discipline requires CPU/CUDA neutrality; mirror this in the new test where feasible.

How-To Map:
- Export the authoritative commands doc: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`.
- Create the implementation workspace: `mkdir -p reports/2025-10-cli-flags/phase_h/implementation` before generating outputs.
- Implement detector change in `src/nanobrag_torch/models/detector.py`: when `pix0_override_m` is present under BEAM pivot, apply `pix0 = -Fbeam*fdet_vec - Sbeam*sdet_vec + distance_corrected*beam_vector` so CUSTOM overrides follow the C semantics.
- Add pytest coverage in `tests/test_cli_flags.py` (new class `TestCLIPix0Override`) that drives the CLI parser with the supervisor command flags and asserts `detector.pix0_vector` matches the analytic C formula to ≤1e-6 m; parameterise over dtype/device (`cpu` plus CUDA when available).
- Validation command (after code + test updates): `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`.
- Capture supporting math in `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`, echoing the reproduction script but using the new code path.
- Update `reports/2025-10-cli-flags/phase_h/implementation_notes.md` with a 2025-10-06 entry covering the change, test results, and remaining parity risks.

Pitfalls To Avoid:
- Do not bypass the cached basis vectors—reuse existing tensors to keep differentiability intact.
- No `.cpu()`/`.item()` in production code; respect device/dtype neutrality.
- Keep override handling confined to BEAM pivot; SAMPLE pivot must continue ignoring overrides per spec.
- Preserve Protected Assets (docs/index.md references) and avoid touching `scaled.hkl` files this loop.
- Don’t rerun full pytest; stick to the targeted node plus any newly added test collection if needed.
- Ensure new test skips gracefully on CUDA absence instead of failing.
- Avoid ad-hoc scripts outside `reports/...`; keep artifacts within the designated implementation folder.
- Do not alter nb-compare or trace harness yet; parity rerun happens in Phase H4.
- Maintain vectorization helpers untouched; no reintroducing Python loops in detector pix0 math.
- Document the attempt in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` once the fix is validated.

Pointers:
- plans/active/cli-noise-pix0/plan.md:99 — Phase H3b task definition and exit criteria.
- docs/fix_plan.md:464 — Current status and artifact expectations for `[CLI-FLAGS-003]`.
- docs/architecture/detector.md:210 — Reference equations for pix0 under BEAM pivot.
- golden_suite_generator/nanoBragg.c:1833 — Source formula to mirror in PyTorch.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Numeric targets for the new assertions.

Next Up: Phase H4 parity smoke (trace rerun + intensity comparison) once the pix0 fix merges cleanly.
EOF
' succeeded in 963ms:

[2025-10-06T06:52:50] tokens used: 96,933
[2025-10-06T06:52:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:53:10] thinking

**Checking input.md line count**
[2025-10-06T06:53:12] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:53:12] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 725ms:
      50 input.md
[2025-10-06T06:53:12] tokens used: 187,082
[2025-10-06T06:53:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:53:18] thinking

**Planning file expansion**
[2025-10-06T06:53:40] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
timestamp: 2025-10-06 06:52:17Z
commit: e339f48
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
Summary: Implement the BEAM-pivot pix0 override transform, prove it with a targeted regression test, and log phase-complete artifacts for H3b.
Phase: Implementation
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
Artifacts: reports/2025-10-cli-flags/phase_h/implementation/

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run "'`pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, note the first divergence and hypothesis in `implementation_notes.md`, update `attempt_log.txt`, and stop before reverting code or rerunning unrelated tests.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b spells out the transform + regression test deliverable; completion unblocks parity work (H4).
- docs/fix_plan.md:468 — Next Actions now hinge on applying the C formula when overrides are supplied and capturing artifacts in a dedicated implementation folder.
- docs/architecture/detector.md:210 — BEAM pivot derivation is authoritative; the implementation must mirror these equations to stay spec-compliant.
- golden_suite_generator/nanoBragg.c:1833 — Source math (`pix0 = -Fbeam*fdet - Sbeam*sdet + distance*beam`) we must port exactly.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides the 1.14 mm delta and downstream scatter/hkl metrics that the new test should assert disappear.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Documents the proposed fix; update this with outcomes so future loops inherit the rationale.
- docs/development/testing_strategy.md:14 — Device/dtype neutrality checklist mandates CPU/GPU coverage; incorporate this into the new test’s parametrisation.
- docs/debugging/debugging.md:18 — Parallel trace SOP will remain relevant for H4; keep today’s implementation consistent to avoid rework when we re-run traces.

How-To Map:
- Export the authoritative commands doc: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` before running any pytest or scripts.
- Prepare workspace: `mkdir -p reports/2025-10-cli-flags/phase_h/implementation/{blocked,notes}` so logs/tests land under a single directory tree.
- Detector edit (`src/nanobrag_torch/models/detector.py`): when `pix0_override_m` is supplied with BEAM pivot, derive Fbeam/Sbeam via existing helpers, compute `pix0_calc = -Fbeam * fdet_vec - Sbeam * sdet_vec + self.distance_corrected * beam_vector`, and assign this tensor while preserving gradient flow and caching semantics.
- Ensure override path respects dtype/device of `pix0_override_m`; use `.to(device=self.device, dtype=self.dtype)` on intermediate tensors and avoid `.item()` extraction.
- Maintain SAMPLE pivot behaviour: continue ignoring overrides there (C does), but add clarifying comments referencing spec §5.
- Author regression test in `tests/test_cli_flags.py`: create `TestCLIPix0Override` class with fixtures for CLI parser + config; assert computed `pix0_vector` matches analytic formula within `1e-6` meters using the supervisor command parameters.
- Extend test to cover dtype/device combos: CPU float32 baseline plus conditional CUDA float32 when `torch.cuda.is_available()`; keep float64 analytic reference for accuracy.
- Use reproduction numbers as oracles: transform values from `pix0_reproduction.md` into test assertions so we fail loudly if drift reappears.
- After code/test changes, validation command: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`.
- Record a short derivation snippet in `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md` (inputs, computed pix0, delta); include device/dtype info and the delta magnitude.
- Update `reports/2025-10-cli-flags/phase_h/implementation_notes.md` with a 2025-10-06 entry covering: code touchpoints, regression test summary, metrics, and any TODOs (e.g., polarization parity).
- Append Attempt #22 to `reports/2025-10-cli-flags/phase_h/attempt_log.txt` documenting command outputs, metrics, and whether CUDA path executed.
- Keep git history clean: stage code + docs + artifacts together; reference the pytest node in the commit message.

Pitfalls To Avoid:
- No reintroduction of Python loops; leverage existing vectorised tensors when forming pix0.
- Don’t hard-code constants on CPU; always allocate on `self.device` with `self.dtype`.
- Do not adjust r_factor/close_distance logic—only the pix0 assignment path should change.
- Avoid mutating cached pix0 checkpoints out of band; continue using `_cached_pix0_vector` helpers to detect deltas.
- Refrain from running the full pytest suite; stay targeted to the new regression node plus optional `--collect-only` if sanity-checking imports.
- Skip modifying trace harness this loop; parity evidence belongs to Phase H4.
- Preserve Protected Assets listed in docs/index.md (`input.md`, `loop.sh`, `supervisor.sh`, etc.).
- If CUDA unavailable, ensure the new test skips via `pytest.skip` rather than failing.
- Don’t delete or rename `scaled.hkl` artifacts until plan explicitly directs it.
- Maintain doc parity: if comments quote C code, keep them verbatim as per Core Implementation Rules.

Pointers:
- plans/active/cli-noise-pix0/plan.md:99 — H3b task definition, guidance, and exit criteria checkboxes.
- docs/fix_plan.md:464 — Current status + Next Actions for `[CLI-FLAGS-003]`.
- docs/architecture/detector.md:205 — Beam pivot derivation and unit notes.
- docs/development/c_to_pytorch_config_map.md:21 — Detector mapping between CLI flags and internal tensors.
- golden_suite_generator/nanoBragg.c:1833 — Reference implementation for pix0 within BEAM pivot.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Numeric targets for pix0, pixel positions, scattering vectors, and h/k/l.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Current divergence snapshot; use post-fix to verify improvements.
- tests/test_cli_flags.py:1 — Location of existing CLI flag regression tests; follow established fixture patterns.
- docs/development/testing_strategy.md:14 — Device/dtype neutrality expectations; cite when logging results.
- docs/debugging/debugging.md:18 — Parallel trace SOP (needed soon for Phase H4 parity confirmation).

Next Up: Phase H4 parity smoke (trace rerun, intensity comparison, <0.5% `F_latt` deltas) once the pix0 fix lands cleanly and the regression test passes.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:53:41] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
timestamp: 2025-10-06 06:52:17Z
commit: e339f48
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
Summary: Implement the BEAM-pivot pix0 override transform, prove it with a targeted regression test, and log phase-complete artifacts for H3b.
Phase: Implementation
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
Artifacts: reports/2025-10-cli-flags/phase_h/implementation/

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run "'`pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, note the first divergence and hypothesis in `implementation_notes.md`, update `attempt_log.txt`, and stop before reverting code or rerunning unrelated tests.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b spells out the transform + regression test deliverable; completion unblocks parity work (H4).
- docs/fix_plan.md:468 — Next Actions now hinge on applying the C formula when overrides are supplied and capturing artifacts in a dedicated implementation folder.
- docs/architecture/detector.md:210 — BEAM pivot derivation is authoritative; the implementation must mirror these equations to stay spec-compliant.
- golden_suite_generator/nanoBragg.c:1833 — Source math (`pix0 = -Fbeam*fdet - Sbeam*sdet + distance*beam`) we must port exactly.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides the 1.14 mm delta and downstream scatter/hkl metrics that the new test should assert disappear.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Documents the proposed fix; update this with outcomes so future loops inherit the rationale.
- docs/development/testing_strategy.md:14 — Device/dtype neutrality checklist mandates CPU/GPU coverage; incorporate this into the new test’s parametrisation.
- docs/debugging/debugging.md:18 — Parallel trace SOP will remain relevant for H4; keep today’s implementation consistent to avoid rework when we re-run traces.

How-To Map:
- Export the authoritative commands doc: `export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` before running any pytest or scripts.
- Prepare workspace: `mkdir -p reports/2025-10-cli-flags/phase_h/implementation/{blocked,notes}` so logs/tests land under a single directory tree.
- Detector edit (`src/nanobrag_torch/models/detector.py`): when `pix0_override_m` is supplied with BEAM pivot, derive Fbeam/Sbeam via existing helpers, compute `pix0_calc = -Fbeam * fdet_vec - Sbeam * sdet_vec + self.distance_corrected * beam_vector`, and assign this tensor while preserving gradient flow and caching semantics.
- Ensure override path respects dtype/device of `pix0_override_m`; use `.to(device=self.device, dtype=self.dtype)` on intermediate tensors and avoid `.item()` extraction.
- Maintain SAMPLE pivot behaviour: continue ignoring overrides there (C does), but add clarifying comments referencing spec §5.
- Author regression test in `tests/test_cli_flags.py`: create `TestCLIPix0Override` class with fixtures for CLI parser + config; assert computed `pix0_vector` matches analytic formula within `1e-6` meters using the supervisor command parameters.
- Extend test to cover dtype/device combos: CPU float32 baseline plus conditional CUDA float32 when `torch.cuda.is_available()`; keep float64 analytic reference for accuracy.
- Use reproduction numbers as oracles: transform values from `pix0_reproduction.md` into test assertions so we fail loudly if drift reappears.
- After code/test changes, validation command: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`.
- Record a short derivation snippet in `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md` (inputs, computed pix0, delta); include device/dtype info and the delta magnitude.
- Update `reports/2025-10-cli-flags/phase_h/implementation_notes.md` with a 2025-10-06 entry covering: code touchpoints, regression test summary, metrics, and any TODOs (e.g., polarization parity).
- Append Attempt #22 to `reports/2025-10-cli-flags/phase_h/attempt_log.txt` documenting command outputs, metrics, and whether CUDA path executed.
- Keep git history clean: stage code + docs + artifacts together; reference the pytest node in the commit message.

Pitfalls To Avoid:
- No reintroduction of Python loops; leverage existing vectorised tensors when forming pix0.
- Don’t hard-code constants on CPU; always allocate on `self.device` with `self.dtype`.
- Do not adjust r_factor/close_distance logic—only the pix0 assignment path should change.
- Avoid mutating cached pix0 checkpoints out of band; continue using `_cached_pix0_vector` helpers to detect deltas.
- Refrain from running the full pytest suite; stay targeted to the new regression node plus optional `--collect-only` if sanity-checking imports.
- Skip modifying trace harness this loop; parity evidence belongs to Phase H4.
- Preserve Protected Assets listed in docs/index.md (`input.md`, `loop.sh`, `supervisor.sh`, etc.).
- If CUDA unavailable, ensure the new test skips via `pytest.skip` rather than failing.
- Don’t delete or rename `scaled.hkl` artifacts until plan explicitly directs it.
- Maintain doc parity: if comments quote C code, keep them verbatim as per Core Implementation Rules.

Pointers:
- plans/active/cli-noise-pix0/plan.md:99 — H3b task definition, guidance, and exit criteria checkboxes.
- docs/fix_plan.md:464 — Current status + Next Actions for `[CLI-FLAGS-003]`.
- docs/architecture/detector.md:205 — Beam pivot derivation and unit notes.
- docs/development/c_to_pytorch_config_map.md:21 — Detector mapping between CLI flags and internal tensors.
- golden_suite_generator/nanoBragg.c:1833 — Reference implementation for pix0 within BEAM pivot.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Numeric targets for pix0, pixel positions, scattering vectors, and h/k/l.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Current divergence snapshot; use post-fix to verify improvements.
- tests/test_cli_flags.py:1 — Location of existing CLI flag regression tests; follow established fixture patterns.
- docs/development/testing_strategy.md:14 — Device/dtype neutrality expectations; cite when logging results.
- docs/debugging/debugging.md:18 — Parallel trace SOP (needed soon for Phase H4 parity confirmation).

Next Up: Phase H4 parity smoke (trace rerun, intensity comparison, <0.5% `F_latt` deltas) once the pix0 fix lands cleanly and the regression test passes.
EOF
' succeeded in 872ms:

[2025-10-06T06:53:41] tokens used: 190,571
[2025-10-06T06:53:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:53:43] thinking

**Checking line count**
[2025-10-06T06:53:44] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:53:45] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 710ms:
      64 input.md
[2025-10-06T06:53:45] tokens used: 192,483
[2025-10-06T06:53:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:53:54] thinking

**Planning detailed expansion of instructions**

I want to boost the line count by breaking down the list items into smaller steps, adding explicit step numbers, and expanding bullet points with more granular instructions. I'll enrich sections like How-To Map, Priorities, and Pitfalls with extra detail and possibly introduce a Validation Notes section while keeping within the user's required order and aiming for around 110 lines. This will help meet expectations for a fuller and clearer document.
[2025-10-06T06:54:34] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
timestamp: 2025-10-06 06:52:17Z
commit: e339f48
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
Summary: Implement the BEAM-pivot pix0 override transform, prove it with a targeted regression test, and archive full Phase H3b artifacts so parity work can resume.
Phase: Implementation
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
Artifacts: reports/2025-10-cli-flags/phase_h/implementation/

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run "'`pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, log the first divergence and hypothesis in `implementation_notes.md`, append the attempt to `attempt_log.txt`, and stop before reverting code or running unrelated suites.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
- docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
- docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
- docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
- golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
- docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
- docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.

How-To Map:
- Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
- Step 2: Prepare the artifact directories (`mkdir -p reports/2025-10-cli-flags/phase_h/implementation/{blocked,notes,logs}`).
- Step 3: Review `pix0_reproduction.md` and `implementation_notes.md` to refresh the targeted deltas and the proposed fix steps.
- Step 4: Update `src/nanobrag_torch/models/detector.py` within `_calculate_pix0_vector`.
- Step 4a: When `pix0_override_m` is supplied and pivot == BEAM, compute `Fbeam`/`Sbeam` with existing helpers (respect convention-dependent +0.5 offsets).
- Step 4b: Form `pix0_calc = -Fbeam * self.fdet_vec - Sbeam * self.sdet_vec + self.distance_corrected * beam_vector`; ensure all tensors are on `self.device` with `self.dtype` and gradients preserved.
- Step 4c: Assign `self.pix0_vector = pix0_calc` instead of the raw override, leaving SAMPLE pivot logic unchanged.
- Step 4d: Update any relevant caching or `close_distance` recalculation paths to use the transformed tensor without breaking existing assertions.
- Step 4e: Leave comments referencing the exact nanoBragg.c lines (1833-1835) as required by Core Implementation Rule 11.
- Step 5: Implement safety checks so dual use of override + SAMPLE pivot still follows spec (override ignored with explanatory comment).
- Step 6: Author regression tests under `tests/test_cli_flags.py`.
- Step 6a: Add class `TestCLIPix0Override` reusing parser fixtures; include docstring referencing plan H3b.
- Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
- Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
- Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
- Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
- Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
- Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
- Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
- Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
- Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
- Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
- Step 13: Include the pytest node in the commit message and cross-reference plan H3b.

Pitfalls To Avoid:
- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.

Pointers:
- plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
- docs/fix_plan.md:464 — Status, attempts history, and updated Next Actions for `[CLI-FLAGS-003]`.
- docs/architecture/detector.md:205 — Detailed BEAM pivot derivation and unit conventions to replicate.
- docs/development/c_to_pytorch_config_map.md:21 — Mapping of CLI detector flags into config fields.
- golden_suite_generator/nanoBragg.c:1833 — Exact C implementation of the pix0 calculation for BEAM pivot.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Numeric targets for pix0, pixel positions, scattering vectors, and h/k/l deltas.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Current divergence snapshot to compare against after the fix.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Prior hypothesis log that today’s implementation should resolve.
- tests/test_cli_flags.py:1 — Existing CLI regression test patterns; follow fixtures and naming conventions.
- docs/development/testing_strategy.md:14 — Device/dtype neutrality checklist to cite when logging results.
- docs/debugging/debugging.md:18 — Parallel trace SOP for the upcoming Phase H4 parity run.
- CLAUDE.md: Protected Assets Rule reminders; ensure compliance while editing scripts/docs.

Next Up: Phase H4 parity smoke (rerun trace harness, diff against C, capture <0.5% `F_latt` deltas and <10× intensity ratios) once the pix0 fix lands cleanly and regression tests pass.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:54:35] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
timestamp: 2025-10-06 06:52:17Z
commit: e339f48
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
Summary: Implement the BEAM-pivot pix0 override transform, prove it with a targeted regression test, and archive full Phase H3b artifacts so parity work can resume.
Phase: Implementation
Focus: CLI-FLAGS-003
Branch: feature/spec-based-2
Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
Artifacts: reports/2025-10-cli-flags/phase_h/implementation/

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run "'`pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, log the first divergence and hypothesis in `implementation_notes.md`, append the attempt to `attempt_log.txt`, and stop before reverting code or running unrelated suites.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
- docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
- docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
- docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
- golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
- docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
- docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.

How-To Map:
- Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
- Step 2: Prepare the artifact directories (`mkdir -p reports/2025-10-cli-flags/phase_h/implementation/{blocked,notes,logs}`).
- Step 3: Review `pix0_reproduction.md` and `implementation_notes.md` to refresh the targeted deltas and the proposed fix steps.
- Step 4: Update `src/nanobrag_torch/models/detector.py` within `_calculate_pix0_vector`.
- Step 4a: When `pix0_override_m` is supplied and pivot == BEAM, compute `Fbeam`/`Sbeam` with existing helpers (respect convention-dependent +0.5 offsets).
- Step 4b: Form `pix0_calc = -Fbeam * self.fdet_vec - Sbeam * self.sdet_vec + self.distance_corrected * beam_vector`; ensure all tensors are on `self.device` with `self.dtype` and gradients preserved.
- Step 4c: Assign `self.pix0_vector = pix0_calc` instead of the raw override, leaving SAMPLE pivot logic unchanged.
- Step 4d: Update any relevant caching or `close_distance` recalculation paths to use the transformed tensor without breaking existing assertions.
- Step 4e: Leave comments referencing the exact nanoBragg.c lines (1833-1835) as required by Core Implementation Rule 11.
- Step 5: Implement safety checks so dual use of override + SAMPLE pivot still follows spec (override ignored with explanatory comment).
- Step 6: Author regression tests under `tests/test_cli_flags.py`.
- Step 6a: Add class `TestCLIPix0Override` reusing parser fixtures; include docstring referencing plan H3b.
- Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
- Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
- Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
- Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
- Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
- Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
- Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
- Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
- Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
- Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
- Step 13: Include the pytest node in the commit message and cross-reference plan H3b.

Pitfalls To Avoid:
- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.

Pointers:
- plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
- docs/fix_plan.md:464 — Status, attempts history, and updated Next Actions for `[CLI-FLAGS-003]`.
- docs/architecture/detector.md:205 — Detailed BEAM pivot derivation and unit conventions to replicate.
- docs/development/c_to_pytorch_config_map.md:21 — Mapping of CLI detector flags into config fields.
- golden_suite_generator/nanoBragg.c:1833 — Exact C implementation of the pix0 calculation for BEAM pivot.
- reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Numeric targets for pix0, pixel positions, scattering vectors, and h/k/l deltas.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Current divergence snapshot to compare against after the fix.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Prior hypothesis log that today’s implementation should resolve.
- tests/test_cli_flags.py:1 — Existing CLI regression test patterns; follow fixtures and naming conventions.
- docs/development/testing_strategy.md:14 — Device/dtype neutrality checklist to cite when logging results.
- docs/debugging/debugging.md:18 — Parallel trace SOP for the upcoming Phase H4 parity run.
- CLAUDE.md: Protected Assets Rule reminders; ensure compliance while editing scripts/docs.

Next Up: Phase H4 parity smoke (rerun trace harness, diff against C, capture <0.5% `F_latt` deltas and <10× intensity ratios) once the pix0 fix lands cleanly and regression tests pass.
EOF
' succeeded in 980ms:

[2025-10-06T06:54:35] tokens used: 195,286
[2025-10-06T06:54:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:54:38] thinking

**Counting lines**
[2025-10-06T06:54:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:54:39] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 709ms:
      80 input.md
[2025-10-06T06:54:39] tokens used: 197,695
[2025-10-06T06:54:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:54:48] thinking

**Planning detailed expansions for sections**

I'll enhance the How-To Map by breaking down complex steps and adding verification details, while reshaping the Pitfalls section to hold 10 concise bullet points with added explanations beneath each, ensuring line count grows without exceeding bullet limits.
[2025-10-06T06:54:56] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -52,14 +52,20 @@
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
[2025-10-06T06:54:56] apply_patch(auto_approved=true) exited 0 in 30ms:
Success. Updated the following files:
M input.md
[2025-10-06T06:54:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..bd9020a15c3fc5b92b81cb1da3ec1568bbcc2988
--- a/input.md
+++ b/input.md
@@ -50,18 +50,24 @@
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:54:57] tokens used: 199,023
[2025-10-06T06:54:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..bd9020a15c3fc5b92b81cb1da3ec1568bbcc2988
--- a/input.md
+++ b/input.md
@@ -50,18 +50,24 @@
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:00] thinking

**Expanding How-To Map explanations**
[2025-10-06T06:55:00] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:55:01] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 884ms:
      86 input.md
[2025-10-06T06:55:01] tokens used: 200,051
[2025-10-06T06:55:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..bd9020a15c3fc5b92b81cb1da3ec1568bbcc2988
--- a/input.md
+++ b/input.md
@@ -50,18 +50,24 @@
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:04] thinking

**Expanding How-To Map with notes**
[2025-10-06T06:55:10] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -44,7 +44,12 @@
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
[2025-10-06T06:55:10] apply_patch(auto_approved=true) exited 0 in 41ms:
Success. Updated the following files:
M input.md
[2025-10-06T06:55:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..c490505969b649a0c7fdc85e6d4177e4bab40404
--- a/input.md
+++ b/input.md
@@ -42,26 +42,37 @@
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:55:10] tokens used: 201,002
[2025-10-06T06:55:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..c490505969b649a0c7fdc85e6d4177e4bab40404
--- a/input.md
+++ b/input.md
@@ -42,26 +42,37 @@
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:13] thinking

**Planning to expand procedural steps**
[2025-10-06T06:55:14] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -42,3 +42,5 @@
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
[2025-10-06T06:55:14] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M input.md
[2025-10-06T06:55:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..24af89e25ad31f01763b7b3f5600d8d042212a94
--- a/input.md
+++ b/input.md
@@ -40,28 +40,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:55:14] tokens used: 202,015
[2025-10-06T06:55:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..24af89e25ad31f01763b7b3f5600d8d042212a94
--- a/input.md
+++ b/input.md
@@ -40,28 +40,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:17] thinking

**Checking line count**
[2025-10-06T06:55:18] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:55:19] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 952ms:
      93 input.md
[2025-10-06T06:55:19] tokens used: 202,420
[2025-10-06T06:55:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..24af89e25ad31f01763b7b3f5600d8d042212a94
--- a/input.md
+++ b/input.md
@@ -40,28 +40,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:23] thinking

**Expanding Priorities section**
[2025-10-06T06:55:30] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -16,11 +16,21 @@
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
[2025-10-06T06:55:30] apply_patch(auto_approved=true) exited 0 in 48ms:
Success. Updated the following files:
M input.md
[2025-10-06T06:55:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:55:30] tokens used: 203,256
[2025-10-06T06:55:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:33] thinking

**Checking line count**
[2025-10-06T06:55:33] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:55:34] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && wc -l input.md' succeeded in 800ms:
     103 input.md
[2025-10-06T06:55:34] tokens used: 204,126
[2025-10-06T06:55:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:45] thinking

**Organizing tasks and updating memory**
[2025-10-06T06:55:49] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-10-06 (galph loop — Phase H3b kick-off)
- "'`git pull --rebase` clean. Reviewed core docs + active plans + testing strategy per SOP.
- Goal 1: Phase H3 evidence (Attempt #21) now complete; updated `plans/active/cli-noise-pix0/plan.md` to split H3 into H3a (done) and new H3b implementation task, and refreshed `[CLI-FLAGS-003]` Next Actions to focus on applying the BEAM-pivot transform plus regression test.
- Goal 1 follow-up: Authored new input.md directing Ralph to implement the pix0 transform, add a targeted CLI regression test, capture artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`, and document Attempt #22 before moving to parity (Phase H4).
- Goal 2: Vectorization plan unchanged—Phase A evidence still outstanding; keep queued until CLI parity unblocks bandwidth.
- Coin flip = heads: reviewed Ralph’s latest evidence commits (`4e0e36e`, `0f18548`); both were productive (manual sincg rejection, pix0 reproduction) with no regressions.
- Follow-ups for Ralph: execute Phase H3b implementation per new memo, then proceed to H4 parity once regression test passes.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:55:50] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-10-06 (galph loop — Phase H3b kick-off)
- "'`git pull --rebase` clean. Reviewed core docs + active plans + testing strategy per SOP.
- Goal 1: Phase H3 evidence (Attempt #21) now complete; updated `plans/active/cli-noise-pix0/plan.md` to split H3 into H3a (done) and new H3b implementation task, and refreshed `[CLI-FLAGS-003]` Next Actions to focus on applying the BEAM-pivot transform plus regression test.
- Goal 1 follow-up: Authored new input.md directing Ralph to implement the pix0 transform, add a targeted CLI regression test, capture artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`, and document Attempt #22 before moving to parity (Phase H4).
- Goal 2: Vectorization plan unchanged—Phase A evidence still outstanding; keep queued until CLI parity unblocks bandwidth.
- Coin flip = heads: reviewed Ralph’s latest evidence commits (`4e0e36e`, `0f18548`); both were productive (manual sincg rejection, pix0 reproduction) with no regressions.
- Follow-ups for Ralph: execute Phase H3b implementation per new memo, then proceed to H4 parity once regression test passes.
EOF
' succeeded in 716ms:

[2025-10-06T06:55:50] tokens used: 205,075
[2025-10-06T06:55:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:53] thinking

**Checking git status before commit**
[2025-10-06T06:55:53] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:55:54] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 735ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T06:55:54] tokens used: 205,599
[2025-10-06T06:55:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:55:56] thinking

**Staging all changes**
[2025-10-06T06:55:57] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:55:58] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 741ms:

[2025-10-06T06:55:58] tokens used: 205,908
[2025-10-06T06:55:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:01] thinking

**Committing with correct message**
[2025-10-06T06:56:01] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: Phase H3b kickoff - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:56:02] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: Phase H3b kickoff - tests: not run"' succeeded in 761ms:
[feature/spec-based-2 80405b7] SUPERVISOR: Phase H3b kickoff - tests: not run
 4 files changed, 103 insertions(+), 124 deletions(-)
[2025-10-06T06:56:02] tokens used: 206,207
[2025-10-06T06:56:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:04] thinking

**Pushing changes to remote**
[2025-10-06T06:56:06] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:56:08] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 1.97s:
To github.com:hoidn/nanoBragg.git
   e339f48..80405b7  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T06:56:08] tokens used: 206,438
[2025-10-06T06:56:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:09] thinking

**Verifying clean working tree**
[2025-10-06T06:56:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:56:11] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status --short' succeeded in 725ms:

[2025-10-06T06:56:11] tokens used: 206,671
[2025-10-06T06:56:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:17] thinking

**Preparing final response details**
[2025-10-06T06:56:19] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '90,140p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:56:20] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '90,140p'" succeeded in 687ms:
    90	
    91	### Phase H — Lattice Structure Factor Alignment
    92	Goal: Ensure the CLI-provided beam vector propagates through Detector→Simulator and bring scattering/lattice parity back in line before polarization work.
    93	Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
    94	Exit Criteria: Trace comparison shows `pix0_vector` components matching C within 5e-5 m, `h`, `k`, `l` fractional components within 1e-3, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
    95	
    96	| ID | Task Description | State | How/Why & Guidance |
    97	| --- | --- | --- | --- |
    98	| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
    99	| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
   100	| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
   101	| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
   102	| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
   103	
   104	### Phase I — Polarization Alignment (follow-up)
   105	Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
   106	Prereqs: Phases F–H complete; traces show `F_latt` parity.
   107	Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
   108	
   109	| ID | Task Description | State | How/Why & Guidance |
[2025-10-06T06:56:20] tokens used: 207,088
[2025-10-06T06:56:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:22] thinking

**Marking important line references**
[2025-10-06T06:56:23] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '456,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:56:24] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '456,520p'" succeeded in 690ms:
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
   458	- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
   459	- Attempts History:
   460	  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
   461	    Metrics: C reference behavior captured for both flags via parallel command execution.
   462	    Artifacts:
   463	      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
   464	      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
   465	      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
   466	      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
   467	    Observations/Hypotheses:
   468	      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
   469	      - Float/int/PGM images still generated when -nonoise is active
   470	      - C code treats `-pix0_vector` and `-pix0_vector_mm` identically (strstr match, no unit conversion)
   471	      - **Critical finding:** C code does NOT divide by 1000 for `_mm` suffix; caller must provide pre-scaled values
   472	      - Both pix0 flags trigger `beam_convention = CUSTOM` side effect
   473	      - Output pix0_vector: -0.216475836 0.216343050 -0.230192414 (meters)
   474	  * [2025-10-05] Phase C1 Complete — Task C1 executed (CLI regression tests).
   475	    Metrics: 18 test cases, 18 passed, 0 failed, 0 skipped (CPU); 17 passed, 1 skipped (CUDA unavailable in environment).
[2025-10-06T06:56:24] tokens used: 208,359
[2025-10-06T06:56:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:27] thinking

**Preparing to reference input.md lines**
[2025-10-06T06:56:27] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba input.md | sed -n '1,160p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:56:28] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba input.md | sed -n '1,160p'" succeeded in 738ms:
     1	timestamp: 2025-10-06 06:52:17Z
     2	commit: e339f48
     3	author: galph
     4	Active Focus: [CLI-FLAGS-003] Phase H3b pix0 transform implementation
     5	Summary: Implement the BEAM-pivot pix0 override transform, prove it with a targeted regression test, and archive full Phase H3b artifacts so parity work can resume.
     6	Phase: Implementation
     7	Focus: CLI-FLAGS-003
     8	Branch: feature/spec-based-2
     9	Mapped tests: pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v
    10	Artifacts: reports/2025-10-cli-flags/phase_h/implementation/
    11	
    12	Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — author the pix0 override regression test, apply the BEAM-pivot transform fix, then run `pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v`.
    13	If Blocked: Capture failing command output under `reports/2025-10-cli-flags/phase_h/implementation/blocked/`, log the first divergence and hypothesis in `implementation_notes.md`, append the attempt to `attempt_log.txt`, and stop before reverting code or running unrelated suites.
    14	
    15	Priorities & Rationale:
    16	- plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
    17	  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
    18	- docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
    19	  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
    20	- docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
[2025-10-06T06:56:28] tokens used: 210,685
[2025-10-06T06:56:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:56:35] thinking

**Structuring final summary with references**
[2025-10-06T06:56:36] codex

**Plan & Focus**
- Split Phase H in `plans/active/cli-noise-pix0/plan.md:96-102` so H3a (diagnosis) is logged complete and new H3b mandates the BEAM-pivot pix0 transform plus regression test before parity.
- Updated `[CLI-FLAGS-003]` Next Actions in `docs/fix_plan.md:456-458` to point Ralph at the H3b implementation work and artifact expectations (`reports/2025-10-cli-flags/phase_h/implementation/`).
- Rewrote `input.md:1-103` directing Ralph to land the transform, add the targeted pytest node, capture logs, and document Attempt #22.

**Long-Term Analysis**
- Goal 1 (CLI parity): Evidence loop closed; the outstanding blocker is still the raw pix0 override. Fix requires applying the nanoBragg BEAM-pivot formula when overrides are supplied and proving it via regression before Phase H4 parity.
- Goal 2 (Vectorization): Still paused at Phase A evidence; no baselines collected yet. Remains deferred until CLI parity work frees bandwidth.

**Ralph Review**
- Coin flip (heads): Reviewed commits `4e0e36e` and `0f18548`; both were evidence-only, completed the sincg dismissal and quantified the pix0 cascade with clean logs—productive, no regressions to flag.

**Next Steps**
- Ralph to execute Phase H3b per new memo, then proceed to parity (H4) once regression test passes.
- Vectorization plan stays queued pending parity progress.
- Tests: not run (planning/documentation loop).
[2025-10-06T06:56:40] tokens used: 213,021
[2025-10-06T06:56:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 9450415b8086d0ceb232095fe1638a382f0cf580..a077619c79071c656218cac22829f0267ae3cc70
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Complete Phase H3 evidence by re-running `reports/2025-10-cli-flags/phase_h/trace_harness.py` and reproducing C’s BEAM-pivot pix0 calculation in a scratch script (`phase_h/pix0_reproduction.md`) to show the ~1.14 mm delta between C’s transformed pix0 and the raw PyTorch override; (2) Propagate both pix0 vectors through pixel position → scattering vector → Miller index math, documenting the first divergence plus proposed detector-side fix plan in `phase_h/implementation_notes.md` and restoring `phase_h/attempt_log.txt` with a proper Attempt #21 entry (pytest output currently clobbered it); (3) After the detector fix is staged, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (4) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
+- Next Actions: (1) Execute Phase H3b by applying the BEAM-pivot pix0 transformation when `pix0_override_m` is provided (match nanoBragg.c lines 1833-1835), ensuring differentiability/device neutrality and capturing implementation artifacts under `reports/2025-10-cli-flags/phase_h/implementation/`; (2) Add a targeted regression test exercising CUSTOM `-pix0_vector_mm` to prove the transformed pix0 matches the C formula (store pytest log alongside the implementation artifacts); (3) Update `phase_h/implementation_notes.md` with fix details and append Attempt #22 in the plan log; (4) After the fix lands, proceed to Phase H4 parity smoke (polarization disabled) and, once lattice parity is confirmed, continue to Phase I polarization alignment and repository cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/input.md b/input.md
index cb2369b92d00866db8153f488449dcd08c41a86c..1144f90ddcfce49da7a415c528ba42b73856129e
--- a/input.md
+++ b/input.md
@@ -14,15 +14,25 @@
 
 Priorities & Rationale:
 - plans/active/cli-noise-pix0/plan.md:102 — Phase H3b details the implementation and testing checklist; completing it is the gate to Phase H4 parity work.
+  Use the plan checklist to tick tasks as you produce artifacts; update it if additional guidance emerges during coding.
 - docs/fix_plan.md:468 — Next Actions now require the BEAM-pivot transform when overrides are provided and demand logged artifacts in a dedicated folder.
+  Keep the fix_plan entry current by referencing new artifact paths once the regression test is in place.
 - docs/architecture/detector.md:205 — Contains the normative derivation for pix0 under BEAM pivot; the PyTorch implementation must match this math exactly.
+  Cross-check units (meters inside detector) before finalising tensor math to avoid mm↔m confusion.
 - docs/development/c_to_pytorch_config_map.md:33 — Confirms how `-pix0_vector_mm` maps into detector config fields; consult before touching the parser output.
+  This guard prevents accidental double conversion when you refactor override handling.
 - golden_suite_generator/nanoBragg.c:1833 — Ground-truth C code computing pix0; port this verbatim to avoid drift.
+  Reference the line numbers in comments to satisfy Core Implementation Rule 11.
 - reports/2025-10-cli-flags/phase_h/pix0_reproduction.md:1 — Provides numeric targets (pix0 delta, pixel positions, scattering vector, h/k/l) used for assertions.
+  Embed these values into the regression test to lock in expectations.
 - reports/2025-10-cli-flags/phase_h/trace_py_after_H3_refresh.log:1 — Shows the current divergence; use it as a before snapshot when writing notes.
+  After the fix, capture a new trace for Phase H4; today just reference the existing "before" metrics.
 - reports/2025-10-cli-flags/phase_h/implementation_notes.md:120 — Captures the proposed fix; update with implementation outcomes so future loops inherit context.
+  Note any open risks (polarization, scaled.hkl cleanup) so they remain visible.
 - docs/development/testing_strategy.md:14 — Enforces device/dtype neutrality; new tests and code must uphold this rule on CPU and CUDA.
+  Mention CPU/GPU coverage in the attempt log to document compliance.
 - docs/debugging/debugging.md:18 — Parallel trace SOP underpins Phase H4; keeping today’s fix faithful prevents rework when running traces later.
+  Cite the SOP in notes to remind future loops that parity validation is queued next.
 
 How-To Map:
 - Step 1: Export the authoritative command doc before executing anything (`export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md`).
@@ -40,28 +50,41 @@
 - Step 6b: Create helper computing the analytic pix0 vector via the same formula using CLI inputs and compare against detector output.
 - Step 6c: Parameterise over `(device, dtype)` pairs: `(cpu, torch.float32)` always, `(cuda, torch.float32)` when `torch.cuda.is_available()`; use `pytest.skip` gracefully when CUDA missing.
 - Step 6d: Assert per-component error ≤1e-6 m and record the absolute delta in the test failure message.
+  Mirror the structure used in existing CLI flag tests for consistency (use `pytest.approx`).
 - Step 6e: Also verify derived pixel position/hkl deltas shrink below the measured thresholds (optional but encouraged) to mirror the reproduction notebook.
+  Store the intermediate values in local variables so they can be re-used when writing parity notes later.
 - Step 7: Run targeted pytest with logging (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_override_beam_pivot_transform -v | tee reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log`).
+  Inspect the log for both CPU and CUDA branches, and annotate pass/skip outcomes directly in the file for quick review.
 - Step 8: If CUDA path ran, append the GPU device name and results summary to the log; otherwise note the skip reason in a short text file.
 - Step 9: Capture a refreshed formula check after the fix by reusing the analytic script (`python scripts` snippet or inline) and append output to `reports/2025-10-cli-flags/phase_h/implementation/formula_check.md`.
+  Include both raw numbers and the absolute delta so future loops can diff without rerunning the script.
 - Step 10: Update `implementation_notes.md` with sections for code changes, test evidence, remaining risks (e.g., polarization), and next tasks (Phase H4).
+  Cite file paths and command output filenames so the attempt log stays self-contained.
 - Step 11: Append Attempt #22 in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` summarising commands, metrics, devices, and outcomes.
+  Include start/end timestamps plus any skips to keep chronological auditing simple.
 - Step 12: Stage modifications (`git add src/nanobrag_torch/models/detector.py tests/test_cli_flags.py docs/fix_plan.md plans/active/cli-noise-pix0/plan.md reports/... input.md`) and commit once satisfied.
+  Double-check `git status` to ensure only intentional files are staged; no stray notebooks or editor backups.
 - Step 13: Include the pytest node in the commit message and cross-reference plan H3b.
 
 Pitfalls To Avoid:
-- Avoid creating new Python loops in detector pix0 code; stay vectorised and reuse existing tensors.
-- Do not call `.cpu()`, `.numpy()`, or `.item()` on tensors that must remain differentiable or device-neutral.
-- Leave SAMPLE pivot override handling untouched—C ignores overrides there, and we must match that behaviour.
-- Maintain `_cached_pix0_vector` update logic; forgetting it will break cache invalidation checks.
-- Do not run the entire pytest suite; targeted node only (plus optional `--collect-only` if troubleshooting imports).
-- Keep Protected Assets (docs/index.md list) intact; no renaming/removal of `input.md`, `loop.sh`, `supervisor.sh`, etc.
-- Ensure new regression test skips cleanly when CUDA missing; failing on unavailable GPUs will break CI expectations.
-- When writing tests, avoid hard-coded floats in mm; convert to meters to stay consistent with detector internals.
-- Document dtype conversions carefully; mismatched float32/float64 conversions can reintroduce plateau fragmentation issues.
-- Do not modify trace harness or parity scripts yet; those changes belong to Phase H4.
-- Keep `scaled.hkl` artifacts untouched; cleanup will be scheduled post-parity.
-- Watch for accidental `torch.stack` allocations on CPU when working with CUDA tensors; use `.to()` appropriately.
+- Avoid introducing Python loops in detector pix0 code; rely on existing tensor ops so vectorization and autograd stay intact.
+  Regressing to loops will undo past performance work and violate vectorization guardrails.
+- Skip `.cpu()`, `.numpy()`, `.item()` inside the production path; those detach tensors and will violate device neutrality requirements.
+  Use `.to()` / `.type_as()` to align devices and dtypes instead.
+- Preserve SAMPLE pivot override semantics—C ignores overrides there, so the PyTorch port must continue to do the same.
+  Changing this would break spec alignment and complicate future parity checks.
+- Maintain `_cached_pix0_vector` updates; failing to refresh the cache will cause stale geometry downstream and spurious detector diffs.
+  After assigning the transformed pix0, update the cache clone exactly as today.
+- Stay focused on the targeted pytest node; running the full suite burns time and risks masking regressions with unrelated failures.
+  If import issues arise, `pytest --collect-only -q` is the only extra command to run.
+- Treat Protected Assets (docs/index.md list) as immutable; never rename/remove `input.md`, `loop.sh`, `supervisor.sh`, or other guarded files.
+  The Protected Assets rule is now a hard guard rail—violations block automation.
+- Ensure the CUDA branch of the regression test skips gracefully when no GPU exists.
+  Use `pytest.skip` with a clear message; do not rely on `assert torch.cuda.is_available()`.
+- Convert mm inputs to meters in tests; mixing units silently reintroduces the 1.14 mm delta we just diagnosed.
+  Keep tolerances tight (≤1e-6 m) to catch future drift immediately.
+- Do not touch trace harnesses or parity scripts in this loop; Phase H4 will handle trace regeneration after the fix lands.
+  Today’s scope is confined to implementation + regression test only.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:99 — Phase H3b checklist with exit criteria and artifact expectations.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 79a85644f5ccdcacd408eb13c7db50d455275dce..0087d151147e9cad36ac476d4d929d3f32b3715a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,9 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | Capture fresh PyTorch trace output (`trace_py_after_H3.log`), then rebuild the C BEAM-pivot pix0 computation in a scratch notebook (`phase_h/pix0_reproduction.md`) using the supervisor CLI parameters. Show numerically that PyTorch’s raw `pix0_override_m` differs by ~1.14 mm from C’s transformed vector, propagate both through the pixel position and scattering vector calculations, and update `phase_h/implementation_notes.md` with the confirmed first divergence and proposed detector-side fix plan. Include an explicit TODO to restore `phase_h/attempt_log.txt` (currently clobbered by pytest output) with a human-readable Attempt #21 entry before requesting code changes. |
-| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
+| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
+| H3b | Implement BEAM-pivot transform for pix0 overrides | [ ] | Apply the C-style formula `pix0 = -Fbeam·fdet - Sbeam·sdet + distance_corrected·beam` even when `pix0_override_m` is provided so CUSTOM overrides obey the BEAM pivot. Guard differentiability/device neutrality, add a targeted regression test under `tests/test_cli_flags.py`, and document the change in `phase_h/implementation_notes.md`. Capture code diff + pytest log under `reports/2025-10-cli-flags/phase_h/implementation/`. |
+| H4 | Validate lattice parity | [ ] | Once H3b lands, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   80405b7..502607a  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=25...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=25
Updating 502607a..0a405af
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   502607a..0a405af  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=25
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 0a405af..ecc9636
Fast-forward
 .../implementation/pytest_pix0_override.log        |  11 ++
 src/nanobrag_torch/models/detector.py              |  24 +--
 tests/test_cli_flags.py                            | 176 ++++++++++++++++-----
 3 files changed, 166 insertions(+), 45 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_h/implementation/pytest_pix0_override.log
From github.com:hoidn/nanoBragg
   0a405af..ecc9636  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Updating ecc9636..3b2697b
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   ecc9636..3b2697b  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=26
Ralph completed iteration 25; proceeding to 26
