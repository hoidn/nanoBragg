Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=38
To github.com:hoidn/nanoBragg.git
   1697e53..141767a  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T16:16:53] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T16:16:53] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: When the Phase is Evidence, you must not execute tests; any pytest command included here is provided for Ralph’s subsequent loop.
<Do Now guidelines>
Phase Gate (Evidence): If the active plan phase is Evidence, do not run pytest at all (including collection). Limit evidence gathering to non-test probes and command‑line tooling (e.g., scripts/validation/*, minimal parity CLIs). Do not include runnable tests in this loop.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T16:16:55] thinking

**Preparing to run git pull command**
[2025-10-06T16:16:56] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:16:58] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.09s:
Already up to date.
[2025-10-06T16:16:58] tokens used: 12,895

[2025-10-06T16:16:59] thinking

**Preparing to read galph_memory.md**
[2025-10-06T16:17:00] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:01] bash -lc 'cat galph_memory.md' succeeded in 685ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T16:17:01] tokens used: 13,072

[2025-10-06T16:17:05] thinking

**Preparing to read documentation files**
[2025-10-06T16:17:05] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:06] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 702ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T16:17:06] tokens used: 16,070

[2025-10-06T16:17:08] thinking

**Reviewing key documentation**
[2025-10-06T16:17:08] exec bash -lc "sed -n '1,160p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:09] bash -lc "sed -n '1,160p' specs/spec-a.md" succeeded in 729ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T16:17:09] tokens used: 17,771

[2025-10-06T16:17:11] thinking

**Preparing to read relevant specification shards**
[2025-10-06T16:17:15] exec bash -lc "sed -n '1,200p' specs/spec-a-cli.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:16] bash -lc "sed -n '1,200p' specs/spec-a-cli.md" succeeded in 725ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-06T16:17:16] tokens used: 18,078

[2025-10-06T16:17:19] thinking

**Reviewing architecture document**
[2025-10-06T16:17:23] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:23] bash -lc "sed -n '1,200p' arch.md" succeeded in 703ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T16:17:23] tokens used: 21,074

[2025-10-06T16:17:25] thinking

**Checking configuration mapping docs**
[2025-10-06T16:17:26] exec bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:27] bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 694ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T16:17:27] tokens used: 23,550

[2025-10-06T16:17:28] thinking

**Opening debugging documentation**
[2025-10-06T16:17:30] exec bash -lc "sed -n '1,160p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:31] bash -lc "sed -n '1,160p' docs/debugging/debugging.md" succeeded in 680ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T16:17:31] tokens used: 25,408

[2025-10-06T16:17:32] thinking

**Checking for testing strategy documentation**
[2025-10-06T16:17:34] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:35] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 692ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T16:17:35] tokens used: 27,357

[2025-10-06T16:17:37] thinking

**Planning to review fix_plan.md**
[2025-10-06T16:17:38] exec bash -lc "sed -n '1,120p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:39] bash -lc "sed -n '1,120p' docs/fix_plan.md" succeeded in 690ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T16:17:39] tokens used: 29,935

[2025-10-06T16:17:42] thinking

**Identifying relevant plan files**
[2025-10-06T16:17:43] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:43] bash -lc 'ls plans/active' succeeded in 696ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T16:17:43] tokens used: 31,588

[2025-10-06T16:17:47] thinking

**Preparing to analyze vectorization plan**
[2025-10-06T16:17:49] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:49] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 750ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

[2025-10-06T16:17:49] tokens used: 31,954

[2025-10-06T16:17:51] thinking

**Reviewing phase and vectorization plans**
[2025-10-06T16:17:54] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:17:55] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 663ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T16:17:55] tokens used: 34,915

[2025-10-06T16:18:00] thinking

**Preparing for detailed code inspection**
[2025-10-06T16:18:02] exec bash -lc 'rg "sincg" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:03] bash -lc 'rg "sincg" -n src/nanobrag_torch' succeeded in 718ms:
src/nanobrag_torch/simulator.py:16:from .utils.physics import sincg, sinc3, polarization_factor
src/nanobrag_torch/simulator.py:219:        F_latt_a = sincg(torch.pi * (h - h0), Na)
src/nanobrag_torch/simulator.py:220:        F_latt_b = sincg(torch.pi * (k - k0), Nb)
src/nanobrag_torch/simulator.py:221:        F_latt_c = sincg(torch.pi * (l - l0), Nc)
src/nanobrag_torch/simulator.py:1263:                    from nanobrag_torch.utils import sincg
src/nanobrag_torch/simulator.py:1264:                    F_latt_a = sincg(torch.pi * torch.tensor(h - h0), Na).item()
src/nanobrag_torch/simulator.py:1265:                    F_latt_b = sincg(torch.pi * torch.tensor(k - k0), Nb).item()
src/nanobrag_torch/simulator.py:1266:                    F_latt_c = sincg(torch.pi * torch.tensor(l - l0), Nc).item()
src/nanobrag_torch/config.py:90:    SQUARE = "square"  # Parallelepiped/grating using sincg function
src/nanobrag_torch/utils/physics.py:33:def sincg(u: torch.Tensor, N: torch.Tensor) -> torch.Tensor:
src/nanobrag_torch/utils/physics.py:120:    It provides an alternative to the `sincg` function for modeling the
src/nanobrag_torch/utils/__init__.py:10:from .physics import polarization_factor, sinc3, sincg
src/nanobrag_torch/utils/__init__.py:18:    "sincg",
[2025-10-06T16:18:03] tokens used: 37,619

[2025-10-06T16:18:05] thinking

**Checking code and plan discrepancy**
[2025-10-06T16:18:06] exec bash -lc "sed -n '180,260p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:07] bash -lc "sed -n '180,260p' src/nanobrag_torch/simulator.py" succeeded in 748ms:
            rot_c_broadcast = rot_c.unsqueeze(0).unsqueeze(0)
        else:
            # (S, F) case: add 3 leading dims
            rot_a_broadcast = rot_a.unsqueeze(0).unsqueeze(0).unsqueeze(0)
            rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0).unsqueeze(0)
            rot_c_broadcast = rot_c.unsqueeze(0).unsqueeze(0).unsqueeze(0)
    else:
        # Single source: (S, F, 3) -> (S, F, 1, 1, 3) or (batch, 3) -> (batch, 1, 1, 3)
        scattering_broadcast = scattering_vector.unsqueeze(-2).unsqueeze(-2)
        # rot vectors: (N_phi, N_mos, 3) -> (1, 1, N_phi, N_mos, 3)
        rot_a_broadcast = rot_a.unsqueeze(0).unsqueeze(0)
        rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0)
        rot_c_broadcast = rot_c.unsqueeze(0).unsqueeze(0)

    h = dot_product(scattering_broadcast, rot_a_broadcast)
    k = dot_product(scattering_broadcast, rot_b_broadcast)
    l = dot_product(scattering_broadcast, rot_c_broadcast)  # noqa: E741

    # Find nearest integer Miller indices
    h0 = torch.round(h)
[2025-10-06T16:18:07] tokens used: 38,182

[2025-10-06T16:18:11] thinking

**Analyzing mismatches and flags**
[2025-10-06T16:18:27] exec bash -lc 'rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:27] bash -lc 'rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 910ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T16:18:27] tokens used: 39,835

[2025-10-06T16:18:29] thinking

**Checking code near line 448**
[2025-10-06T16:18:31] exec bash -lc "sed -n '448,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:32] bash -lc "sed -n '448,620p' docs/fix_plan.md" succeeded in 733ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A-H complete; polarization Phase I pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
  1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
  2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-06T16:18:32] tokens used: 40,120

[2025-10-06T16:18:35] thinking

**Planning deep codebase analysis**

I’m focusing on analyzing the codebase deeply to identify current issues and gaps related to long-term goals, looking into docs/fix_plan and plans/active for guidance. Also, I want to finalize whether to proceed with Python for the next steps.
[2025-10-06T16:18:36] exec bash -lc "python -c \"import random; print(random.choice(['heads','tails']))\"" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:37] bash -lc "python -c \"import random; print(random.choice(['heads','tails']))\"" succeeded in 753ms:
heads
[2025-10-06T16:18:37] tokens used: 43,037

[2025-10-06T16:18:39] thinking

**Reviewing recent commit history**
[2025-10-06T16:18:39] exec bash -lc 'git log --oneline -n 12' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:40] bash -lc 'git log --oneline -n 12' succeeded in 727ms:
141767a [SYNC i=38] actor=galph status=running
1697e53 [SYNC i=38] actor=ralph → next=galph status=ok ralph_commit=ed1a905
ed1a905 CLI-FLAGS-003 Phase H5c: Capture PyTorch trace post-revert, identify pix0 parity gap (ΔF=1.1mm)
54b9004 [SYNC i=37] actor=ralph status=running
b31b1f3 [SYNC i=37] actor=galph → next=ralph status=ok galph_commit=35ac6f4
35ac6f4 SUPERVISOR: CLI-FLAGS-003 guidance - tests: not run
893b87e [SYNC i=37] actor=galph status=running
8d2a47c [SYNC i=37] actor=ralph → next=galph status=ok ralph_commit=831b670
831b670 CLI-FLAGS-003 H5b revert: restore custom-vector pix0 override precedence
b2a520f [SYNC i=36] actor=ralph status=running
135c8cb [SYNC i=36] actor=galph → next=ralph status=ok galph_commit=6687255
6687255 SUPERVISOR: CLI-FLAGS-003 H5 revert directive - tests: not run
[2025-10-06T16:18:40] tokens used: 43,309

[2025-10-06T16:18:45] thinking

**Reviewing commit diff**
[2025-10-06T16:18:46] exec bash -lc 'git show --stat ed1a905' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:47] bash -lc 'git show --stat ed1a905' succeeded in 747ms:
commit ed1a905a19be2273a22c8eccafe5ad0230a6e671
Author: ollie <ohoidn>
Date:   Mon Oct 6 09:16:01 2025 -0700

    CLI-FLAGS-003 Phase H5c: Capture PyTorch trace post-revert, identify pix0 parity gap (ΔF=1.1mm)
    
    Evidence-capture loop only, no implementation changes.
    
    Artifacts:
    - reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log (40 TRACE_PY lines)
    - reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.stdout (full harness output)
    - reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md (component comparison)
    - reports/2025-10-cli-flags/phase_h5/parity_summary.md (updated metrics table)
    - docs/fix_plan.md (Attempt #32 logged)
    
    Key Finding: pix0 divergence persists despite Attempt #31 revert:
    - ΔS = +1.393e-04 m (139 μm)
    - ΔF = -1.136e-03 m (1.1 mm) - exceeds <5e-5 m threshold
    - ΔO = -5.594e-06 m
    
[2025-10-06T16:18:47] tokens used: 43,850

[2025-10-06T16:18:48] thinking

**Reviewing previous commit**
[2025-10-06T16:18:49] exec bash -lc 'git show --stat 831b670' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:18:50] bash -lc 'git show --stat 831b670' succeeded in 777ms:
commit 831b670e4af6fa4e520307018fbbd478ee8b03c4
Author: ollie <ohoidn>
Date:   Mon Oct 6 08:56:04 2025 -0700

    CLI-FLAGS-003 H5b revert: restore custom-vector pix0 override precedence
    
    Revert Attempt #29 to match C behavior where pix0_override is IGNORED
    when custom detector vectors are present (per Attempt #30 evidence).
    
    Changes:
    - src/nanobrag_torch/models/detector.py:518-539
      * Added has_custom_vectors detection logic
      * Gate pix0_override with: if pix0_override_tensor and not has_custom_vectors
      * Updated comments to reference c_precedence_2025-10-22.md
    
    Testing:
    - Targeted: test_cli_flags.py::TestCLIPix0Override 4/4 passed (2.43s)
    - Core suite: cli_flags 26/26, detector_geometry 12/12, crystal 19/19
    - Total: 57 passed, 1 warning
    
[2025-10-06T16:18:50] tokens used: 44,573

[2025-10-06T16:18:58] thinking

**Evaluating debugging hypotheses for F_latt issue**

I need to gather context by reviewing commit history and current plans, focusing on long-term goals related to noise and vectorization. The main debugging task involves a parity issue with F_latt, likely caused by how `sincg` uses `(h-h0)`. My goal is to produce 1-3 hypotheses and triage them by checking relevant code, especially comparing to the C implementation around line 3063 in `golden_suite_generator/nanoBragg.c`.
[2025-10-06T16:19:01] exec bash -lc "sed -n '3040,3120p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:19:01] bash -lc "sed -n '3040,3120p' golden_suite_generator/nanoBragg.c" succeeded in 664ms:
                                    h = dot_product(a,scattering);
                                    k = dot_product(b,scattering);
                                    l = dot_product(c,scattering);

                                    /* round off to nearest whole index */
                                    h0 = ceil(h-0.5);
                                    k0 = ceil(k-0.5);
                                    l0 = ceil(l-0.5);

                                    /* trace output for specific pixel */
                                    if(fpixel==trace_fpixel && spixel==trace_spixel && source==0 && mos_tic==0 && phi_tic==0) {
                                        printf("TRACE_C: rot_a_angstroms %.15g %.15g %.15g\n", a[1]*1e10, a[2]*1e10, a[3]*1e10);
                                        printf("TRACE_C: rot_b_angstroms %.15g %.15g %.15g\n", b[1]*1e10, b[2]*1e10, b[3]*1e10);
                                        printf("TRACE_C: rot_c_angstroms %.15g %.15g %.15g\n", c[1]*1e10, c[2]*1e10, c[3]*1e10);
                                        printf("TRACE_C: rot_a_star_A_inv %.15g %.15g %.15g\n", a_star[1], a_star[2], a_star[3]);
                                        printf("TRACE_C: rot_b_star_A_inv %.15g %.15g %.15g\n", b_star[1], b_star[2], b_star[3]);
                                        printf("TRACE_C: rot_c_star_A_inv %.15g %.15g %.15g\n", c_star[1], c_star[2], c_star[3]);
                                        printf("TRACE_C: hkl_frac %.15g %.15g %.15g\n", h, k, l);
                                        printf("TRACE_C: hkl_rounded %d %d %d\n", h0, k0, l0);
                                    }
[2025-10-06T16:19:01] tokens used: 45,640

[2025-10-06T16:19:22] thinking

**Reviewing and updating project plans**

I'm comparing the PyTorch and C implementations to identify key differences and verifying if the existing vectorization plan needs updating or just reviewing. I’m considering outstanding tasks for CLI flags and vectorization phases, evaluating hypotheses for bugs, and planning how to clarify and strengthen the plans before delegating implementation.
[2025-10-06T16:19:23] exec bash -lc "sed -n '356,448p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:19:24] bash -lc "sed -n '356,448p' docs/fix_plan.md" succeeded in 967ms:
    Observations/Hypotheses: Doubling of iterations amplifies routing violation and risk of spam pushes; confirms automation remains unsupervised.
    Next Actions: Execute plan Phase A immediately and block automation until evidence captured.
  * [2025-10-07] Attempt #4 — Result: still in violation. Current `loop.sh` (lines 11-19) continues to pipe `prompts/main.md` through Claude 40× with unconditional `git push || true`.
    Metrics: n/a — manual inspection only.
    Artifacts: None yet; must create `reports/routing/<date>-loop-audit.txt` during Plan Phase A.
    Observations/Hypotheses: Until we capture the audit and restore single-iteration `prompts/debug.md`, automation poses risk of repeated bad pushes (Protected Assets rule reminder: do not delete `loop.sh`).
    Next Actions: Ralph to execute plan tasks A1–A3 before any further automation runs; supervisor to hold routing plan open until audit log and corrective diff exist.
  * [2025-10-06] Attempt #2 — Result: regression. Discovered automation script once again runs `prompts/main.md` inside a fixed loop, violating routing guard and spamming `git push`. Plan rebooted (now archived at `plans/archive/routing-loop-guard/plan.md`) with Phase A tasks pending at the time.
    Metrics: n/a
    Artifacts: To be captured during Phase A (see plan tasks A1–A3).
    Observations/Hypotheses: Likely rebase dropped prior fix; guard needs reinstatement alongside single-iteration workflow.
    Next Actions: Execute Phase A to document current state, then complete Phases B–C per plan.
  * [2025-10-01] Attempt #1 — Result: success. `loop.sh` now runs a single `git pull` and invokes `prompts/debug.md` only; verification captured in `reports/routing/2025-10-01-loop-verify.txt`.
    Metrics: n/a
    Artifacts: reports/routing/2025-10-01-loop-verify.txt
    Observations/Hypotheses: Guard prevents Ralph from re-entering prompts/main.md while parity tests fail.
    Next Actions: Monitor automation once AT suite is fully green before permitting main prompt.
  * [2025-10-01] Attempt #5 — Result: success (plan Phases A–C complete). Captured audit showing violations (40-iteration loop using prompts/main.md with unconditional push), remediated script to single-execution prompts/debug.md with git pull --rebase and conditional push, verified compliance.
    Metrics: Crystal geometry smoke test 19/19 passed post-change; no regressions.
    Artifacts: reports/routing/20251001-loop-audit.txt (Phase A), reports/routing/20251001-compliance-verified.txt (Phase C), loop.sh (git diff).
[2025-10-06T16:19:24] tokens used: 48,277

[2025-10-06T16:19:49] thinking

**Outlining multi-step planning and documentation updates**

I'm mapping out the detailed sequence of analysis, review, planning, and documentation updates required before producing the final summary and input instructions for Ralph. This includes carefully refining the plan and fix_plan files to incorporate new insights around the F_latt fix, adding precise references and reproduction commands, clarifying ownership, and ensuring alignment with spec lines and test scripts, all while preparing to commit these doc changes.
[2025-10-06T16:19:54] tokens used: 52,871

[2025-10-06T16:19:56] thinking

**Adjusting patch scope to fix error**
[2025-10-06T16:19:57] exec bash -lc "sed -n '220,280p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:19:58] bash -lc "sed -n '220,280p' plans/active/cli-noise-pix0/plan.md" succeeded in 927ms:

[2025-10-06T16:19:58] tokens used: 53,843

[2025-10-06T16:20:00] thinking

**Searching for "Phase K" occurrences**
[2025-10-06T16:20:01] exec bash -lc 'rg -n "Phase K" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:20:02] bash -lc 'rg -n "Phase K" plans/active/cli-noise-pix0/plan.md' succeeded in 736ms:
7:- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
11:  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
127:| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
128:| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
150:| J3 | Update fix_plan Attempt log | [D] | ✅ 2025-10-19: Attempt #28 logged in `docs/fix_plan.md` with complete metrics, artifacts, and hypothesis (F_latt calculation error in sincg lattice shape factor). Phase I3 remains blocked pending Phase K F_latt fix. |
152:### Phase K — Normalization Implementation
[2025-10-06T16:20:02] tokens used: 54,023

[2025-10-06T16:20:03] thinking

**Checking lines near table**
[2025-10-06T16:20:05] exec bash -lc "sed -n '152,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:20:05] bash -lc "sed -n '152,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 676ms:
### Phase K — Normalization Implementation
Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
| K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |

### Phase L — Final Parity & Regression Sweep
Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
Prereqs: Phases J–K complete; scaling regression tests green.
Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
[2025-10-06T16:20:05] tokens used: 54,575

[2025-10-06T16:20:09] thinking

**Updating keys and reapplying patch**
[2025-10-06T16:20:14] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -158,5 +158,5 @@
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
[2025-10-06T16:20:14] apply_patch(auto_approved=true) exited 0 in 8ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:20:14] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T16:20:14] tokens used: 107,675
[2025-10-06T16:20:14] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:20:34] thinking

**Reviewing Phase H5 and K1 task dependencies**

I’m checking whether Phase H5 tasks—especially fixing the pix0 difference—are fully resolved before shifting focus to Phase K1. It looks like the pix0 mismatch persists despite reverts, so K1 can’t start yet. I’ll dig into recent reports and commit notes to gather clues and form hypotheses about why the pix0 parity problem remains.
[2025-10-06T16:20:36] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:20:37] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md" succeeded in 986ms:
# PyTorch vs C Trace Comparison — Phase H5c

**Command:**
```bash
PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log
```

**Date:** 2025-10-22
**Pixel:** (slow=1039, fast=685)

## Metrics Summary

### pix0_vector (meters)
- **C (line 8):**   `DETECTOR_PIX0_VECTOR -0.216475836204836 0.216343050492215 -0.230192414300537`
- **PyTorch:**      `TRACE_PY: pix0_vector_meters -0.216336513668519 0.21520668107301 -0.230198008546698`

Component deltas:
- ΔS (slow):   -0.216336513668519 - (-0.216475836204836) = **+1.393e-04 m**
- ΔF (fast):   0.21520668107301 - 0.216343050492215   = **-1.136e-03 m**
- ΔO (normal): -0.230198008546698 - (-0.230192414300537) = **-5.594e-06 m**
[2025-10-06T16:20:37] tokens used: 109,922
[2025-10-06T16:20:37] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:20:44] thinking

**Investigating pix0 vector discrepancy**
[2025-10-06T16:20:47] exec bash -lc 'rg -n "pix0_vector_mm" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:20:48] bash -lc 'rg -n "pix0_vector_mm" -n src/nanobrag_torch' succeeded in 900ms:
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:462:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:557:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:558:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:564:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:566:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
src/nanobrag_torch/models/detector.py:521:            # C code IGNORES -pix0_vector_mm when custom detector vectors are present.
[2025-10-06T16:20:48] tokens used: 111,479
[2025-10-06T16:20:48] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:02] thinking

**Inspecting gating in detector.py**
[2025-10-06T16:21:05] exec bash -lc "sed -n '500,560p' src/nanobrag_torch/models/detector.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:05] bash -lc "sed -n '500,560p' src/nanobrag_torch/models/detector.py" succeeded in 888ms:
            # Therefore, the simple formula Fbeam = beam_center_f * pixel_size is correct!

            # Direct mapping: no axis swap needed
            # CRITICAL: For MOSFLM, apply +0.5 pixel offset to convert from user-provided beam_center
            # (Xbeam/Ybeam) to internal Fbeam/Sbeam. This offset is part of the MOSFLM convention.
            if self.config.detector_convention == DetectorConvention.MOSFLM:
                # Add +0.5 pixel offset for MOSFLM convention
                Fbeam = (self.beam_center_f + 0.5) * self.pixel_size
                Sbeam = (self.beam_center_s + 0.5) * self.pixel_size
            else:
                # Other conventions: use beam centers as-is
                Fbeam = self.beam_center_f * self.pixel_size
                Sbeam = self.beam_center_s * self.pixel_size

            # Reuse beam_vector from r-factor calculation above
            # This ensures CUSTOM convention overrides (e.g., -beam_vector) are honored
            # beam_vector is already set via self.beam_vector property

            # CLI-FLAGS-003 Phase H5b: Handle pix0_override for BEAM pivot
            # PRECEDENCE RULE (Phase H5a evidence, 2025-10-22):
[2025-10-06T16:21:05] tokens used: 111,832
[2025-10-06T16:21:05] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:19] thinking

**Investigating beam center computation discrepancies**

I'm exploring why pix0 values differ despite ignoring overrides with custom vectors, suspecting the beam center-to-Fbeam mapping formula may differ from C's approach. I'll check how `beam_center_f` and `beam_center_s` get set from CLI inputs and verify if Fbeam and Sbeam get recomputed after rotations even when overrides are ignored. Searching for `newvector` usage will help clarify this.
[2025-10-06T16:21:22] exec bash -lc 'rg -n "newvector" src/nanobrag_torch/models/detector.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:23] bash -lc 'rg -n "newvector" src/nanobrag_torch/models/detector.py' succeeded in 954ms:
696:        # newvector[1] = close_distance/ratio*beam_vector[1]-pix0_vector[1];
697:        # newvector[2] = close_distance/ratio*beam_vector[2]-pix0_vector[2];
698:        # newvector[3] = close_distance/ratio*beam_vector[3]-pix0_vector[3];
700:        # Fbeam = dot_product(fdet_vector,newvector);
701:        # Sbeam = dot_product(sdet_vector,newvector);
710:        # newvector = (close_distance / r_factor) * beam_vector - pix0_vector
712:        newvector = beam_impact_term - self.pix0_vector
718:        Fbeam_recomputed = torch.dot(self.fdet_vec, newvector)
719:        Sbeam_recomputed = torch.dot(self.sdet_vec, newvector)
[2025-10-06T16:21:23] tokens used: 113,188
[2025-10-06T16:21:23] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:31] thinking

**Reviewing context near line 680**
[2025-10-06T16:21:34] exec bash -lc "sed -n '660,740p' src/nanobrag_torch/models/detector.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:35] bash -lc "sed -n '660,740p' src/nanobrag_torch/models/detector.py" succeeded in 905ms:
            # (rotation angles already converted to tensors above)
            rotation_matrix = angles_to_rotation_matrix(detector_rotx, detector_roty, detector_rotz)
            pix0_rotated = torch.matmul(rotation_matrix, pix0_initial)

            if isinstance(c.twotheta_axis, torch.Tensor):
                twotheta_axis = c.twotheta_axis.to(device=self.device, dtype=self.dtype)
            elif c.twotheta_axis is not None:
                twotheta_axis = torch.tensor(c.twotheta_axis, device=self.device, dtype=self.dtype)
            else:
                # Default to convention-specific axis (set in config.__post_init__)
                # MOSFLM uses [0, 0, -1], XDS uses [1, 0, 0], etc.
                # This should already be set in config, but fallback to MOSFLM default
                twotheta_axis = torch.tensor([0.0, 0.0, -1.0], device=self.device, dtype=self.dtype)

            # Always apply twotheta rotation to preserve gradients
            # When detector_twotheta is zero, this will be identity
            pix0_rotated = rotate_axis(pix0_rotated, twotheta_axis, detector_twotheta)

            # CLI-FLAGS-003 Phase F2: SAMPLE pivot always uses calculated pix0
            # The C code (nanoBragg.c:1739-1745) shows that pix0_override is IGNORED for SAMPLE pivot;
[2025-10-06T16:21:35] tokens used: 113,609
[2025-10-06T16:21:35] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:38] thinking

**Reviewing pix0 vector computation**
[2025-10-06T16:21:41] exec bash -lc "sed -n '380,500p' src/nanobrag_torch/models/detector.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:42] bash -lc "sed -n '380,500p' src/nanobrag_torch/models/detector.py" succeeded in 687ms:

        MOSFLM vs CUSTOM convention (from nanoBragg.c lines 1218-1219 vs 1236-1239):
        MOSFLM: Fbeam = Ybeam + 0.5*pixel_size, Sbeam = Xbeam + 0.5*pixel_size
        CUSTOM: Fclose = Xbeam, Sclose = Ybeam (no +0.5 offset)

        Note: Pixel coordinates are generated at pixel corners/edges (pixel 0 at position 0, etc.)
        """
        from ..config import DetectorPivot, DetectorConvention
        from ..utils.geometry import angles_to_rotation_matrix, rotate_axis
        from ..utils.units import degrees_to_radians

        # Convert pix0_override to tensor if provided (CLI-FLAGS-003 Phase F2)
        # This will be used instead of calculating pix0 from pivot formulas,
        # but we still need to calculate r_factor and derive close_distance from it
        pix0_override_tensor = None
        if self.config.pix0_override_m is not None:
            override = self.config.pix0_override_m
            if isinstance(override, (tuple, list)):
                pix0_override_tensor = torch.tensor(override, device=self.device, dtype=self.dtype)
            elif isinstance(override, torch.Tensor):
[2025-10-06T16:21:42] tokens used: 119,920
[2025-10-06T16:21:42] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:45] thinking

**Verifying beam_center_f units**
[2025-10-06T16:21:45] exec bash -lc 'rg -n "beam_center_f" -n src/nanobrag_torch/config.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:46] bash -lc 'rg -n "beam_center_f" -n src/nanobrag_torch/config.py' succeeded in 693ms:
188:    beam_center_f: Union[float, torch.Tensor, None] = None  # fast axis (auto-calculated if None)
263:        if self.beam_center_s is None or self.beam_center_f is None:
272:                if self.beam_center_f is None:
273:                    self.beam_center_f = (detsize_f + self.pixel_size_mm) / 2.0
279:                if self.beam_center_f is None:
280:                    self.beam_center_f = detsize_f / 2.0
286:                if self.beam_center_f is None:
287:                    self.beam_center_f = (detsize_f + self.pixel_size_mm) / 2.0
293:                if self.beam_center_f is None:
294:                    self.beam_center_f = detsize_f / 2.0
[2025-10-06T16:21:46] tokens used: 123,020
[2025-10-06T16:21:46] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:49] thinking

**Verifying beam_center_f usage**
[2025-10-06T16:21:49] exec bash -lc 'rg -n "beam_center_f" src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:50] bash -lc 'rg -n "beam_center_f" src/nanobrag_torch/__main__.py' succeeded in 708ms:
762:    print(f"  Beam center: S={detector_config.beam_center_s:.3f} mm, F={detector_config.beam_center_f:.3f} mm")
915:                # Leave beam_center_f and beam_center_s at their defaults (detector center)
921:                detector_config.beam_center_f = Ybeam_mm
926:                detector_config.beam_center_f = Xbeam_mm
930:                detector_config.beam_center_f = Xbeam_mm
1166:                beam_center_y_mm=detector_config.beam_center_f,
1239:                beam_center_y_mm=detector_config.beam_center_f,
[2025-10-06T16:21:50] tokens used: 123,429
[2025-10-06T16:21:50] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:21:53] thinking

**Inspecting conversions near line 900**
[2025-10-06T16:21:56] exec bash -lc "sed -n '880,940p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:21:57] bash -lc "sed -n '880,940p' src/nanobrag_torch/__main__.py" succeeded in 709ms:
            # Custom vectors for CUSTOM convention
            custom_fdet_vector=config.get('custom_fdet_vector'),
            custom_sdet_vector=config.get('custom_sdet_vector'),
            custom_odet_vector=config.get('custom_odet_vector'),
            custom_beam_vector=config.get('custom_beam_vector'),
            # Detector origin override (CLI-FLAGS-003)
            pix0_override_m=config.get('pix0_override_m')
        )

        # Set beam center if provided (values are in mm)
        # CRITICAL: C-code Xbeam/Ybeam semantics are convention AND pivot-mode dependent! (AT-PARALLEL-004 root cause)
        #
        # C-code behavior (nanoBragg.c lines 631-648, 1206-1275):
        #   - `-Xbeam`/`-Ybeam` set detector_pivot = BEAM (line 632, 637)
        #   - `-Xclose`/`-Yclose` set detector_pivot = SAMPLE (line 642, 647)
        #   - Convention selection OVERRIDES pivot: XDS/DIALS force SAMPLE pivot (lines 1250, 1265)
        #   - For SAMPLE pivot: Xbeam/Ybeam are IGNORED; C uses detector center (Fclose=detsize/2)
        #   - For BEAM pivot: Xbeam/Ybeam are mapped to Fbeam/Sbeam with convention-specific axis swaps
        #
        # Result: `-xds -Xbeam X -Ybeam Y` is contradictory; C resolves by using SAMPLE pivot
[2025-10-06T16:21:57] tokens used: 123,825
[2025-10-06T16:21:57] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:22:00] thinking

**Checking units of pixel_size**
[2025-10-06T16:22:01] exec bash -lc 'rg -n "self.pixel_size" -n src/nanobrag_torch/models/detector.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:22:02] bash -lc 'rg -n "self.pixel_size" -n src/nanobrag_torch/models/detector.py' succeeded in 718ms:
61:        self.pixel_size = config.pixel_size_mm / 1000.0  # Convert mm to meters
268:            adjusted_f = (beam_s_pixels + 0.5) * self.pixel_size  # S→F mapping
269:            adjusted_s = (beam_f_pixels + 0.5) * self.pixel_size  # F→S mapping
507:                Fbeam = (self.beam_center_f + 0.5) * self.pixel_size
508:                Sbeam = (self.beam_center_s + 0.5) * self.pixel_size
511:                Fbeam = self.beam_center_f * self.pixel_size
512:                Sbeam = self.beam_center_s * self.pixel_size
567:                    self.beam_center_f = (Fbeam / self.pixel_size - 0.5).to(device=self.device, dtype=self.dtype)
568:                    self.beam_center_s = (Sbeam / self.pixel_size - 0.5).to(device=self.device, dtype=self.dtype)
571:                    self.beam_center_f = (Fbeam / self.pixel_size).to(device=self.device, dtype=self.dtype)
572:                    self.beam_center_s = (Sbeam / self.pixel_size).to(device=self.device, dtype=self.dtype)
639:                Fclose = (self.beam_center_f + 0.5) * self.pixel_size
640:                Sclose = (self.beam_center_s + 0.5) * self.pixel_size
643:                Fclose = self.beam_center_f * self.pixel_size
644:                Sclose = self.beam_center_s * self.pixel_size
812:            + s_grid.unsqueeze(-1) * self.pixel_size * sdet_expanded
813:            + f_grid.unsqueeze(-1) * self.pixel_size * fdet_expanded
837:        Sdet = s_grid * self.pixel_size  # meters
838:        Fdet = f_grid * self.pixel_size  # meters
938:            omega = (self.pixel_size * self.pixel_size) / (R * R) * (self.close_distance / R)
[2025-10-06T16:22:02] tokens used: 125,067
[2025-10-06T16:22:02] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:22:28] thinking

**Analyzing beam_center_f unit inconsistency**
[2025-10-06T16:22:31] exec bash -lc "sed -n '240,320p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:22:32] bash -lc "sed -n '240,320p' src/nanobrag_torch/config.py" succeeded in 929ms:
        - If only distance_mm is provided (not close_distance_mm): pivot = BEAM
        - If only close_distance_mm is provided: pivot = SAMPLE
        - If detector_pivot is explicitly set: use that (explicit override wins)
        """
        # AT-GEO-002: Automatic pivot selection based on distance parameters
        if self.detector_pivot is None:
            # Determine if distance_mm was explicitly provided (not just defaulted)
            # Note: In real CLI, we'd know if user provided -distance vs -close_distance
            # For testing, we use the presence/absence of close_distance_mm as indicator

            if self.close_distance_mm is not None:
                # Setup B: -close_distance provided -> pivot SHALL be SAMPLE
                self.detector_pivot = DetectorPivot.SAMPLE
                # Use close_distance as the actual distance if distance wasn't provided
                if self.distance_mm == 100.0:  # Default value, likely not explicitly set
                    self.distance_mm = self.close_distance_mm
            else:
                # Setup A: Only -distance provided -> pivot SHALL be BEAM
                self.detector_pivot = DetectorPivot.BEAM
        # Setup C: Explicit -pivot override is already set, keep it
[2025-10-06T16:22:32] tokens used: 127,009
[2025-10-06T16:22:32] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:22:37] thinking

**Analyzing beam center unit mismatch**
[2025-10-06T16:22:38] exec bash -lc 'rg -n "Fbeam" golden_suite_generator/nanoBragg.c | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:22:39] bash -lc 'rg -n "Fbeam" golden_suite_generator/nanoBragg.c | head' succeeded in 710ms:
278:    double Fbeam=NAN,Sbeam=NAN;
1184:    if(isnan(Fbeam)) Fbeam = Fclose;
1204:        Fbeam = Xbeam;
1220:        Fbeam = Ybeam + 0.5*pixel_size;
1235:        Fbeam = Ybeam + 0.0*pixel_size;
1250:        Fbeam = Xbeam;
1265:        Fbeam = Xbeam;
1273:        Fbeam = Xbeam;
1822:        printf("TRACE_C:convention_mapping=Fbeam←Ybeam_mm(+0.5px),Sbeam←Xbeam_mm(+0.5px),beam_vec=[1 0 0]\n");
1823:        trace_scalar("Fbeam_m", Fbeam);
[2025-10-06T16:22:39] tokens used: 128,618
[2025-10-06T16:22:39] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:22:42] thinking

**Reviewing custom Fbeam assignment**
[2025-10-06T16:22:43] exec bash -lc "sed -n '1180,1250p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:22:44] bash -lc "sed -n '1180,1250p' golden_suite_generator/nanoBragg.c" succeeded in 684ms:
    if(isnan(Fclose)) Fclose = (detsize_f - 0*pixel_size)/2.0;
    if(isnan(Sclose)) Sclose = (detsize_s + 0*pixel_size)/2.0;
    if(isnan(Xclose)) Xclose = Fclose;
    if(isnan(Yclose)) Yclose = Sclose;
    if(isnan(Fbeam)) Fbeam = Fclose;
    if(isnan(Sbeam)) Sbeam = Sclose;
    if(roi_xmin < 0) roi_xmin = 0;
    if(roi_xmax < 0) roi_xmax = fpixels;
    if(roi_ymin < 0) roi_ymin = 0;
    if(roi_ymax < 0) roi_ymax = spixels;
    progress_pixels = (roi_xmax-roi_xmin+1)*(roi_ymax-roi_ymin+1);

    if(beam_convention == ADXV)
    {
        /* first pixel is at 0,0 pix and pixel_size,pixel_size*npixels mm */
        if(isnan(Xbeam)) Xbeam = (detsize_f + pixel_size)/2.0;
        if(isnan(Ybeam)) Ybeam = (detsize_s - pixel_size)/2.0;
           beam_vector[1]=  0;    beam_vector[2]=  0;    beam_vector[3]=  1;
           fdet_vector[1]=  1;    fdet_vector[2]=  0;    fdet_vector[3]=  0;
           sdet_vector[1]=  0;    sdet_vector[2]= -1;    sdet_vector[3]=  0;
[2025-10-06T16:22:44] tokens used: 129,018
[2025-10-06T16:22:44] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..a5ea99fac5bf7a2c17f3cffb461aa7b19e9fce5b
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -156,9 +156,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:23:10] thinking

**Analyzing unit inconsistencies and planning fixes**

I'm investigating how Fbeam's units (mm) relate to the final pix0 vector in meters in the C code, noticing possible mismatches from incorrect unit conversions. I plan to update the project plan by adding a new task under Phase H5 (e.g., H5e) to fix and verify beam center unit mapping before moving forward with lattice computations.
[2025-10-06T16:23:20] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -128,2 +128,3 @@
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
[2025-10-06T16:23:20] apply_patch(auto_approved=true) exited 0 in 31ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:23:20] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T16:23:20] tokens used: 132,135
[2025-10-06T16:23:20] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:23:25] thinking

**Updating fix_plan Next Actions for H5e**
[2025-10-06T16:23:38] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,6 +457,7 @@
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
[2025-10-06T16:23:39] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T16:23:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..efee4dbf02e073d9f0ab8ee83970be7b929b4889
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T16:23:39] tokens used: 133,461
[2025-10-06T16:23:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..efee4dbf02e073d9f0ab8ee83970be7b929b4889
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:23:42] thinking

**Verifying list formatting consistency**
[2025-10-06T16:23:45] exec bash -lc "sed -n '448,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:23:45] bash -lc "sed -n '448,520p' docs/fix_plan.md" succeeded in 863ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A-H complete; polarization Phase I pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
  1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
  2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
[2025-10-06T16:23:45] tokens used: 134,298
[2025-10-06T16:23:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..efee4dbf02e073d9f0ab8ee83970be7b929b4889
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:23:53] thinking

**Updating outdated next actions**
[2025-10-06T16:23:59] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -509,4 +509,4 @@
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
[2025-10-06T16:23:59] apply_patch(auto_approved=true) exited 0 in 29ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T16:23:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T16:23:59] tokens used: 137,949
[2025-10-06T16:23:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:24:09] thinking

**Evaluating plan updates and preparing input.md**

I'm checking if the vectorization plan in `plans/active/vectorization.md` needs any clarifications or additions, especially around the new RBC prep steps, but it seems solid with only possible minor notes. Since no major updates are necessary, I'm focusing on the CLI issue `CLI-FLAGS-003` for this phase and gathering details like phase, focus, and branch to draft `input.md`. I'll verify the current git branch to confirm before finalizing.
[2025-10-06T16:24:13] exec bash -lc 'git branch --show-current' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:24:14] bash -lc 'git branch --show-current' succeeded in 873ms:
feature/spec-based-2
[2025-10-06T16:24:14] tokens used: 138,884
[2025-10-06T16:24:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:24:23] thinking

**Preparing detailed fix plan and test commands**
[2025-10-06T16:24:24] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '120,200p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:24:25] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '120,200p'" succeeded in 879ms:
   120	Prereqs: Phase H4 artifacts available; C precedence proof in `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`.
   121	Exit Criteria: Detector traces with custom vectors show `pix0_vector`, `Fbeam`, and `Sbeam` matching C within 5e-5 m, and fractional h/k/l plus `F_latt_a/b/c` align within 1e-3 relative difference before resuming normalization work.
   122	
   123	| ID | Task Description | State | How/Why & Guidance |
   124	| --- | --- | --- | --- |
   125	| H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
   126	| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
   127	| H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
   128	| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
   129	| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
   130	
   131	### Phase I — Polarization Alignment (follow-up)
   132	Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
   133	Prereqs: Phases F–H complete; traces show `F_latt` parity.
   134	Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
   135	
   136	| ID | Task Description | State | How/Why & Guidance |
   137	| --- | --- | --- | --- |
   138	| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
   139	| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
[2025-10-06T16:24:25] tokens used: 139,485
[2025-10-06T16:24:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:24:27] thinking

**Preparing to extract code lines**
[2025-10-06T16:24:29] exec bash -lc "nl -ba src/nanobrag_torch/models/detector.py | sed -n '500,600p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:24:30] bash -lc "nl -ba src/nanobrag_torch/models/detector.py | sed -n '500,600p'" succeeded in 692ms:
   500	            # Therefore, the simple formula Fbeam = beam_center_f * pixel_size is correct!
   501	
   502	            # Direct mapping: no axis swap needed
   503	            # CRITICAL: For MOSFLM, apply +0.5 pixel offset to convert from user-provided beam_center
   504	            # (Xbeam/Ybeam) to internal Fbeam/Sbeam. This offset is part of the MOSFLM convention.
   505	            if self.config.detector_convention == DetectorConvention.MOSFLM:
   506	                # Add +0.5 pixel offset for MOSFLM convention
   507	                Fbeam = (self.beam_center_f + 0.5) * self.pixel_size
   508	                Sbeam = (self.beam_center_s + 0.5) * self.pixel_size
   509	            else:
   510	                # Other conventions: use beam centers as-is
   511	                Fbeam = self.beam_center_f * self.pixel_size
   512	                Sbeam = self.beam_center_s * self.pixel_size
   513	
   514	            # Reuse beam_vector from r-factor calculation above
   515	            # This ensures CUSTOM convention overrides (e.g., -beam_vector) are honored
   516	            # beam_vector is already set via self.beam_vector property
   517	
   518	            # CLI-FLAGS-003 Phase H5b: Handle pix0_override for BEAM pivot
   519	            # PRECEDENCE RULE (Phase H5a evidence, 2025-10-22):
[2025-10-06T16:24:30] tokens used: 142,109
[2025-10-06T16:24:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:24:33] thinking

**Referencing beam center assignment code**
[2025-10-06T16:24:36] exec bash -lc "nl -ba src/nanobrag_torch/__main__.py | sed -n '900,940p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:24:37] bash -lc "nl -ba src/nanobrag_torch/__main__.py | sed -n '900,940p'" succeeded in 706ms:
   900	        #         and ignoring X/Y, falling back to detector center (detsize_f/2, detsize_s/2)
   901	        #
   902	        # PyTorch must replicate this: For XDS/DIALS conventions, ignore Xbeam/Ybeam and use detector center.
   903	        convention = detector_config.detector_convention
   904	        pixel_size_mm = detector_config.pixel_size_mm
   905	
   906	        if 'beam_center_x_mm' in config and 'beam_center_y_mm' in config:
   907	            Xbeam_mm = config['beam_center_x_mm']
   908	            Ybeam_mm = config['beam_center_y_mm']
   909	
   910	            # Check if convention forces SAMPLE pivot (XDS/DIALS)
   911	            # For these conventions, Xbeam/Ybeam are ignored; use detector center instead
   912	            if convention in [DetectorConvention.XDS, DetectorConvention.DIALS]:
   913	                # XDS/DIALS: Convention forces SAMPLE pivot; ignore Xbeam/Ybeam
   914	                # Use detector center: Fclose = detsize_f/2, Sclose = detsize_s/2 (C line 1178)
   915	                # Leave beam_center_f and beam_center_s at their defaults (detector center)
   916	                # NOTE: DetectorConfig defaults are already set to detector center
   917	                pass
   918	            elif convention in [DetectorConvention.MOSFLM, DetectorConvention.DENZO]:
   919	                # MOSFLM/DENZO: BEAM pivot with axis swap (Fbeam ← Ybeam, Sbeam ← Xbeam)
[2025-10-06T16:24:37] tokens used: 144,338
[2025-10-06T16:24:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:24:40] thinking

**Preparing to extract fix_plan lines**
[2025-10-06T16:24:41] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:24:42] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" succeeded in 707ms:
   440	- Immediate Next Actions (2025-10-15):
   441	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   442	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   443	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   444	- Attempts History: None — new item.
   445	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   446	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   447	
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A-H complete; polarization Phase I pending)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
   458	- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   459	  1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
[2025-10-06T16:24:42] tokens used: 145,292
[2025-10-06T16:24:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:24:58] thinking

**Preparing detailed input.md content**
[2025-10-06T16:25:35] exec bash -lc "cat <<'EOF' > input.md
Summary: Restore pix0 parity by fixing beam-center unit mapping before resuming normalization work.
Phase: Implementation
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_flags.py::TestCLIPix0Override
Artifacts: reports/2025-10-cli-flags/phase_h5/unit_fix/
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override
If Blocked: Capture pre/post traces with the harness and log findings under reports/2025-10-cli-flags/phase_h5/unit_fix/attempts.md before escalating in Attempts History.
Priorities & Rationale:
- docs/fix_plan.md:448-462 calls for Phase H5e unit correction before any Phase K work resumes.
- plans/active/cli-noise-pix0/plan.md:123-129 spells out H5e deliverables (mm→m conversion, new traces, Attempt #33 log).
- src/nanobrag_torch/models/detector.py:500-512 still treats mm beam centers as pixels, producing the 1.1 mm ΔF in reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md.
- src/nanobrag_torch/__main__.py:906-931 confirms CLI stores Xbeam/Ybeam in millimetres; Detector must convert before constructing pix0.
- specs/spec-a-cli.md:1-120 reinforces that CLI geometry inputs are expressed in mm, so parity depends on consistent unit handling.
How-To Map:
- Implement mm→m conversion inside the BEAM pivot branch of Detector._configure_geometry; retain MOSFLM +0.5 pixel logic but divide X/Y beam centers by 1000.0 before multiplying by detector vectors.
- Re-run the trace harness: "'`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/unit_fix/trace_py_post.log` and diff against `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log`.
- Update `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with before/after deltas and stash Attempt #33 metrics in docs/fix_plan.md under CLI-FLAGS-003.
- Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override` and attach the log to reports/2025-10-cli-flags/phase_h5/unit_fix/pytest.log.
Pitfalls To Avoid:
- Do not re-enable pix0 overrides for custom vectors; retain the H5b guard exactly.
- Avoid mixing mm and m in the same tensor—perform conversions once and stay device/dtype neutral.
- Keep beam center tensors differentiable (no `.item()` detours) when updating values.
- Do not touch Protected Assets listed in docs/index.md; limit edits to targeted code/docs.
- Skip parity attempts until trace deltas show |Δpix0| < 5e-5 m; otherwise stay in H5.
- Preserve vectorization and batching; no per-pixel loops when adjusting Detector code.
- Refrain from running nb-compare yet; this loop stops at targeted pytest + traces.
Pointers:
- docs/fix_plan.md:448-462 — refreshed Next Actions for CLI-FLAGS-003.
- plans/active/cli-noise-pix0/plan.md:123-160 — Phase H5e context and Phase K preview.
- src/nanobrag_torch/models/detector.py:500-580 — BEAM pivot pix0 construction requiring unit fix.
- src/nanobrag_torch/__main__.py:906-931 — CLI beam-center assignments in mm.
- reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md — current Δpix0 evidence to beat.
Next Up (optional): Phase K1 — swap SQUARE lattice factor to sincg(π·h, Na) once pix0 parity holds.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:25:36] bash -lc "cat <<'EOF' > input.md
Summary: Restore pix0 parity by fixing beam-center unit mapping before resuming normalization work.
Phase: Implementation
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_flags.py::TestCLIPix0Override
Artifacts: reports/2025-10-cli-flags/phase_h5/unit_fix/
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override
If Blocked: Capture pre/post traces with the harness and log findings under reports/2025-10-cli-flags/phase_h5/unit_fix/attempts.md before escalating in Attempts History.
Priorities & Rationale:
- docs/fix_plan.md:448-462 calls for Phase H5e unit correction before any Phase K work resumes.
- plans/active/cli-noise-pix0/plan.md:123-129 spells out H5e deliverables (mm→m conversion, new traces, Attempt #33 log).
- src/nanobrag_torch/models/detector.py:500-512 still treats mm beam centers as pixels, producing the 1.1 mm ΔF in reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md.
- src/nanobrag_torch/__main__.py:906-931 confirms CLI stores Xbeam/Ybeam in millimetres; Detector must convert before constructing pix0.
- specs/spec-a-cli.md:1-120 reinforces that CLI geometry inputs are expressed in mm, so parity depends on consistent unit handling.
How-To Map:
- Implement mm→m conversion inside the BEAM pivot branch of Detector._configure_geometry; retain MOSFLM +0.5 pixel logic but divide X/Y beam centers by 1000.0 before multiplying by detector vectors.
- Re-run the trace harness: "'`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/unit_fix/trace_py_post.log` and diff against `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log`.
- Update `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with before/after deltas and stash Attempt #33 metrics in docs/fix_plan.md under CLI-FLAGS-003.
- Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override` and attach the log to reports/2025-10-cli-flags/phase_h5/unit_fix/pytest.log.
Pitfalls To Avoid:
- Do not re-enable pix0 overrides for custom vectors; retain the H5b guard exactly.
- Avoid mixing mm and m in the same tensor—perform conversions once and stay device/dtype neutral.
- Keep beam center tensors differentiable (no `.item()` detours) when updating values.
- Do not touch Protected Assets listed in docs/index.md; limit edits to targeted code/docs.
- Skip parity attempts until trace deltas show |Δpix0| < 5e-5 m; otherwise stay in H5.
- Preserve vectorization and batching; no per-pixel loops when adjusting Detector code.
- Refrain from running nb-compare yet; this loop stops at targeted pytest + traces.
Pointers:
- docs/fix_plan.md:448-462 — refreshed Next Actions for CLI-FLAGS-003.
- plans/active/cli-noise-pix0/plan.md:123-160 — Phase H5e context and Phase K preview.
- src/nanobrag_torch/models/detector.py:500-580 — BEAM pivot pix0 construction requiring unit fix.
- src/nanobrag_torch/__main__.py:906-931 — CLI beam-center assignments in mm.
- reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md — current Δpix0 evidence to beat.
Next Up (optional): Phase K1 — swap SQUARE lattice factor to sincg(π·h, Na) once pix0 parity holds.
EOF
' succeeded in 934ms:

[2025-10-06T16:25:36] tokens used: 148,755
[2025-10-06T16:25:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:25:45] thinking

**Planning to expand file length**

I’m noticing the file is quite short—around 30 lines—while the instructions suggest aiming for about 100 to 200 lines. It seems like I need to elaborate each section with more detailed steps, bullet points, and examples to grow the content meaningfully. I’m planning to rewrite by expanding the How-To Map, adding more concrete commands, and including additional pitfalls and context for clarity.
[2025-10-06T16:26:08] exec bash -lc "cat <<'EOF' > input.md
Summary: Restore pix0 parity by correcting beam-center unit handling before normalization work resumes.
Phase: Implementation
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_flags.py::TestCLIPix0Override
Artifacts: reports/2025-10-cli-flags/phase_h5/unit_fix/
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override
If Blocked: Capture pre/post traces with the harness, summarise deltas in reports/2025-10-cli-flags/phase_h5/unit_fix/attempts.md, then log the stall in docs/fix_plan.md Attempts History before escalating.
Priorities & Rationale:
- docs/fix_plan.md:448-462 mandates finishing Phase H5 (esp. H5e) prior to touching normalization tasks.
- plans/active/cli-noise-pix0/plan.md:123-129 enumerates H5e deliverables (unit fix, trace evidence, Attempt #33 log).
- src/nanobrag_torch/models/detector.py:500-512 currently multiplies mm beam centers by pixel size (m), recreating the 1.1 mm ΔF measured in reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md.
- src/nanobrag_torch/__main__.py:906-931 shows Xbeam/Ybeam stay in mm, so Detector must convert before geometry math.
- specs/spec-a-cli.md:1-120 emphasises CLI geometry inputs are mm-based, aligning this fix with spec compliance.
How-To Map:
- Step 1 — Pre-flight reference: open reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md to note the baseline ΔF, ΔS, ΔO that must fall below 5e-5 m.
- Step 2 — Implementation: within src/nanobrag_torch/models/detector.py (BEAM pivot branch) replace the pixel-scale multiplication with explicit mm→m conversion: convert beam_center_f/s via "'`/ 1000.0` (or `torch.tensor(..., dtype=...) / 1000`) before applying MOSFLM offsets; ensure tensors stay on detector device/dtype.
- Step 3 — Consistency audit: update any comments/docstrings around lines 500-512 to explain the unit conversion and cite nanoBragg.c:1184-1239 so future audits understand the mapping.
- Step 4 — Trace capture (post-fix):
  • `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/unit_fix/trace_py_post.log`
  • Optionally rerun the pre-fix trace (rename to trace_py_pre.log) if you need a local diff; do not overwrite existing archives.
  • Use `python reports/2025-10-cli-flags/phase_h5/tools/diff_trace.py --a reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log --b reports/2025-10-cli-flags/phase_h5/unit_fix/trace_py_post.log --out reports/2025-10-cli-flags/phase_h5/unit_fix/trace_diff.md` (create tool if missing, or diff manually and paste results into trace_diff.md).
- Step 5 — Metric summary: append a new section to reports/2025-10-cli-flags/phase_h5/parity_summary.md capturing before/after pix0 deltas, Fbeam/Sbeam values, and confirming <5e-5 m parity; stash any supplemental calculations in unit_fix/analysis.ipynb or .md.
- Step 6 — Regression test: `env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override | tee reports/2025-10-cli-flags/phase_h5/unit_fix/pytest.log`.
- Step 7 — Attempts log: record Attempt #33 in docs/fix_plan.md under CLI-FLAGS-003 with metrics (ΔF, ΔS, ΔO, test results, trace paths) and link to the new artifacts.
- Step 8 — Plan bookkeeping: flip H5e to [D] in plans/active/cli-noise-pix0/plan.md, confirm H5c tolerance satisfied, and note readiness for Phase K1 in reports/2025-10-cli-flags/phase_h5/unit_fix/README.md.
Pitfalls To Avoid:
- Do not re-enable pix0 overrides when custom vectors are present—the H5b guard remains mandatory.
- Avoid converting inside tight loops; perform mm→m once per configuration to keep vectorization intact.
- Keep tensors differentiable—no `.item()`, `.detach()`, or CPU-only literals in the geometry path.
- Respect device neutrality; use `.to(device=self.device, dtype=self.dtype)` when materialising new tensors.
- Maintain Protected Assets (docs/index.md); do not relocate/delete anything referenced there.
- Do not run nb-compare or full parity suites until pix0 and F_latt both meet tolerances.
- Skip fire-and-forget pushes; ensure Attempt entry and artifact paths exist before committing.
- Remember KMP_DUPLICATE_LIB_OK=TRUE for every python/pytest invocation touching torch.
- Keep comments succinct—update existing docstrings rather than adding narrative in code blocks.
- Check trace harness commits into reports/ only; never place new tooling under random folders.
Pointers:
- docs/fix_plan.md:448-462 — refreshed Next Actions referencing H5e unit correction.
- plans/active/cli-noise-pix0/plan.md:123-160 — Phase H5e task plus upcoming Phase K outline.
- src/nanobrag_torch/models/detector.py:500-580 — BEAM pivot pix0 assembly awaiting unit fix.
- src/nanobrag_torch/__main__.py:906-931 — shows beam centers stored in mm, validating conversion requirement.
- reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md — baseline trace proving current ΔF≈-1.136e-03 m.
- specs/spec-a-cli.md:1-200 — canonical CLI units and precedence reminders.
- docs/architecture/detector.md (Section 5) — reinforcement of meter internal representation.
- docs/debugging/debugging.md:1-160 — parallel trace SOP to follow while comparing traces.
Next Up (optional): Phase K1 — swap the SQUARE lattice factor to sincg(π·h, Na) and capture updated scaling traces once H5e closes.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:09] bash -lc "cat <<'EOF' > input.md
Summary: Restore pix0 parity by correcting beam-center unit handling before normalization work resumes.
Phase: Implementation
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_flags.py::TestCLIPix0Override
Artifacts: reports/2025-10-cli-flags/phase_h5/unit_fix/
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override
If Blocked: Capture pre/post traces with the harness, summarise deltas in reports/2025-10-cli-flags/phase_h5/unit_fix/attempts.md, then log the stall in docs/fix_plan.md Attempts History before escalating.
Priorities & Rationale:
- docs/fix_plan.md:448-462 mandates finishing Phase H5 (esp. H5e) prior to touching normalization tasks.
- plans/active/cli-noise-pix0/plan.md:123-129 enumerates H5e deliverables (unit fix, trace evidence, Attempt #33 log).
- src/nanobrag_torch/models/detector.py:500-512 currently multiplies mm beam centers by pixel size (m), recreating the 1.1 mm ΔF measured in reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md.
- src/nanobrag_torch/__main__.py:906-931 shows Xbeam/Ybeam stay in mm, so Detector must convert before geometry math.
- specs/spec-a-cli.md:1-120 emphasises CLI geometry inputs are mm-based, aligning this fix with spec compliance.
How-To Map:
- Step 1 — Pre-flight reference: open reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md to note the baseline ΔF, ΔS, ΔO that must fall below 5e-5 m.
- Step 2 — Implementation: within src/nanobrag_torch/models/detector.py (BEAM pivot branch) replace the pixel-scale multiplication with explicit mm→m conversion: convert beam_center_f/s via "'`/ 1000.0` (or `torch.tensor(..., dtype=...) / 1000`) before applying MOSFLM offsets; ensure tensors stay on detector device/dtype.
- Step 3 — Consistency audit: update any comments/docstrings around lines 500-512 to explain the unit conversion and cite nanoBragg.c:1184-1239 so future audits understand the mapping.
- Step 4 — Trace capture (post-fix):
  • `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py --out reports/2025-10-cli-flags/phase_h5/unit_fix/trace_py_post.log`
  • Optionally rerun the pre-fix trace (rename to trace_py_pre.log) if you need a local diff; do not overwrite existing archives.
  • Use `python reports/2025-10-cli-flags/phase_h5/tools/diff_trace.py --a reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/trace_py.log --b reports/2025-10-cli-flags/phase_h5/unit_fix/trace_py_post.log --out reports/2025-10-cli-flags/phase_h5/unit_fix/trace_diff.md` (create tool if missing, or diff manually and paste results into trace_diff.md).
- Step 5 — Metric summary: append a new section to reports/2025-10-cli-flags/phase_h5/parity_summary.md capturing before/after pix0 deltas, Fbeam/Sbeam values, and confirming <5e-5 m parity; stash any supplemental calculations in unit_fix/analysis.ipynb or .md.
- Step 6 — Regression test: `env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_cli_flags.py::TestCLIPix0Override | tee reports/2025-10-cli-flags/phase_h5/unit_fix/pytest.log`.
- Step 7 — Attempts log: record Attempt #33 in docs/fix_plan.md under CLI-FLAGS-003 with metrics (ΔF, ΔS, ΔO, test results, trace paths) and link to the new artifacts.
- Step 8 — Plan bookkeeping: flip H5e to [D] in plans/active/cli-noise-pix0/plan.md, confirm H5c tolerance satisfied, and note readiness for Phase K1 in reports/2025-10-cli-flags/phase_h5/unit_fix/README.md.
Pitfalls To Avoid:
- Do not re-enable pix0 overrides when custom vectors are present—the H5b guard remains mandatory.
- Avoid converting inside tight loops; perform mm→m once per configuration to keep vectorization intact.
- Keep tensors differentiable—no `.item()`, `.detach()`, or CPU-only literals in the geometry path.
- Respect device neutrality; use `.to(device=self.device, dtype=self.dtype)` when materialising new tensors.
- Maintain Protected Assets (docs/index.md); do not relocate/delete anything referenced there.
- Do not run nb-compare or full parity suites until pix0 and F_latt both meet tolerances.
- Skip fire-and-forget pushes; ensure Attempt entry and artifact paths exist before committing.
- Remember KMP_DUPLICATE_LIB_OK=TRUE for every python/pytest invocation touching torch.
- Keep comments succinct—update existing docstrings rather than adding narrative in code blocks.
- Check trace harness commits into reports/ only; never place new tooling under random folders.
Pointers:
- docs/fix_plan.md:448-462 — refreshed Next Actions referencing H5e unit correction.
- plans/active/cli-noise-pix0/plan.md:123-160 — Phase H5e task plus upcoming Phase K outline.
- src/nanobrag_torch/models/detector.py:500-580 — BEAM pivot pix0 assembly awaiting unit fix.
- src/nanobrag_torch/__main__.py:906-931 — shows beam centers stored in mm, validating conversion requirement.
- reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md — baseline trace proving current ΔF≈-1.136e-03 m.
- specs/spec-a-cli.md:1-200 — canonical CLI units and precedence reminders.
- docs/architecture/detector.md (Section 5) — reinforcement of meter internal representation.
- docs/debugging/debugging.md:1-160 — parallel trace SOP to follow while comparing traces.
Next Up (optional): Phase K1 — swap the SQUARE lattice factor to sincg(π·h, Na) and capture updated scaling traces once H5e closes.
EOF
' succeeded in 908ms:

[2025-10-06T16:26:09] tokens used: 175,526
[2025-10-06T16:26:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:20] thinking

**Preparing to update galph_memory.md**
[2025-10-06T16:26:24] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-24 (galph loop — Phase H5 unit fix directive)
- Reconfirmed pix0 fast-axis delta (≈1.1 mm) persists post-H5b revert; traced root cause to Detector BEAM pivot still treating beam_center_f/s as pixel counts (mm×m bug).
- Added Phase H5e row to "'`plans/active/cli-noise-pix0/plan.md` directing mm→m conversion with new trace artifacts; refreshed docs/fix_plan.md Next Actions to prioritise H5a/H5c/H5e sequence before Phase K.
- Issued `input.md` (Implementation phase) instructing Ralph to implement unit fix, capture trace evidence under `reports/2025-10-cli-flags/phase_h5/unit_fix/`, run `tests/test_cli_flags.py::TestCLIPix0Override`, and log Attempt #33.
- No code changes made this loop; planning/docs only. Next follow-up: verify H5e Attempt captures <5e-5 m pix0 deltas, then greenlight Phase K1 (sincg update).
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:25] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-24 (galph loop — Phase H5 unit fix directive)
- Reconfirmed pix0 fast-axis delta (≈1.1 mm) persists post-H5b revert; traced root cause to Detector BEAM pivot still treating beam_center_f/s as pixel counts (mm×m bug).
- Added Phase H5e row to "'`plans/active/cli-noise-pix0/plan.md` directing mm→m conversion with new trace artifacts; refreshed docs/fix_plan.md Next Actions to prioritise H5a/H5c/H5e sequence before Phase K.
- Issued `input.md` (Implementation phase) instructing Ralph to implement unit fix, capture trace evidence under `reports/2025-10-cli-flags/phase_h5/unit_fix/`, run `tests/test_cli_flags.py::TestCLIPix0Override`, and log Attempt #33.
- No code changes made this loop; planning/docs only. Next follow-up: verify H5e Attempt captures <5e-5 m pix0 deltas, then greenlight Phase K1 (sincg update).
EOF
' succeeded in 886ms:

[2025-10-06T16:26:25] tokens used: 178,898
[2025-10-06T16:26:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:27] thinking

**Preparing for git operations**
[2025-10-06T16:26:28] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:29] bash -lc 'git status --short' succeeded in 723ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:26:29] tokens used: 179,315
[2025-10-06T16:26:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:32] thinking

**Reviewing code differences**
[2025-10-06T16:26:34] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:34] bash -lc 'git diff' succeeded in 709ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507..147afdb 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
[2025-10-06T16:26:34] tokens used: 179,486
[2025-10-06T16:26:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:37] thinking

**Staging files after diff review**
[2025-10-06T16:26:38] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:39] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 748ms:

[2025-10-06T16:26:39] tokens used: 182,628
[2025-10-06T16:26:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:41] thinking

**Verifying staged changes**
[2025-10-06T16:26:42] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:42] bash -lc 'git status --short' succeeded in 727ms:
M  docs/fix_plan.md
M  galph_memory.md
M  input.md
M  plans/active/cli-noise-pix0/plan.md
[2025-10-06T16:26:42] tokens used: 182,804
[2025-10-06T16:26:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:47] thinking

**Confirming staged changes for commit**
[2025-10-06T16:26:48] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 focus - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:48] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 focus - tests: not run"' succeeded in 755ms:
[feature/spec-based-2 8ee098b] SUPERVISOR: CLI-FLAGS-003 focus - tests: not run
 4 files changed, 56 insertions(+), 104 deletions(-)
[2025-10-06T16:26:48] tokens used: 183,055
[2025-10-06T16:26:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:26:51] thinking

**Pushing changes to remote**
[2025-10-06T16:26:52] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T16:26:54] bash -lc 'git push' succeeded in 2.26s:
To github.com:hoidn/nanoBragg.git
   141767a..8ee098b  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T16:26:54] tokens used: 183,360
[2025-10-06T16:26:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T16:27:09] thinking

**Summarizing final status and plan**

I'll organize a clear final update including key hypotheses with evidence, commit reviews, plan modifications, and next steps—all cited with precise file references—to ensure the user has a concise, actionable summary with bullet points under logical headers.
[2025-10-06T16:27:10] codex

**Status**
- Updated `plans/active/cli-noise-pix0/plan.md:123-162` with new H5e task (beam-center unit fix) and tightened Phase K guidance; refreshed `docs/fix_plan.md:448-507` to prioritise H5a/H5c/H5e before normalization; logged context in `galph_memory.md` and issued `input.md` (Implementation phase) directing the unit correction workflow.
- No code/tests executed this loop; supervisor changes committed as `SUPERVISOR: CLI-FLAGS-003 focus - tests: not run`.

**Findings**
- Top hypothesis (confidence: high): pix0 fast-axis error stems from treating mm beam centers as pixel counts in `src/nanobrag_torch/models/detector.py:500-512`, producing the 1.1 mm ΔF captured in `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/diff_notes.md`. Next confirming step: convert `beam_center_f/s` to meters before multiplying by detector vectors, then rerun the Phase H trace harness to verify |Δpix0|<5e-5 m.
- Secondary hypothesis (confidence: high): once geometry parity is restored, the SQUARE lattice branch still uses `(h-h0)` in `src/nanobrag_torch/simulator.py:219-221`; Phase K1 must replace this with `sincg(torch.pi * h, Na)` (per `golden_suite_generator/nanoBragg.c:3048-3074`) to eliminate the 3.6e-7 `I_before_scaling` ratio logged in `reports/2025-10-cli-flags/phase_j/scaling_chain.md`.

**Ralph Review**
- Recent evidence-only commit `ed1a905` diligently captured PyTorch traces but confirmed the residual pix0 gap; reco: proceed with the unit fix rather than further logging.
- Revert commit `831b670` correctly reinstated the custom-vector guard and passed targeted tests; no regressions observed—today’s work builds on that baseline.

**Next Steps**
- Implement H5e unit conversion (Do Now command in `input.md`), archive before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/`, and log Attempt #33 once `tests/test_cli_flags.py::TestCLIPix0Override` passes.
- After geometry parity holds, move directly into Phase K1 (sincg swap) using the updated plan guidance.
[2025-10-06T16:27:19] tokens used: 184,725
[2025-10-06T16:27:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eb1a507ad464746497169da913e73fda4f7c09dd..147afdbd9c6733af023b507d9007438100bcba36
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions (2025-10-22): Execute `plans/active/cli-noise-pix0/plan.md` Phase H5 before resuming normalization work:
+- Next Actions (2025-10-24 refresh): Follow `plans/active/cli-noise-pix0/plan.md` Phase H5 items before resuming normalization work:
   1. Refresh C precedence evidence (H5a): rerun the supervisor command with and without `-pix0_vector_mm`, stash logs under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-21/`, and update `phase_h5/c_precedence.md` to document that C recomputes `Fbeam/Sbeam` when the override is supplied alongside custom vectors.
   2. Capture PyTorch traces with the reinstated override (H5c): extend/execute the Phase H trace harness so it logs `pix0_vector`, derived `Fbeam/Sbeam`, fractional h/k/l, and `F_latt` components. Archive outputs to `reports/2025-10-cli-flags/phase_h5/py_traces/` and append the C vs PyTorch deltas to `phase_h5/parity_summary.md`.
-  3. Once geometry parity is verified, log the follow-up attempt in this entry (H5d) and then transition to Phase K normalization tasks.
+  3. Implement the unit correction for beam-center mapping (H5e): confirm `DetectorConfig.beam_center_*` remains in mm, update `Detector._configure_geometry` to convert to meters before computing F/S beams, and capture before/after traces under `reports/2025-10-cli-flags/phase_h5/unit_fix/` with Attempt #33 logging Δpix0 < 5e-5 m.
+  4. Once geometry parity is verified (H5d), transition to Phase K normalization tasks.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -506,8 +507,8 @@
       - **Phase I Tasks:** I1 (audit) ✅, I2 (implement) ✅; I3 (final parity sweep) remains pending
     Next Actions:
       1. Complete Phase H5c by regenerating PyTorch traces (post-revert) and updating `reports/2025-10-cli-flags/phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3).
-      2. Tackle Phase K1 (`plans/active/cli-noise-pix0/plan.md`) to swap the SQUARE lattice factor to sincg(π·h, Na) form, capture trace evidence under `phase_k/f_latt_fix/`, and refresh `phase_j/scaling_chain.md`.
-      3. Add the targeted regression noted in Phase K3 (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) before reattempting the supervisor command parity sweep.
+      2. Implement the H5e unit correction so BEAM-pivot F/S values convert mm→m before pix0 assembly; document the change under `phase_h5/unit_fix/` with Attempt #33.
+      3. After geometry parity is restored (H5d), proceed to Phase K1 (sincg(π·h, Na) swap) and capture updated scaling traces, then add the regression noted in Phase K3 before attempting the supervisor command parity sweep.
   * [2025-10-06] Attempt #29 (ralph loop) — Result: Phase H5a EVIDENCE-ONLY COMPLETE. **C-code pix0 override behavior with custom vectors documented.**
     Metrics: Evidence-only loop. Two C runs executed: WITH override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m) and WITHOUT override (pix0=-0.216476 m, Fbeam=0.217889 m, Sbeam=0.215043 m). Identical geometry values confirm override is ignored when custom vectors are present.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d92b693cd4120dcd2e65b73e1de9ddb88d43bc1f..810c7d5d61a645512a22c656d96f69b48739649a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -126,6 +126,7 @@
 | H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
 | H5c | Capture updated PyTorch traces & compare | [ ] | After the revert, rerun the Phase H trace harness so `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/` contains TRACE_PY logs for pix0, F/S beams, h/k/l, and `F_latt`. Update `phase_h5/parity_summary.md` with C vs PyTorch deltas; require `|Δpix0| < 5e-5 m` and `F_latt` ratio within 1e-3 before Phase K resumes. |
 | H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
+| H5e | Correct beam-center→F/S mapping units | [ ] | Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
@@ -156,9 +157,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable, and refresh the docstring to match spec. Archive trace evidence under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`. |
+| K1 | Align lattice factor math with C (SQUARE case) | [ ] | Update `Simulator._compute_physics_for_position` so the SQUARE branch calls `sincg(torch.pi * h, Na)` (and analogues for k/l) instead of `(h - h0)` per `golden_suite_generator/nanoBragg.c:3048-3074` and `specs/spec-a-core.md §4.3`. Preserve Na/Nb/Nc > 1 guards, keep tensors broadcastable/device-neutral, and refresh the docstring with the C snippet citation. After patching, rerun the Phase J pixel-trace harness and stash fresh logs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/` for before/after diffing. |
 | K2 | Recompute scaling chain & extend to other shapes | [ ] | After SQUARE fix, rerun the Phase J trace harness to update `reports/2025-10-cli-flags/phase_j/scaling_chain.md`. Verify ROUND/GAUSS/TOPHAT branches still align with C using targeted configs; note any polarization deviations (>1e-3) and loop back to Phase I if necessary. |
-| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` to describe the corrected lattice-factor pipeline and cite spec sections. |
+| K3 | Regression tests & documentation | [ ] | Add a targeted pytest node (e.g., `tests/test_cli_scaling.py::test_f_latt_square_matches_c`) asserting `I_before_scaling` and `F_latt` ratios within 1e-3 when run via `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling.py -k "f_latt_square"`. Update `docs/architecture/pytorch_design.md` and `phase_k/notes.md` with the corrected lattice-factor pipeline referencing `specs/spec-a-core.md §4.3` and the C snippet.
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   8ee098b..b5b9e4b  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=38...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=38
Updating b5b9e4b..1d95e53
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   b5b9e4b..1d95e53  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=38
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 1d95e53..315a54c
Fast-forward
 docs/fix_plan.md                      | 16 ++++++++++----
 plans/active/cli-noise-pix0/plan.md   |  2 +-
 src/nanobrag_torch/models/detector.py | 39 +++++++++++++++++++----------------
 3 files changed, 34 insertions(+), 23 deletions(-)
From github.com:hoidn/nanoBragg
   1d95e53..315a54c  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 315a54c..a131eab
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   315a54c..a131eab  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=39
Ralph completed iteration 38; proceeding to 39
