Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=32
To github.com:hoidn/nanoBragg.git
   8bfbdf8..4d3ee81  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T10:10:16] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T10:10:16] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: When the Phase is Evidence, you must not execute tests; any pytest command included here is provided for Ralph’s subsequent loop.
<Do Now guidelines>
Phase Gate (Evidence): If the active plan phase is Evidence, do not run pytest at all (including collection). Limit evidence gathering to non-test probes and command‑line tooling (e.g., scripts/validation/*, minimal parity CLIs). Do not include runnable tests in this loop.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T10:10:20] thinking

**Preparing repository update plan**
[2025-10-06T10:10:20] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:23] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.07s:
Already up to date.
[2025-10-06T10:10:23] tokens used: 2,649

[2025-10-06T10:10:25] thinking

**Preparing to read latest memory entry**
[2025-10-06T10:10:25] exec bash -lc 'tail -n 200 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:26] bash -lc 'tail -n 200 galph_memory.md' succeeded in 665ms:
## 2025-10-06 (galph loop — Phase C2 review)
- Sync clean; parity artifacts from commit ca3f8df confirmed that C max_I=4.46e2 vs PyTorch max_I≈1.15e5 (≈2.58e2× gap) despite matching pix0 vectors. Logged intensity delta as new First Divergence for `[CLI-FLAGS-003]` in docs/fix_plan.md.
- Updated `plans/active/cli-noise-pix0/plan.md` Phase C table (C2 → [D]) and introduced Phase D3 task to diagnose scaling mismatch using existing logs. Fix-plan item now calls for documentation updates (C3/C4) plus D3 analysis before closure.
- Regenerated `input.md` (100 lines) directing Ralph to execute Phase D3 evidence loop: compute detailed stats comparing `c_img.bin` vs `torch_img.bin`, capture simulator normalization dumps, and summarize in `reports/2025-10-cli-flags/phase_d/intensity_gap.md` before any code changes.
- No new plans opened; existing CLI plan now governs intensity investigation. Next loop should produce D3 artifacts, update fix_plan Attempts, and only then proceed to doc updates (C3) and regression sweeps (D1).
## 2025-10-06 (galph loop — Phase E setup)
- `timeout 30 git pull --rebase` → Already up to date; worktree clean on entry.
- Reviewed Ralph's Phase D3 evidence confirming PyTorch geometry is off (zero correlation, 1.5k-pixel peak offset); documentation updates deferred until physics parity is restored.
- Updated `plans/active/cli-noise-pix0/plan.md` to mark Phases A/B/D3 done, refresh the gap summary, and add Phase E (trace tasks E1–E3) ahead of implementation work.
- Tweaked `docs/fix_plan.md` `[CLI-FLAGS-003]` status to note Phase D3 completion and emphasize the mandatory parallel trace before code edits.
- Regenerated `input.md` (100 lines) instructing Ralph to gather C and PyTorch traces for pixel (1039,685), diff them, and log findings under `reports/2025-10-cli-flags/phase_e/` plus a new Attempts entry.
- Observation: Ralph's `analyze_intensity.py` still ends with scaling hypotheses; revisit once trace pinpoints the true divergence.
- Next steps for Ralph: execute plan Phase E1–E2 trace capture, produce `trace_diff.txt`/`trace_comparison.md`, and hold off on fixes until divergence is documented.

## 2025-10-06 (galph loop — beam vector gap)
- Sync clean; consumed docs per SOP plus recent reports before analysis.
- Ran inline CLI harness (no artifact yet) showing `Detector.beam_vector` remains `[0.,0.,1.]` despite `-beam_vector 0.00051387949 0 -0.99999986`; C log uses the custom vector, explaining additional geometry drift beyond pix0 transform.
- Updated `plans/active/cli-noise-pix0/plan.md` Phase E with new task E0 targeting beam-vector parity evidence and noted the new gap in plan context.
- Extended `docs/fix_plan.md` `[CLI-FLAGS-003]` first-divergence summary + Attempt #6 documenting the missing beam-vector wiring and pointing Ralph at plan task E0 before implementation.
- Rewrote `input.md` (beam-vector snippet, evidence-only loop) so Ralph captures `reports/2025-10-cli-flags/phase_e/beam_vector_check.txt` and logs it in fix_plan before any code edits.
[2025-10-06T10:10:26] tokens used: 2,869

[2025-10-06T10:10:33] thinking

**Preparing to analyze documentation and repo status**
[2025-10-06T10:10:34] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:34] bash -lc 'git status --short' succeeded in 710ms:

[2025-10-06T10:10:34] tokens used: 6,017

[2025-10-06T10:10:37] thinking

**Reading documentation sections**
[2025-10-06T10:10:37] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:38] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 700ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T10:10:38] tokens used: 6,200

[2025-10-06T10:10:40] thinking

**Sampling start of spec-a.md**
[2025-10-06T10:10:40] exec bash -lc "sed -n '1,160p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:41] bash -lc "sed -n '1,160p' specs/spec-a.md" succeeded in 667ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T10:10:41] tokens used: 7,880

[2025-10-06T10:10:44] thinking

**Checking specification files**
[2025-10-06T10:10:44] exec bash -lc "sed -n '1,160p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:45] bash -lc "sed -n '1,160p' arch.md" succeeded in 683ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T10:10:45] tokens used: 8,324

[2025-10-06T10:10:47] thinking

**Reading PyTorch config mapping docs**
[2025-10-06T10:10:47] exec bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:48] bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" succeeded in 703ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T10:10:48] tokens used: 11,125

[2025-10-06T10:10:51] thinking

**Reviewing debugging guide start**
[2025-10-06T10:10:52] exec bash -lc "sed -n '1,160p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:53] bash -lc "sed -n '1,160p' docs/debugging/debugging.md" succeeded in 681ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T10:10:53] tokens used: 13,062

[2025-10-06T10:10:54] thinking

**Reviewing testing_strategy documentation**
[2025-10-06T10:10:55] exec bash -lc "sed -n '1,160p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:10:55] bash -lc "sed -n '1,160p' docs/development/testing_strategy.md" succeeded in 677ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T10:10:55] tokens used: 15,093

[2025-10-06T10:10:58] thinking

**Identifying CLI flags documentation location**
[2025-10-06T10:10:59] exec bash -lc "rg -n \"\\[CLI-FLAGS-003\\]\" docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:00] bash -lc "rg -n \"\\[CLI-FLAGS-003\\]\" docs/fix_plan.md" succeeded in 739ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T10:11:00] tokens used: 17,810

[2025-10-06T10:11:02] thinking

**Planning to read more content**
[2025-10-06T10:11:02] exec bash -lc "sed -n '430,540p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:03] bash -lc "sed -n '430,540p' docs/fix_plan.md" succeeded in 707ms:
            "-cell", "100", "100", "100", "90", "90", "90",
            "-default_F", "0",
            "-dtype", "float64"
        ])
        config = parse_and_validate_args(args)
        grid, _ = config['hkl_data']
        print(grid.dtype)  # BUG: prints torch.float32 today
    ```
    `PY`
- First Divergence (if known): `parse_and_validate_args` (src/nanobrag_torch/__main__.py:435) calls `read_hkl_file`/`try_load_hkl_or_fdump` without forwarding the parsed dtype, so HKL/Fdump data is always loaded as float32. When the CLI is run with `-dtype float64`, the simulator converts those float32 tensors to float64 later, permanently losing precision relative to the requested double-precision path and violating the DTYPE-DEFAULT-001 guarantee.
- Immediate Next Actions (2025-10-15):
  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
- Attempts History: None — new item.
- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.

## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
[2025-10-06T10:11:03] tokens used: 18,559

[2025-10-06T10:11:08] thinking

**Verifying truncated command output**
[2025-10-06T10:11:09] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:10] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 733ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |

### Phase B — CLI & Config Wiring
Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T10:11:10] tokens used: 20,331

[2025-10-06T10:11:12] thinking

**Planning further log inspection**
[2025-10-06T10:11:13] exec bash -lc "sed -n '200,400p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:13] bash -lc "sed -n '200,400p' plans/active/cli-noise-pix0/plan.md" succeeded in 670ms:

[2025-10-06T10:11:13] tokens used: 22,131

[2025-10-06T10:11:20] thinking

**Investigating file truncation**
[2025-10-06T10:11:20] exec bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:21] bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' succeeded in 705ms:
     119 plans/active/cli-noise-pix0/plan.md
[2025-10-06T10:11:21] tokens used: 22,645

[2025-10-06T10:11:24] thinking

**Verifying full file display**
[2025-10-06T10:11:25] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:26] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 666ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |

### Phase B — CLI & Config Wiring
Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T10:11:26] tokens used: 23,006

[2025-10-06T10:11:32] thinking

**Investigating truncated file output**
[2025-10-06T10:11:33] exec bash -lc "python - <<'PY'
with open('plans/active/cli-noise-pix0/plan.md') as f:
    for i,line in enumerate(f,1):
        print(f\"{i:03d}: {line.rstrip()}\" )
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:34] bash -lc "python - <<'PY'
with open('plans/active/cli-noise-pix0/plan.md') as f:
    for i,line in enumerate(f,1):
        print(f\"{i:03d}: {line.rstrip()}\" )
PY" succeeded in 661ms:
001: ## Context
002: - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
003: - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
004: - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
005: - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
006: - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
007: 
008: ### Phase A — Requirements & Trace Alignment
009: Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
010: Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
011: Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.
012: 
013: | ID | Task Description | State | How/Why & Guidance |
014: | --- | --- | --- | --- |
015: | A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
016: | A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
017: | A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |
018: 
019: ### Phase B — CLI & Config Wiring
020: Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T10:11:34] tokens used: 25,158

[2025-10-06T10:11:40] thinking

**Investigating unusual file truncation**
[2025-10-06T10:11:42] exec bash -lc "sed -n '37,60p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:42] bash -lc "sed -n '37,60p' plans/active/cli-noise-pix0/plan.md" succeeded in 676ms:
**Parity risk reminder:** C instrumentation shows `DETECTOR_PIX0_VECTOR` emitted in meters even when using `-pix0_vector_mm`. During Phase C2 parity run, capture both C and PyTorch pix0 traces to confirm we are not double-converting the override.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| C1 | Add CLI regression tests | [D] | ✅ 2025-10-16 (commit b6c6a61). `tests/test_cli_flags.py` covers meters/mm aliases, mutual exclusion, override persistence (CPU/CUDA), dtype preservation, and `-nonoise` suppression. |
| C2 | Golden parity smoke | [D] | ✅ 2025-10-05: Supervisor command executed for both binaries. C max_I=446.254 (img.bin), PyTorch max_I≈1.15e5 (torch_img.bin). Logs + float images archived under `reports/2025-10-cli-flags/phase_c/parity/`. Intensity scale mismatch noted for follow-up. |
| C3 | Update documentation | [ ] | Refresh `specs/spec-a-cli.md` and `README_PYTORCH.md` flag tables, note alias in `docs/architecture/c_parameter_dictionary.md`, and reference this plan from `docs/fix_plan.md` (new item) so future loops close it. |
| C4 | Fix-plan & plan closure | [ ] | Add new fix_plan entry (e.g., `[CLI-FLAGS-003]`) pointing to this plan; set completion criteria (tests, docs, command run). Once tasks pass, close plan and archive per SOP. |

### Phase D — Integration Follow-Through
Goal: Confirm no regressions in noise/geometry subsystems and capture open risks for longer-term initiatives.
Prereqs: Phases A–C complete.
Exit Criteria: Regression sweep documented, outstanding risks rolled into relevant plans (e.g., detector caching, noise modeling).

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| D1 | Run targeted regression suite | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_noise_generation.py tests/test_detector_pix0.py -v`; ensure existing tolerances hold with overrides. |
| D2 | Record residual risks | [ ] | Append summary to `reports/2025-10-cli-flags/phase_d/notes.md` covering any limitations (e.g., lack of `_mm` alias upstream, CUSTOM convention edge cases). Link to relevant active plans if work remains. |
| D3 | Investigate intensity scaling gap | [D] | ✅ 2025-10-06: Phase C2 artifacts analysed; determined discrepancy is geometric (zero correlation, peaks displaced by 1.5k pixels). Artifacts under `reports/2025-10-cli-flags/phase_d/`. See Notes below for mandatory follow-up trace work. |

[2025-10-06T10:11:42] tokens used: 27,916

[2025-10-06T10:11:44] thinking

**Continuing file review beyond truncation**
[2025-10-06T10:11:45] exec bash -lc "sed -n '60,120p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:46] bash -lc "sed -n '60,120p' plans/active/cli-noise-pix0/plan.md" succeeded in 661ms:
Exit Criteria: Trace comparison identifies first divergent variable; findings logged in `reports/2025-10-cli-flags/phase_e/trace_comparison.md` and summarized in docs/fix_plan.md `[CLI-FLAGS-003]` Attempts.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| E0 | Verify beam vector parity | [D] | ✅ 2025-10-16: `reports/2025-10-cli-flags/phase_e/beam_vector_check.txt` shows PyTorch Detector beam direction `[0., 0., 1.]` vs C trace override `[0.00051387949, 0, -0.99999986]`; confirms CLI wiring gap. |
| E1 | Instrument C trace for peak pixel | [D] | ✅ 2025-10-16: `c_trace_beam.log` captured via instrumented binary (pixel 1039,685) with pix0, beam, scattering, h/k/l, F_latt entries. |
| E2 | Generate matching PyTorch trace | [D] | ✅ 2025-10-16: `pytorch_trace_beam.log` generated with `trace_harness.py` (double precision). Harness currently overrides beam vector manually to mimic the supervisor command. |
| E3 | Diff traces and identify first divergence | [D] | ✅ 2025-10-16: `trace_diff_beam.txt` + `trace_summary.md` pinpoint pix0 mismatch (1.14 mm Y error) and reveal lost crystal orientation + polarization delta. docs/fix_plan.md Attempts updated with evidence requirements for implementation phases. |

### Phase F — Detector Implementation (beam + pix0 parity)
Goal: Port CUSTOM detector wiring so CLI overrides reproduce C behavior without ad-hoc harness patches.
Prereqs: Phase E traces complete; docs/fix_plan.md Attempt log captures pix0/beam/orientation findings.
Exit Criteria: Detector trace matches C for pix0 and incident beam; CLI parity run no longer relies on manual overrides.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| F1 | Thread `custom_beam_vector` through Detector | [D] | ✅ 2025-10-05 (ralph): Refactored `_calculate_pix0_vector()` to use `self.beam_vector` property instead of hardcoded beam vectors (lines 438-440, 519-521). Beam vector now exactly matches C trace. Artifacts in `reports/2025-10-cli-flags/phase_f/`. See docs/fix_plan.md Attempt #11. |
| F2 | Port CUSTOM pix0 transform for overrides | [D] | ✅ 2025-10-05: CUSTOM pathway from nanoBragg.c:1739-1846 ported (pivot override, MOSFLM vs CUSTOM offsets, close_distance recompute). Validation report at `reports/2025-10-cli-flags/phase_f2/pix0_transform_refit.txt`. Follow-up: ensure downstream uses keep `close_distance` as a tensor (no `.item()` detaches) when further tuning detector gradients. |
| F3 | Re-run Phase C2 parity smoke | [P] | 2025-10-17 Attempt #12 captured C vs PyTorch artifacts under `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/`; correlation ≈−5e-06 confirms geometry still diverges. Defer rerun until Phase G (A* orientation) lands so parity failure isn’t repeated; once orientation is wired, rerun parity and refresh metrics. |

[2025-10-06T10:11:46] tokens used: 29,375

[2025-10-06T10:11:49] thinking

**Checking vectorization plan**
[2025-10-06T10:11:50] exec bash -lc "python - <<'PY'
with open('plans/active/vectorization.md') as f:
    for i,line in enumerate(f,1):
        print(f\"{i:03d}: {line.rstrip()}\")
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:51] bash -lc "python - <<'PY'
with open('plans/active/vectorization.md') as f:
    for i,line in enumerate(f,1):
        print(f\"{i:03d}: {line.rstrip()}\")
PY" succeeded in 668ms:
001: ## Context
002: - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
003: - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
004: - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
005: 
006: ### Phase A — Evidence & Baseline Capture
007: Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
008: Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
009: Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.
010: 
011: | ID | Task Description | State | How/Why & Guidance |
012: | --- | --- | --- | --- |
013: | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
014: | A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
015: | A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
016: 
017: ### Phase B — Tricubic Vectorization Design
018: Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
019: Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
020: Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T10:11:51] tokens used: 32,615

[2025-10-06T10:11:55] thinking

**Preparing for deep code analysis**
[2025-10-06T10:11:56] exec bash -lc "sed -n '500,700p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:11:57] bash -lc "sed -n '500,700p' docs/fix_plan.md" succeeded in 684ms:
      - **pix0 Parity Verified:** Deltas X=1.13e-9 m, Y=1.22e-8 m, Z=1.90e-9 m (all < 2e-8 m, well within 5e-5 m spec)
    Next Actions: Execute Phase I (polarization alignment) per plan: audit polarization inputs, port Kahn factor, run final parity sweep.
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
    Observations/Hypotheses:
      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
      - Float/int/PGM images still generated when -nonoise is active
      - C code treats `-pix0_vector` and `-pix0_vector_mm` identically (strstr match, no unit conversion)
      - **Critical finding:** C code does NOT divide by 1000 for `_mm` suffix; caller must provide pre-scaled values
      - Both pix0 flags trigger `beam_convention = CUSTOM` side effect
      - Output pix0_vector: -0.216475836 0.216343050 -0.230192414 (meters)
  * [2025-10-05] Phase C1 Complete — Task C1 executed (CLI regression tests).
    Metrics: 18 test cases, 18 passed, 0 failed, 0 skipped (CPU); 17 passed, 1 skipped (CUDA unavailable in environment).
    Runtime: 3.34s
    Artifacts:
[2025-10-06T10:11:57] tokens used: 35,718

[2025-10-06T10:12:06] thinking

**Analyzing intensity scaling issues**

I’m preparing to dig into the core problem of the intensity scaling mismatch around 124k that’s blocking parity tests; I want to review recent work and key files like `simulator.py` to gather clues, planning targeted code inspection and searches for relevant terms like `polarization_factor` to understand why the scaling is off despite polarization fixes.
[2025-10-06T10:12:07] exec bash -lc "sed -n '1,200p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:08] bash -lc "sed -n '1,200p' src/nanobrag_torch/simulator.py" succeeded in 931ms:
"""
Main Simulator class for nanoBragg PyTorch implementation.

This module orchestrates the entire diffraction simulation, taking Crystal and
Detector objects as input and producing the final diffraction pattern.
"""

from typing import Optional, Callable

import torch

from .config import BeamConfig, CrystalConfig, CrystalShape
from .models.crystal import Crystal
from .models.detector import Detector
from .utils.geometry import dot_product
from .utils.physics import sincg, sinc3, polarization_factor


def compute_physics_for_position(
    # Geometry inputs
[2025-10-06T10:12:08] tokens used: 39,056

[2025-10-06T10:12:10] thinking

**Searching for intensity scaling variables**
[2025-10-06T10:12:11] exec bash -lc 'rg -n "fluence" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:12] bash -lc 'rg -n "fluence" -n src/nanobrag_torch/simulator.py' succeeded in 690ms:
481:        # Use fluence from beam config (AT-FLU-001)
482:        self.fluence = torch.tensor(self.beam_config.fluence, device=self.device, dtype=self.dtype)
1036:            * self.fluence
1282:                    # Calculate I_before_scaling (this is before r_e^2 * fluence / steps)
1290:                    print(f"TRACE_PY: fluence_photons_per_m2 {self.fluence.item():.15g}")
1336:                print(f"TRACE: Fluence = {self.fluence:.12e}")
1341:                print(f"  normalized * r_e^2 * fluence")
1342:                print(f"  = {normalized_intensity[target_slow, target_fast].item():.12e} * {self.r_e_sqr:.12e} * {self.fluence:.12e}")
1352:        I_bg = (F_bg^2) · r_e^2 · fluence · (water_size^3) · 1e6 · Avogadro / water_MW
1357:        - fluence = photons per square meter
1381:            * self.fluence
[2025-10-06T10:12:12] tokens used: 41,998

[2025-10-06T10:12:14] thinking

**Checking code near line 1000**
[2025-10-06T10:12:15] exec bash -lc "sed -n '900,1200p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:15] bash -lc "sed -n '900,1200p' src/nanobrag_torch/simulator.py" succeeded in 695ms:

                # Reshape back to (S, F, oversample*oversample)
                subpixel_physics_intensity_all = physics_intensity_flat.reshape(batch_shape)

            # Normalize by the total number of steps
            subpixel_physics_intensity_all = subpixel_physics_intensity_all / steps

            # PERF-PYTORCH-004 P3.0b: Polarization is now applied per-source inside compute_physics_for_position
            # Only omega needs to be applied here for subpixel oversampling

            # VECTORIZED AIRPATH AND OMEGA: Calculate for all subpixels
            sub_squared_all = torch.sum(subpixel_coords_ang_all * subpixel_coords_ang_all, dim=-1)
            # PERF-PYTORCH-004 Phase 1: Use clamp_min instead of torch.maximum to avoid allocating tensors inside compiled graph
            sub_squared_all = sub_squared_all.clamp_min(1e-20)
            sub_magnitudes_all = torch.sqrt(sub_squared_all)
            airpath_m_all = sub_magnitudes_all * 1e-10

            # Get close_distance from detector (computed during init)
            # Convert detector properties to tensors with correct device/dtype (AT-PERF-DEVICE-001)
            # Use as_tensor to avoid warnings when value might already be a tensor
[2025-10-06T10:12:15] tokens used: 42,535

[2025-10-06T10:12:18] thinking

**Examining intensity scaling near line 1300**
[2025-10-06T10:12:19] exec bash -lc "sed -n '1200,1400p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:20] bash -lc "sed -n '1200,1400p' src/nanobrag_torch/simulator.py" succeeded in 685ms:
                    # Calculate diffracted and incident vectors
                    coords_ang = coords * 1e10  # m to Å
                    pixel_mag = torch.sqrt(torch.sum(coords_ang * coords_ang))
                    diffracted_vec = coords_ang / pixel_mag
                    incident_vec = self.incident_beam_direction

                    print(f"TRACE_PY: diffracted_vec {diffracted_vec[0].item():.15g} {diffracted_vec[1].item():.15g} {diffracted_vec[2].item():.15g}")
                    print(f"TRACE_PY: incident_vec {incident_vec[0].item():.15g} {incident_vec[1].item():.15g} {incident_vec[2].item():.15g}")

                    # Wavelength
                    lambda_m = self.wavelength.item() * 1e-10
                    print(f"TRACE_PY: lambda_meters {lambda_m:.15g}")
                    print(f"TRACE_PY: lambda_angstroms {self.wavelength.item():.15g}")

                    # Scattering vector (in m^-1, not Å^-1!)
                    scattering_vec_ang_inv = (diffracted_vec - incident_vec) / self.wavelength
                    scattering_vec_m_inv = scattering_vec_ang_inv * 1e10  # Å^-1 to m^-1
                    print(f"TRACE_PY: scattering_vec_A_inv {scattering_vec_m_inv[0].item():.15g} {scattering_vec_m_inv[1].item():.15g} {scattering_vec_m_inv[2].item():.15g}")

                # Trace reciprocal space information if available
[2025-10-06T10:12:20] tokens used: 45,301

[2025-10-06T10:12:24] thinking

**Investigating BeamConfig defaults**
[2025-10-06T10:12:25] exec bash -lc 'rg -n "class BeamConfig" -n src/nanobrag_torch/config.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:25] bash -lc 'rg -n "class BeamConfig" -n src/nanobrag_torch/config.py' succeeded in 693ms:
463:class BeamConfig:
[2025-10-06T10:12:25] tokens used: 47,843

[2025-10-06T10:12:27] thinking

**Displaying code context starting at line 463**
[2025-10-06T10:12:28] exec bash -lc "sed -n '463,620p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:29] bash -lc "sed -n '463,620p' src/nanobrag_torch/config.py" succeeded in 669ms:
class BeamConfig:
    """Configuration for X-ray beam properties.

    Supports multiple sources for beam divergence and spectral dispersion (AT-SRC-001).
    """

    # Basic beam properties
    wavelength_A: float = 1.0  # X-ray wavelength in Angstroms (matches C default)

    # Source geometry (simplified)
    N_source_points: int = 1  # Number of source points for beam divergence
    source_distance_mm: float = 10000.0  # Distance from source to sample (mm)
    source_size_mm: float = 0.0  # Source size (0 = point source)

    # Multiple sources support (AT-SRC-001)
    source_directions: Optional[torch.Tensor] = None  # (N, 3) unit direction vectors from sample to sources
    source_weights: Optional[torch.Tensor] = None  # (N,) source weights (ignored per spec, all equal)
    source_wavelengths: Optional[torch.Tensor] = None  # (N,) wavelengths in meters for each source

    # Beam polarization
[2025-10-06T10:12:29] tokens used: 48,071

[2025-10-06T10:12:34] thinking

**Verifying fluence calculation and units**
[2025-10-06T10:12:34] exec bash -lc 'rg -n "physical_intensity" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:35] bash -lc 'rg -n "physical_intensity" src/nanobrag_torch/simulator.py' succeeded in 705ms:
1033:        physical_intensity = (
1042:            physical_intensity = physical_intensity + water_background
1048:        if physical_intensity.shape != roi_mask.shape:
1050:            actual_spixels, actual_fpixels = physical_intensity.shape
1051:            roi_mask = torch.ones_like(physical_intensity)
1067:                if self.detector.config.mask_array.shape == physical_intensity.shape:
1073:        # Ensure roi_mask is on the same device as physical_intensity
1074:        roi_mask = roi_mask.to(physical_intensity.device)
1075:        physical_intensity = physical_intensity * roi_mask
1092:                physical_intensity,
1104:        return physical_intensity.to(dtype=self.dtype)
1107:                           physical_intensity,
1118:            physical_intensity: Final intensity values
1135:            if 0 <= target_slow < physical_intensity.shape[0] and 0 <= target_fast < physical_intensity.shape[1]:
1137:                print(f"  Final intensity: {physical_intensity[target_slow, target_fast].item():.6e}")
1152:            print(f"  Image shape: {physical_intensity.shape[0]} x {physical_intensity.shape[1]} pixels")
1153:            print(f"  Max intensity: {physical_intensity.max().item():.6e}")
1154:            print(f"  Min intensity: {physical_intensity.min().item():.6e}")
1155:            print(f"  Mean intensity: {physical_intensity.mean().item():.6e}")
1158:            max_val = physical_intensity.max()
[2025-10-06T10:12:35] tokens used: 49,507

[2025-10-06T10:12:39] thinking

**Checking specific source lines**
[2025-10-06T10:12:40] exec bash -lc "sed -n '1000,1070p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:40] bash -lc "sed -n '1000,1070p' src/nanobrag_torch/simulator.py" succeeded in 665ms:

            # Calculate solid angle (omega) based on point_pixel mode
            if self.detector.config.point_pixel:
                # Point pixel mode: ω = 1 / R^2
                omega_pixel = 1.0 / (airpath_m * airpath_m)
            else:
                # Standard mode with obliquity correction
                # ω = (pixel_size^2 / R^2) · (close_distance/R)
                omega_pixel = (
                    (pixel_size_m * pixel_size_m)
                    / (airpath_m * airpath_m)
                    * close_distance_m
                    / airpath_m
                )

            # Apply omega directly
            normalized_intensity = normalized_intensity * omega_pixel

        # Apply detector absorption if configured (AT-ABS-001)
        if (self.detector.config.detector_thick_um is not None and
[2025-10-06T10:12:40] tokens used: 50,795

[2025-10-06T10:12:43] thinking

**Verifying variable definitions**
[2025-10-06T10:12:43] exec bash -lc 'rg -n "r_e_sqr" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:44] bash -lc 'rg -n "r_e_sqr" src/nanobrag_torch/simulator.py' succeeded in 699ms:
478:        self.r_e_sqr = torch.tensor(
1035:            * self.r_e_sqr
1287:                    r_e_m = torch.sqrt(self.r_e_sqr).item()
1289:                    print(f"TRACE_PY: r_e_sqr {self.r_e_sqr.item():.15g}")
1335:                print(f"TRACE: r_e^2 = {self.r_e_sqr:.12e}")
1342:                print(f"  = {normalized_intensity[target_slow, target_fast].item():.12e} * {self.r_e_sqr:.12e} * {self.fluence:.12e}")
1380:            * self.r_e_sqr
[2025-10-06T10:12:44] tokens used: 51,789

[2025-10-06T10:12:46] thinking

**Checking r_e_sqr definition**
[2025-10-06T10:12:47] exec bash -lc "sed -n '440,520p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:48] bash -lc "sed -n '440,520p' src/nanobrag_torch/simulator.py" succeeded in 704ms:
        elif hasattr(crystal, 'beam_config') and crystal.beam_config is not None:
            self.beam_config = crystal.beam_config
        else:
            self.beam_config = BeamConfig()
        # Normalize device to ensure consistency
        if device is not None:
            # Create a dummy tensor on the device to get the actual device with index
            temp = torch.zeros(1, device=device)
            self.device = temp.device
        else:
            self.device = torch.device("cpu")
        self.dtype = dtype

        # Store debug configuration
        self.debug_config = debug_config if debug_config is not None else {}
        self.printout = self.debug_config.get('printout', False)
        self.printout_pixel = self.debug_config.get('printout_pixel', None)  # [fast, slow]
        self.trace_pixel = self.debug_config.get('trace_pixel', None)  # [slow, fast]

        # Set incident beam direction from detector.beam_vector
[2025-10-06T10:12:48] tokens used: 52,182

[2025-10-06T10:12:51] thinking

**Analyzing intensity normalization details**
[2025-10-06T10:12:52] exec bash -lc 'rg -n "steps" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:53] bash -lc 'rg -n "steps" src/nanobrag_torch/simulator.py' succeeded in 660ms:
427:            if hasattr(crystal_config, 'phi_steps'):
428:                self.crystal.config.phi_steps = crystal_config.phi_steps
685:                            for(phi_tic = 0; phi_tic < phisteps; ++phi_tic)
761:        # Get rotated lattice vectors for all phi steps and mosaic domains
806:        # Calculate normalization factor (steps)
807:        # Per spec AT-SAM-001: "Final per-pixel scale SHALL divide by steps"
808:        # PERF-PYTORCH-004 P3.0c: Per AT-SRC-001 "steps = sources; intensity contributions SHALL sum with per-source λ and weight, then divide by steps"
811:        phi_steps = self.crystal.config.phi_steps
815:        steps = source_norm * phi_steps * mosaic_domains * oversample * oversample  # Include sources and oversample^2
904:            # Normalize by the total number of steps
905:            subpixel_physics_intensity_all = subpixel_physics_intensity_all / steps
981:            # Normalize by steps
982:            normalized_intensity = intensity / steps
1282:                    # Calculate I_before_scaling (this is before r_e^2 * fluence / steps)
1291:                    print(f"TRACE_PY: steps {self.crystal.config.phi_steps}")
1426:        thicksteps = self.detector.config.detector_thicksteps
1456:        delta_z = thickness_m / thicksteps
1461:            t_indices = torch.arange(thicksteps, device=intensity.device, dtype=intensity.dtype)
1464:            # Shape: (thicksteps, 1, 1) for broadcasting with (S, F)
1474:            capture_fractions = exp_start_all - exp_end_all  # Shape: (thicksteps, S, F)
[2025-10-06T10:12:53] tokens used: 53,635

[2025-10-06T10:12:55] thinking

**Inspecting source_norm section**
[2025-10-06T10:12:56] exec bash -lc "sed -n '760,840p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:12:56] bash -lc "sed -n '760,840p' src/nanobrag_torch/simulator.py" succeeded in 720ms:

        # Get rotated lattice vectors for all phi steps and mosaic domains
        # Shape: (N_phi, N_mos, 3)
        # PERF-PYTORCH-006: Convert crystal vectors to correct device/dtype
        if override_a_star is None:
            (rot_a, rot_b, rot_c), (rot_a_star, rot_b_star, rot_c_star) = (
                self.crystal.get_rotated_real_vectors(self.crystal.config)
            )
            # Convert to correct dtype/device
            rot_a = rot_a.to(device=self.device, dtype=self.dtype)
            rot_b = rot_b.to(device=self.device, dtype=self.dtype)
            rot_c = rot_c.to(device=self.device, dtype=self.dtype)
            rot_a_star = rot_a_star.to(device=self.device, dtype=self.dtype)
            rot_b_star = rot_b_star.to(device=self.device, dtype=self.dtype)
            rot_c_star = rot_c_star.to(device=self.device, dtype=self.dtype)
            # Cache rotated reciprocal vectors for GAUSS/TOPHAT shape models
            self._rot_a_star = rot_a_star
            self._rot_b_star = rot_b_star
            self._rot_c_star = rot_c_star
        else:
[2025-10-06T10:12:56] tokens used: 54,278

[2025-10-06T10:13:07] thinking

**Analyzing intensity scaling discrepancies**
[2025-10-06T10:13:08] exec bash -lc 'cat reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:09] bash -lc 'cat reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json' succeeded in 908ms:
{
  "correlation": 0.9977842706924522,
  "mse": 1646200832.0,
  "rmse": 40573.40234375,
  "max_abs_diff": 54111648.0,
  "c_sum": 6490.8203125,
  "py_sum": 808353600.0,
  "sum_ratio": 124537.96875,
  "mean_peak_distance": 37.79219496139381,
  "max_peak_distance": 377.9219496139381,
  "runtime_c_ms": 551,
  "runtime_py_ms": 5853,
  "speedup": 0.09425157796001365,
  "args": [
    "-mat",
    "A.mat",
    "-floatfile",
    "img.bin",
    "-hkl",
    "scaled.hkl",
[2025-10-06T10:13:09] tokens used: 56,056

[2025-10-06T10:13:19] thinking

**Analyzing peak alignment discrepancies**
[2025-10-06T10:13:20] exec bash -lc 'cat reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:21] bash -lc 'cat reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/summary.md' succeeded in 933ms:
# CLI-FLAGS-003 Phase H4 Summary

## Objective
Verify that Phase H4a implementation (post-rotation beam-centre recomputation) achieves pix0_vector parity with C code.

## Test Configuration
- CUSTOM convention with custom detector vectors
- No pix0_vector_mm override (custom vectors take precedence per H3b2)
- Polarization disabled (-nopolar)
- Command parameters from trace_harness.py (wavelength 0.9768 Å, N=36×47×29, etc.)

## Results

### pix0_vector Parity (meters)
| Component | C (trace_c.log) | PyTorch (trace_py.log) | Delta | Tolerance |
|-----------|-----------------|------------------------|-------|-----------|
| X | -0.216336514802265 | -0.216336513668519 | 1.13e-9 m (0.001 μm) | ≤5e-5 m |
| Y |  0.215206668836451 |  0.21520668107301  | 1.22e-8 m (0.012 μm) | ≤5e-5 m |
| Z | -0.230198010448577 | -0.230198008546698 | 1.90e-9 m (0.002 μm) | ≤5e-5 m |

[2025-10-06T10:13:21] tokens used: 57,244

[2025-10-06T10:13:27] thinking

**Analyzing pixel offset discrepancy**
[2025-10-06T10:13:28] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_i/supervisor_command/README.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:28] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_i/supervisor_command/README.md" succeeded in 711ms:
# CLI-FLAGS-003 Phase I3 Supervisor Command Evidence

**Date:** 2025-10-06
**Engineer:** Ralph (Loop i=32)
**Status:** ❌ PARITY FAILURE - Intensity scaling discrepancy (×124,538)
**Plan Reference:** `plans/active/cli-noise-pix0/plan.md:110`, `docs/fix_plan.md:448`

## Executive Summary

Executed Phase I3 final parity validation per supervisor input. Both C and PyTorch implementations completed successfully, but **parity check failed** with:
- **Correlation:** 0.9978 (< 0.999 threshold)
- **Sum Ratio (Py/C):** 124,538× (should be ~1.0)
- **Max Intensity:** C=446, PyTorch=5.411×10⁷ (121,000× discrepancy)

**Root Cause:** Intensity scaling/normalization bug in PyTorch implementation. Values are consistent in pattern (high correlation) but catastrophically wrong in absolute magnitude.

## nb-compare Tooling Fix (Successfully Deployed)

### Issue
`scripts/nb_compare.py` failed to parse non-standard detector dimensions (`-detpixels_x 2463 -detpixels_y 2527`), causing:
[2025-10-06T10:13:28] tokens used: 58,541

[2025-10-06T10:13:37] thinking

**Analyzing fluence calculation discrepancies**

I'm exploring why the C output for fluence differs from the documented formula, suspecting differences in area calculation using π and beam size interpretations. I'm considering checking logs and prior trace summaries to understand intensity scaling issues and CLI parity failures, aiming to outline key gaps and possible approaches for a thorough analysis.
[2025-10-06T10:13:38] exec bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_e/trace_summary.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:39] bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_e/trace_summary.md" succeeded in 726ms:
# Phase E Trace Comparison Summary

**Date:** 2025-10-05
**Commit:** ae11d23
**Target Pixel:** (slow=1039, fast=685)
**Objective:** Identify first divergence between C and PyTorch traces for CLI-FLAGS-003 supervisor command

## Executive Summary

**First Divergence:** Line 1 (pix0_vector)
**Root Cause:** PyTorch uses raw user input for pix0_vector without applying CUSTOM convention transformation
**Impact:** Cascading geometry errors leading to wrong diffraction pattern (correlation ≈ 0)

## Trace Generation Commands

### C Trace
```bash
./golden_suite_generator/nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl \
  -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 \
  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 \
[2025-10-06T10:13:39] tokens used: 61,641

[2025-10-06T10:13:44] thinking

**Planning analysis and coin flip**

I’m gathering info on current issues, especially from docs/fix_plan.md and galph_memory, which has a long fix_plan file. Next, I’ll flip a coin with Python’s random.choice to decide whether to review recent commits or move to step 3, so I can follow the instruction logic precisely.
[2025-10-06T10:13:45] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:46] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 690ms:
heads
[2025-10-06T10:13:46] tokens used: 63,674

[2025-10-06T10:13:49] thinking

**Checking recent commit history**
[2025-10-06T10:13:50] exec bash -lc 'git log --oneline -n 12' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:51] bash -lc 'git log --oneline -n 12' succeeded in 727ms:
4d3ee81 [SYNC i=32] actor=galph status=running
8bfbdf8 [SYNC i=32] actor=ralph → next=galph status=ok ralph_commit=beadffc
beadffc [CLI-FLAGS-003] i=32 Tooling/Evidence: Fix nb-compare for non-standard detpixels; document Phase I3 parity failure (×124,538 scaling)
27bb9da [SYNC i=31] actor=ralph status=running
0146324 [SYNC i=31] actor=galph → next=ralph status=ok galph_commit=9a48cd7
9a48cd7 SUPERVISOR: Phase I3 parity prep - tests: not run
468255c [SYNC i=31] actor=galph status=running
7f4fcd4 [SYNC i=31] actor=ralph → next=galph status=ok ralph_commit=e8146c2
e8146c2 CLI-FLAGS-003 Phase I: Align polarization_factor default with C polar=1.0
a0861f8 [SYNC i=30] actor=ralph status=running
4b02070 [SYNC i=30] actor=galph → next=ralph status=ok galph_commit=85c5cf3
85c5cf3 SUPERVISOR: Phase I polarization staging - tests: not run
[2025-10-06T10:13:51] tokens used: 63,891

[2025-10-06T10:13:55] thinking

**Inspecting recent commits for productivity**
[2025-10-06T10:13:55] exec bash -lc 'git show --stat beadffc' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:56] bash -lc 'git show --stat beadffc' succeeded in 706ms:
commit beadffcc696ec3206d5565e27049d5b5845d1386
Author: ollie <ohoidn>
Date:   Mon Oct 6 03:09:19 2025 -0700

    [CLI-FLAGS-003] i=32 Tooling/Evidence: Fix nb-compare for non-standard detpixels; document Phase I3 parity failure (×124,538 scaling)
    
    Module: scripts/tooling, reports/evidence
    Acceptance: CLI-FLAGS-003 Phase I3 (FAILED - requires debugging)
    
    Changes:
    - scripts/nb_compare.py:118-180,396-397 — Added -detpixels_x/-detpixels_y parsing to load_float_image()
    - reports/2025-10-cli-flags/phase_i/supervisor_command/README.md — Phase I3 evidence report
    - docs/fix_plan.md:460-479 — Attempt #27 with parity failure metrics and debug hypotheses
    
    Evidence (per input.md):
    - ✅ nb-compare successfully runs with supervisor command (after tooling fix)
    - ❌ Parity FAILED: correlation=0.9978 (< 0.999), sum_ratio=124,538 (should be ~1.0)
    - ✅ Artifacts: summary.json, c_stdout.txt, py_stdout.txt, diff.png, SHA256 hashes
    - ✅ pytest --collect-only: 632 tests collected
    
[2025-10-06T10:13:56] tokens used: 64,478

[2025-10-06T10:13:58] thinking

**Inspecting specific commit**
[2025-10-06T10:13:59] exec bash -lc 'git show --stat e8146c2' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:13:59] bash -lc 'git show --stat e8146c2' succeeded in 673ms:
commit e8146c2e04f6d3200cff008adc4b890734f4aa87
Author: ollie <ohoidn>
Date:   Mon Oct 6 02:40:52 2025 -0700

    CLI-FLAGS-003 Phase I: Align polarization_factor default with C polar=1.0
    
    BeamConfig.polarization_factor now defaults to 1.0 to match nanoBragg.c:308
    polar=1.0 initialization. Previously defaulted to 0.0, causing polarization
    mismatch in Phase E traces (PyTorch 1.0 vs C ~0.9126 calculated Kahn factor).
    
    Changes:
    - src/nanobrag_torch/config.py:483-487 — Updated default from 0.0 to 1.0
      with C reference citation
    - tests/test_cli_flags.py:591-675 — Added TestCLIPolarization class with
      3 tests covering default parity, -nopolar flag, and -polar override
    - plans/active/cli-noise-pix0/plan.md — Marked Phase I tasks I1-I2 complete
    - docs/fix_plan.md — Added Attempt #26 with metrics and next actions
    
    Tests: 57 passed, 1 warning
    - CLI flags: 26/26 passed (including 3 new polarization tests)
[2025-10-06T10:13:59] tokens used: 65,328

[2025-10-06T10:14:14] thinking

**Evaluating need for plan update**
[2025-10-06T10:14:15] exec bash -lc 'rg -n "intensity" specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:14:16] bash -lc 'rg -n "intensity" specs/spec-a-core.md' succeeded in 690ms:
446:- I: accumulator for intensity before applying r_e^2 and fluence.
576:    - Expectation: Final per-pixel scale SHALL divide by steps=2 so intensity matches the single-step case (within numeric tolerance).
628:    - Expectation: All format variants SHALL produce identical diffraction patterns when phase/sigma columns are ignored. Implementation SHALL correctly parse all columns present but use only h,k,l,F for intensity calculations. Negative indices SHALL be handled correctly. Fdump.bin cache SHALL be correctly generated for all formats and produce identical results when reused.
633:    - Expectation: steps = 2; intensity contributions SHALL sum with per-source λ and weight, then divide by steps.
[2025-10-06T10:14:16] tokens used: 66,747

[2025-10-06T10:14:18] thinking

**Reading additional lines for context**
[2025-10-06T10:14:19] exec bash -lc "sed -n '420,520p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:14:20] bash -lc "sed -n '420,520p' specs/spec-a-core.md" succeeded in 729ms:
0.02 -fluence 1e24 -N 0 -water 0
    - Same unsupported flags as Example 2; apply same replacements. Geometry follows from direct
cell (scaled to meters) and misset angles applied to reciprocal space then converted back to real
space.

Glossary (Informative)

- Detector fast/slow axes f/s: unit vectors along increasing pixel indices in fast/slow directions.
- Detector normal o: unit vector normal to detector plane, pointing from sample to detector.
- Detector origin D0: vector from sample to the plane coordinate corresponding to near-point or beam
center depending on pivot.
- Beam b: unit vector from sample along the incident beam direction.
- Polarization p: unit E-vector direction of the incident beam.
- Vertical v: unit vector perpendicular to both beam and polarization: v = unit(b × p).
- Spindle u: unit rotation axis for φ.
- Xbeam/Ybeam: direct beam position on detector in mm units (for header reporting).
- Fbeam/Sbeam: beam position in fast/slow metric coordinates (meters) used to construct D0 when
pivoting about the beam.
- ORGX/ORGY: XDS beam center in pixels.
- DIALS origin: detector origin in mm projected onto lab axes as implemented.
[2025-10-06T10:14:20] tokens used: 67,145

[2025-10-06T10:14:40] thinking

**Listing relevant docs for plan update**

I’m gathering the key documentation on intensity scaling, CLI flags, vectorization, and parallel validation to support the plan update. I want to mention all these sources clearly before refining the plan, especially focusing on parity issues flagged under CLI-FLAGS-003. Next, I’ll check details like fluence references in the pytorch_design doc and note any code paths worth listing.
[2025-10-06T10:14:41] exec bash -lc 'rg -n "scaling" docs/architecture/pytorch_design.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:14:42] bash -lc 'rg -n "scaling" docs/architecture/pytorch_design.md' exited 1 in 901ms:

[2025-10-06T10:14:42] tokens used: 70,220

[2025-10-06T10:14:45] thinking

**Reviewing physics scaling details**
[2025-10-06T10:14:45] exec bash -lc 'rg -n "fluence" docs/architecture/pytorch_design.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:14:46] bash -lc 'rg -n "fluence" docs/architecture/pytorch_design.md' exited 1 in 685ms:

[2025-10-06T10:14:46] tokens used: 70,362

[2025-10-06T10:15:31] thinking

**Updating phased plan for intensity scaling debug**
[2025-10-06T10:15:53] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -116,4 +116,37 @@
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
[2025-10-06T10:15:53] apply_patch(auto_approved=true) exited 0 in 10ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T10:15:53] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..baed53d4c23bf61b881fe52d9ef9b67a69d21600
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -114,6 +114,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |

[2025-10-06T10:15:53] tokens used: 74,612
[2025-10-06T10:15:53] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..baed53d4c23bf61b881fe52d9ef9b67a69d21600
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -114,6 +114,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:15:58] thinking

**Adding context update bullet**
[2025-10-06T10:16:01] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -5,2 +5,3 @@
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
[2025-10-06T10:16:01] apply_patch(auto_approved=true) exited 0 in 15ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T10:16:01] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |

[2025-10-06T10:16:01] tokens used: 77,034
[2025-10-06T10:16:01] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:16:07] thinking

**Updating documentation for new phases**
[2025-10-06T10:16:08] exec bash -lc 'rg -n "124,538" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:16:09] bash -lc 'rg -n "124,538" docs/fix_plan.md' succeeded in 1.04s:
458:- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
460:  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
461:    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
471:      - **Intensity ratio 121,250×:** PyTorch raw values ~124,538× higher than C after normalization
[2025-10-06T10:16:09] tokens used: 77,597
[2025-10-06T10:16:09] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:16:13] thinking

**Updating next actions line**
[2025-10-06T10:16:17] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,3 +457,6 @@
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
[2025-10-06T10:16:17] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T10:16:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..bca0ca1a26e1c96b005d10c807a2bfbf5b77f48d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |

[2025-10-06T10:16:17] tokens used: 78,825
[2025-10-06T10:16:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..bca0ca1a26e1c96b005d10c807a2bfbf5b77f48d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:16:26] thinking

**Ensuring plan and document consistency**

I’m making sure the enumerated list formatting is consistent and verifying that the updated plans and fix_plan items properly reference the new phases. I note that Step 3 involves checking if new docs or updates are needed, and since we have modified the plan, that’s done. Next, I’ll compile a document list and set instructions in input.md for Ralph to run Phase J as an Evidence phase, while also checking the current git branch to confirm the context.
[2025-10-06T10:16:28] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:16:29] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 863ms:
feature/spec-based-2
[2025-10-06T10:16:29] tokens used: 80,484
[2025-10-06T10:16:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..bca0ca1a26e1c96b005d10c807a2bfbf5b77f48d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:16:44] thinking

**Preparing detailed input.md outline**

I'm structuring the input.md for the feature/spec-based-2 branch with all required sections—header, Do Now, Priorities, Pitfalls, Pointers, How-To Map, and Next Up—carefully aligning them to phase Evidence guidelines and including commands and file references for tracing scaling data collection. I'll also figure out line numbers from the plan documents to make precise anchors for references.
[2025-10-06T10:16:46] exec bash -lc "python - <<'PY'
with open('plans/active/cli-noise-pix0/plan.md') as f:
    for i,line in enumerate(f,1):
        if 'Phase J' in line or 'Phase K' in line or 'Gap snapshot update' in line:
            print(i, line.rstrip())
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:16:47] bash -lc "python - <<'PY'
with open('plans/active/cli-noise-pix0/plan.md') as f:
    for i,line in enumerate(f,1):
        if 'Phase J' in line or 'Phase K' in line or 'Gap snapshot update' in line:
            print(i, line.rstrip())
PY" succeeded in 873ms:
6 - Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
120 | I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
122 ### Phase J — Intensity Scaling Evidence
130 | J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
131 | J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
133 ### Phase K — Normalization Implementation
134 Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
135 Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
140 | K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
[2025-10-06T10:16:47] tokens used: 81,391
[2025-10-06T10:16:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..bca0ca1a26e1c96b005d10c807a2bfbf5b77f48d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:16:50] thinking

**Checking line numbers in docs/fix_plan**
[2025-10-06T10:16:51] exec bash -lc "python - <<'PY'
with open('docs/fix_plan.md') as f:
    for i,line in enumerate(f,1):
        if '[CLI-FLAGS-003]' in line or 'Next Actions' in line[:20]:
            print(i, line.rstrip())
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:16:52] bash -lc "python - <<'PY'
with open('docs/fix_plan.md') as f:
    for i,line in enumerate(f,1):
        if '[CLI-FLAGS-003]' in line or 'Next Actions' in line[:20]:
            print(i, line.rstrip())
PY" succeeded in 800ms:
21 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
44     Next Actions: Update `plans/active/repo-hygiene-002/plan.md` task H4 guidance to reference Protected Assets, then verify the checklist is followed in the next hygiene pass.
49     Next Actions: Capture proof-of-compliance during the next hygiene loop and keep plan cross-references fresh.
54     Next Actions: Update plan task H4 with the mandatory docs/index.md scan, then record a compliance log during the next REPO-HYGIENE-002 execution.
78     Next Actions: Complete plan H1–H6 (baseline snapshot, restore canonical file, purge stray reports, rerun parity smoke tests, log closure).
83     Next Actions: Record closure in plan notes and keep baseline snapshot for future hygiene audits.
88     Next Actions: Execute plan tasks H1–H4 on a dedicated branch: capture baseline file (`git show 92ac528^:golden_suite_generator/nanoBragg.c`), restore it locally, archive `reports/2025-09-30-AT-021-traces/` under `reports/archive/`, remove the duplicate `fix_plan.md`, then run H5 parity smoke before logging completion in H6.
93     Next Actions: None - item closed successfully. Keep baseline snapshot for future hygiene audits.
124     Next Actions: Proceed to Phase 2 multi-device validation.
129     Next Actions: Implement plan tasks P2.1–P2.5 (CLI extension, CPU/CUDA runs, Dynamo logs), then P3.0/P3.0b/P3.0c–P3.5 (multi-source defaults + polarization + normalization, benchmark hardening, ROI caching, C comparison).
134     Next Actions: Fix P3.0b by refactoring polarization to use per-source incident directions; recommend approach (1) for minimal disruption. Then proceed to P3.0c normalization verification.
139     Next Actions: Re-open P3.0b and validate against C traces (`scripts/debug_pixel_trace.py` vs instrumented nanoBragg.c) for a 3-source configuration.
144     Next Actions: Restore truthful status in plan and implement fallback seeding, per-source polarization, and proper normalization before gathering new benchmarks.
149     Next Actions: Block further benchmarking until physics parity passes; revisit these measurements after completing P3.0–P3.0c and P3.4.
154     Next Actions: Ralph to execute plan tasks P3.0–P3.0c in order, capture multi-source trace comparisons, then proceed to benchmarking tasks once physics parity is restored.
159     Next Actions: Ralph to finish P3.0–P3.4, then rerun CPU/CUDA benchmarks and produce the Phase 3 summary per plan guidance before reconsidering Phase 4.
164     Next Actions: Re-open plan tasks P3.0/P3.0b/P3.0c/P3.4 in code, implement guarded seeding + per-source polarization + post-sum weighting before normalization, then hoist ROI/misset tensors ahead of re-running benchmarks. Only after those fixes land should Ralph resume P3.2/P3.3 measurements.
169     Next Actions: Same as Attempt #12 — execute plan tasks P3.0b/P3.0c/P3.4 under `prompts/debug.md`, capturing 3-source C/Py traces and refreshed CPU benchmarks once fixes land.
174     Next Actions: Ralph to execute updated plan tasks P3.0–P3.0c (multi-source defaults, per-source polarization, normalization) and P3.4 (ROI/misset caching) with the new artifact targets before rerunning P3.2/P3.3 benchmarks.
179     Next Actions: Ralph to execute plan tasks P3.0b (per-source polarization) and P3.0c (normalization validation with weighted sources) with new trace/benchmark artifacts, then deliver P3.4 ROI/misset caching before re-running P3.2/P3.3 benchmarks.
[2025-10-06T10:16:52] tokens used: 82,578
[2025-10-06T10:16:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..bca0ca1a26e1c96b005d10c807a2bfbf5b77f48d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:16:55] thinking

**Verifying documentation formatting**
[2025-10-06T10:16:56] exec bash -lc "sed -n '440,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:16:57] bash -lc "sed -n '440,520p' docs/fix_plan.md" succeeded in 698ms:
- Immediate Next Actions (2025-10-15):
  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
- Attempts History: None — new item.
- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.

## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A-H complete; polarization Phase I pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
[2025-10-06T10:16:57] tokens used: 84,214
[2025-10-06T10:16:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..bca0ca1a26e1c96b005d10c807a2bfbf5b77f48d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:17:04] thinking

**Updating contradictory next actions**
[2025-10-06T10:17:06] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -481,3 +481,3 @@
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
[2025-10-06T10:17:06] apply_patch(auto_approved=true) exited 0 in 21ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T10:17:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |

[2025-10-06T10:17:06] tokens used: 88,088
[2025-10-06T10:17:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:17:19] thinking

**Preparing detailed input.md instructions**

I'm planning to create the `input.md` file with about 130 lines, including status updates, an attempts history section, and detailed instructions referencing specific files and line numbers. I need to include commands for running C and PyTorch harnesses, fallback steps if blocked, and priority rationale bullets referring to relevant spec and plan lines. I'll gather line numbers from the specs to accurately cite them.
[2025-10-06T10:17:20] exec bash -lc "nl -ba specs/spec-a-core.md | sed -n '430,470p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:17:21] bash -lc "nl -ba specs/spec-a-core.md | sed -n '430,470p'" succeeded in 891ms:
   430	center depending on pivot.
   431	- Beam b: unit vector from sample along the incident beam direction.
   432	- Polarization p: unit E-vector direction of the incident beam.
   433	- Vertical v: unit vector perpendicular to both beam and polarization: v = unit(b × p).
   434	- Spindle u: unit rotation axis for φ.
   435	- Xbeam/Ybeam: direct beam position on detector in mm units (for header reporting).
   436	- Fbeam/Sbeam: beam position in fast/slow metric coordinates (meters) used to construct D0 when
   437	pivoting about the beam.
   438	- ORGX/ORGY: XDS beam center in pixels.
   439	- DIALS origin: detector origin in mm projected onto lab axes as implemented.
   440	- a,b,c: real-space unit cell vectors (meters) after all rotations.
   441	- a*,b*,c*: reciprocal-space cell vectors (Å^-1).
   442	- q: scattering vector in m^-1: (d − i)/λ.
   443	- stol: 0.5·|q| in m^-1; used only for d_min cut.
   444	- F_cell: structure factor amplitude (arbitrary units) from HKL input (no symmetry).
   445	- F_latt: lattice transform factor (dimensionless) from chosen shape.
   446	- I: accumulator for intensity before applying r_e^2 and fluence.
   447	- ω: pixel solid angle factor (steradian approximation).
   448	- μ: detector attenuation coefficient (m^-1).
   449	
[2025-10-06T10:17:21] tokens used: 89,372
[2025-10-06T10:17:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:17:25] thinking

**Preparing to reference files with line numbers**
[2025-10-06T10:17:26] exec bash -lc "nl -ba src/nanobrag_torch/simulator.py | sed -n '880,940p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:17:26] bash -lc "nl -ba src/nanobrag_torch/simulator.py | sed -n '880,940p'" succeeded in 773ms:
   880	                incident_dirs_batched = -source_directions  # Shape: (n_sources, 3)
   881	                wavelengths_batched = source_wavelengths_A  # Shape: (n_sources,)
   882	
   883	                # Single batched call for all sources
   884	                # This replaces the Python loop and enables torch.compile optimization
   885	                physics_intensity_flat = self._compute_physics_for_position(
   886	                    coords_reshaped, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star,
   887	                    incident_beam_direction=incident_dirs_batched,
   888	                    wavelength=wavelengths_batched,
   889	                    source_weights=source_weights
   890	                )
   891	
   892	                # Reshape back to (S, F, oversample*oversample)
   893	                # The weighted sum over sources is done inside _compute_physics_for_position
   894	                subpixel_physics_intensity_all = physics_intensity_flat.reshape(batch_shape)
   895	            else:
   896	                # Single source case: use default beam parameters
   897	                physics_intensity_flat = self._compute_physics_for_position(
   898	                    coords_reshaped, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star
   899	                )
[2025-10-06T10:17:26] tokens used: 90,501
[2025-10-06T10:17:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:17:31] thinking

**Referencing line numbers for documentation**
[2025-10-06T10:17:32] exec bash -lc "nl -ba docs/development/testing_strategy.md | sed -n '20,120p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:17:33] bash -lc "nl -ba docs/development/testing_strategy.md | sed -n '20,120p'" succeeded in 705ms:
    20	- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
    21	- **Authoritative smoke runs:** When a change touches tensor math, run the authoritative reproduction command once on CPU and once on CUDA (when available). Capture both logs/metrics and attach them to the fix plan. Treat any `torch.compile` or Dynamo warning about mixed devices as blocking.
    22	- **Targeted tests:** Prefer parametrised tests that iterate over `device in {"cpu", "cuda"}` (guarded by `torch.cuda.is_available()`). At minimum, ensure a `gpu_smoke` marker or equivalent pytest node exercises the new logic on CUDA before declaring success.
    23	- **Helper utilities:** Encapsulate device/dtype harmonisation in small helpers (e.g., `tensor.to(other_tensor)` or `type_as`). Centralise these helpers in reusable modules to keep the rule enforceable across future PyTorch projects.
    24	- **CI gate:** If CI offers GPU runners, add a fast smoke job that runs the `gpu_smoke` marker (or agreed command) so regressions like CPU↔GPU tensor mixing fail quickly.
    25	- **Vectorization check:** Confirm `_compute_physics_for_position` and related helpers remain batched across sources/phi/mosaic/oversample; extend broadcast dimensions instead of adding Python loops.
    26	- **Runtime checklist:** Consult `docs/development/pytorch_runtime_checklist.md` during development and cite it in fix-plan notes for PyTorch changes.
    27	
    28	### 1.5 Loop Execution Notes (Do Now + Validation Scripts)
    29	
    30	- Do Now must include an exact pytest command: In the supervisor→engineer handoff (`input.md`), include the precise `pytest` node(s) that reproduce the active item. If no test exists, first author the minimal targeted test and then run it.
    31	- Prefer reusable validation scripts: Place ad‑hoc validations under `scripts/validation/` and reference them from `input.md` rather than embedding Python snippets inline. Keep them portable and invoke via the project’s standard CLI/env.
    32	- Test cadence per loop: Run targeted tests first; execute the full `pytest` suite at most once per engineer turn (end of loop) when code changed. For prompt/docs‑only loops, use `pytest --collect-only -q` to verify import/collection.
    33	
    34	## 2. Configuration Parity
    35	
    36	**CRITICAL REQUIREMENT:** Before implementing any test that compares against C-code output, you **MUST** ensure exact configuration parity. All golden test cases must be generated with commands that are verifiably equivalent to the PyTorch test configurations.
    37	
    38	**Authoritative Reference:** See the **[C-CLI to PyTorch Configuration Map](./c_to_pytorch_config_map.md)** for:
    39	- Complete parameter mappings
[2025-10-06T10:17:33] tokens used: 91,818
[2025-10-06T10:17:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:17:36] thinking

**Preparing line references in docs**
[2025-10-06T10:17:37] exec bash -lc "nl -ba docs/development/c_to_pytorch_config_map.md | sed -n '1,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:17:38] bash -lc "nl -ba docs/development/c_to_pytorch_config_map.md | sed -n '1,80p'" succeeded in 680ms:
     1	# C-CLI to PyTorch Configuration Map
     2	
     3	## Critical Importance Notice
     4	
     5	**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**
     6	
     7	Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
     8	- Implicit pivot mode logic
     9	- Convention-dependent beam center calculations
    10	- Rotation axis defaults
    11	- Unit conversions
    12	
    13	## Quick Reference Table
    14	
    15	### Crystal Parameters
    16	
    17	| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
    18	|------------|---------------------|------------|------------------|----------------|
    19	| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
    20	| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T10:17:38] tokens used: 94,323
[2025-10-06T10:17:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:18:04] thinking

**Preparing detailed input.md content**
[2025-10-06T10:18:22] exec bash -lc "cat <<'EOF' > input.md
Summary: Capture C vs PyTorch scaling diagnostics for the supervisor command before touching simulator code.
Phase: Evidence
Focus: [CLI-FLAGS-003] Phase J — Intensity Scaling Evidence
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts:
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
- reports/2025-10-cli-flags/phase_j/scaling_chain.md
- reports/2025-10-cli-flags/phase_j/analyze_scaling.py
Do Now: CLI-FLAGS-003 Phase J1 — extend the existing trace harness to emit the full normalization chain, then run the C and PyTorch scaling traces for pixel (slow=1039, fast=685) and stash the raw logs in phase_j before editing any simulator code.
If Blocked: If the harness update fails, fall back to logging "'`steps`, `omega`, `r_e''^2`, and `fluence` via `scripts/debug_pixel_trace.py` (keep the same pixel), document the gap in `reports/2025-10-cli-flags/phase_j/attempted_scaling_notes.md`, and ping me before retrying.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:6 — New gap snapshot elevates the 1.24538e5× scaling miss; Phase J is mandatory before implementation resumes.
- plans/active/cli-noise-pix0/plan.md:122 — Tasks J1–J3 spell out the evidence deliverables (C/Py logs, ratio analysis, fix_plan update) needed to unblock Phase K.
- docs/fix_plan.md:448 — Next actions explicitly require Phase J artifacts and Attempt #28 before we touch normalization code.
- specs/spec-a-core.md:446 — Spec defines the exact order of `I`, ω, r_e², and fluence application we must confirm via traces.
- docs/development/testing_strategy.md:51 — Parallel trace-driven validation is the SOP for physics gaps; we need a matched trace pair before hypothesising fixes.
- src/nanobrag_torch/simulator.py:904 — Current code divides by `steps` and applies ω; evidence must confirm whether this matches the C chain or if another factor is missing.
How-To Map:
- `export NB_C_BIN=./golden_suite_generator/nanoBragg; mkdir -p reports/2025-10-cli-flags/phase_j; $NB_C_BIN -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -dump_pixel 1039 685 > reports/2025-10-cli-flags/phase_j/trace_c_scaling.log`
- `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_e/trace_harness.py --pixel-slow 1039 --pixel-fast 685 --emit-scaling > reports/2025-10-cli-flags/phase_j/trace_py_scaling.log`
- `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log reports/2025-10-cli-flags/phase_j/trace_c_scaling.log --py-log reports/2025-10-cli-flags/phase_j/trace_py_scaling.log --out reports/2025-10-cli-flags/phase_j/scaling_chain.md`
Pitfalls To Avoid:
- Do not modify `src/nanobrag_torch/simulator.py` or other production code until Phase J evidence is complete.
- Skip pytest and nb-compare for this loop; Evidence phase forbids running tests.
- Keep `KMP_DUPLICATE_LIB_OK=TRUE` set for every Python invocation that touches torch.
- Preserve existing Phase H/I artifacts; store new logs under phase_j without overwriting prior evidence.
- Do not delete or rename files listed in docs/index.md, especially `loop.sh` and `input.md`.
- Avoid ad-hoc scripts outside `reports/2025-10-cli-flags/phase_j/`; place helpers there per plan.
- Maintain device/dtype neutrality when extending the harness; no `.cpu()` or `.item()` on gradient tensors.
- Ensure the harness reuses production helpers; no re-derived physics snippets violating instrumentation rule.
- Keep CLI arguments identical to the supervisor command to maintain parity with C.
- Document harness changes and command outputs in `reports/2025-10-cli-flags/phase_j/scaling_chain.md` so Attempt #28 can cite them directly.
Pointers:
- plans/active/cli-noise-pix0/plan.md:122 — Phase J checklist and artifact expectations.
- docs/fix_plan.md:448 — Next actions summary for CLI-FLAGS-003.
- reports/2025-10-cli-flags/phase_i/supervisor_command/README.md:1 — Baseline metrics motivating the scaling investigation.
- src/nanobrag_torch/simulator.py:1000 — Current normalization and scaling implementation for later comparison.
Next Up: After Phase J artifacts and fix_plan Attempt #28 are logged, move to Phase K1 (normalization fix) on a fresh loop.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:18:23] bash -lc "cat <<'EOF' > input.md
Summary: Capture C vs PyTorch scaling diagnostics for the supervisor command before touching simulator code.
Phase: Evidence
Focus: [CLI-FLAGS-003] Phase J — Intensity Scaling Evidence
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts:
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
- reports/2025-10-cli-flags/phase_j/scaling_chain.md
- reports/2025-10-cli-flags/phase_j/analyze_scaling.py
Do Now: CLI-FLAGS-003 Phase J1 — extend the existing trace harness to emit the full normalization chain, then run the C and PyTorch scaling traces for pixel (slow=1039, fast=685) and stash the raw logs in phase_j before editing any simulator code.
If Blocked: If the harness update fails, fall back to logging "'`steps`, `omega`, `r_e''^2`, and `fluence` via `scripts/debug_pixel_trace.py` (keep the same pixel), document the gap in `reports/2025-10-cli-flags/phase_j/attempted_scaling_notes.md`, and ping me before retrying.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:6 — New gap snapshot elevates the 1.24538e5× scaling miss; Phase J is mandatory before implementation resumes.
- plans/active/cli-noise-pix0/plan.md:122 — Tasks J1–J3 spell out the evidence deliverables (C/Py logs, ratio analysis, fix_plan update) needed to unblock Phase K.
- docs/fix_plan.md:448 — Next actions explicitly require Phase J artifacts and Attempt #28 before we touch normalization code.
- specs/spec-a-core.md:446 — Spec defines the exact order of `I`, ω, r_e², and fluence application we must confirm via traces.
- docs/development/testing_strategy.md:51 — Parallel trace-driven validation is the SOP for physics gaps; we need a matched trace pair before hypothesising fixes.
- src/nanobrag_torch/simulator.py:904 — Current code divides by `steps` and applies ω; evidence must confirm whether this matches the C chain or if another factor is missing.
How-To Map:
- `export NB_C_BIN=./golden_suite_generator/nanoBragg; mkdir -p reports/2025-10-cli-flags/phase_j; $NB_C_BIN -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -dump_pixel 1039 685 > reports/2025-10-cli-flags/phase_j/trace_c_scaling.log`
- `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_e/trace_harness.py --pixel-slow 1039 --pixel-fast 685 --emit-scaling > reports/2025-10-cli-flags/phase_j/trace_py_scaling.log`
- `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log reports/2025-10-cli-flags/phase_j/trace_c_scaling.log --py-log reports/2025-10-cli-flags/phase_j/trace_py_scaling.log --out reports/2025-10-cli-flags/phase_j/scaling_chain.md`
Pitfalls To Avoid:
- Do not modify `src/nanobrag_torch/simulator.py` or other production code until Phase J evidence is complete.
- Skip pytest and nb-compare for this loop; Evidence phase forbids running tests.
- Keep `KMP_DUPLICATE_LIB_OK=TRUE` set for every Python invocation that touches torch.
- Preserve existing Phase H/I artifacts; store new logs under phase_j without overwriting prior evidence.
- Do not delete or rename files listed in docs/index.md, especially `loop.sh` and `input.md`.
- Avoid ad-hoc scripts outside `reports/2025-10-cli-flags/phase_j/`; place helpers there per plan.
- Maintain device/dtype neutrality when extending the harness; no `.cpu()` or `.item()` on gradient tensors.
- Ensure the harness reuses production helpers; no re-derived physics snippets violating instrumentation rule.
- Keep CLI arguments identical to the supervisor command to maintain parity with C.
- Document harness changes and command outputs in `reports/2025-10-cli-flags/phase_j/scaling_chain.md` so Attempt #28 can cite them directly.
Pointers:
- plans/active/cli-noise-pix0/plan.md:122 — Phase J checklist and artifact expectations.
- docs/fix_plan.md:448 — Next actions summary for CLI-FLAGS-003.
- reports/2025-10-cli-flags/phase_i/supervisor_command/README.md:1 — Baseline metrics motivating the scaling investigation.
- src/nanobrag_torch/simulator.py:1000 — Current normalization and scaling implementation for later comparison.
Next Up: After Phase J artifacts and fix_plan Attempt #28 are logged, move to Phase K1 (normalization fix) on a fresh loop.
EOF
' succeeded in 954ms:

[2025-10-06T10:18:23] tokens used: 99,823
[2025-10-06T10:18:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:18:28] thinking

**Counting lines in input file**
[2025-10-06T10:18:28] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:18:29] bash -lc 'wc -l input.md' succeeded in 727ms:
      40 input.md
[2025-10-06T10:18:29] tokens used: 194,497
[2025-10-06T10:18:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:18:37] thinking

**Expanding input.md for length**
[2025-10-06T10:19:03] exec bash -lc "cat <<'EOF' > input.md
Summary: Capture C vs PyTorch scaling diagnostics for the supervisor command before touching simulator code. Establish the first mismatched factor in the normalization chain so we can plan fixes confidently.
Phase: Evidence
Focus: [CLI-FLAGS-003] Phase J — Intensity Scaling Evidence
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts:
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
- reports/2025-10-cli-flags/phase_j/scaling_chain.md
- reports/2025-10-cli-flags/phase_j/analyze_scaling.py
- reports/2025-10-cli-flags/phase_j/attempted_scaling_notes.md (only if fallback path required)
Do Now: CLI-FLAGS-003 Phase J1 — extend the existing trace harness to emit the full normalization chain, then run the C and PyTorch scaling traces for pixel (slow=1039, fast=685) and stash the raw logs in phase_j before editing any simulator code or tests.
If Blocked: If the harness update fails, fall back to logging "'`steps`, `omega`, `r_e''^2`, and `fluence` via `scripts/debug_pixel_trace.py` for the same pixel, capture everything under `reports/2025-10-cli-flags/phase_j/attempted_scaling_notes.md`, and ping me before attempting another change.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:6 — The 1.24538e5× scaling miss is now the top blocker for Goal #1; Phase J must happen before any fixes land.
- plans/active/cli-noise-pix0/plan.md:122 — Tasks J1–J3 detail the evidence package (C/Py logs, ratio analysis, fix_plan update) required to unblock normalization work.
- docs/fix_plan.md:448 — Next actions explicitly command us to deliver Phase J artifacts and log Attempt #28 before touching implementation; ignoring this would desync the living plan.
- specs/spec-a-core.md:446 — Normative definition of the intensity accumulator clarifies the order of ω, r_e², and fluence multipliers we have to match.
- docs/development/testing_strategy.md:51 — Parallel trace-driven validation is the mandated debugging workflow; our harness updates must satisfy it.
- src/nanobrag_torch/simulator.py:904 — Current normalization divides by `steps` and applies ω; the trace needs to confirm whether this matches C step-for-step.

How-To Map:
- Step 1 — Prepare output directory: `mkdir -p reports/2025-10-cli-flags/phase_j`
- Step 2 — Run the canonical C trace with scaling focus:
  ```bash
  export NB_C_BIN=./golden_suite_generator/nanoBragg
  $NB_C_BIN '"\\
    -mat A.mat \\
    -floatfile img.bin \\
    -hkl scaled.hkl \\
    -nonoise \\
    -nointerpolate \\
    -oversample 1 \\
    -exposure 1 \\
    -flux 1e18 \\
    -beamsize 1.0 \\
    -spindle_axis -1 0 0 \\
    -Xbeam 217.742295 \\
    -Ybeam 213.907080 \\
    -distance 231.274660 \\
    -lambda 0.976800 \\
    -pixel 0.172 \\
    -detpixels_x 2463 \\
    -detpixels_y 2527 \\
    -odet_vector -0.000088 0.004914 -0.999988 \\
    -sdet_vector -0.005998 -0.999970 -0.004913 \\
    -fdet_vector 0.999982 -0.005998 -0.000118 \\
    -pix0_vector_mm -216.336293 215.205512 -230.200866 \\
    -beam_vector 0.00051387949 0.0 -0.99999986 \\
    -Na 36 \\
    -Nb 47 \\
    -Nc 29 \\
    -osc 0.1 \\
    -phi 0 \\
    -phisteps 10 \\
    -detector_rotx 0 \\
    -detector_roty 0 \\
    -detector_rotz 0 \\
    -twotheta 0 \\
    -dump_pixel 1039 685 \\
    > reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
  "'```
- Step 3 — Update `reports/2025-10-cli-flags/phase_e/trace_harness.py` so it prints `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e_squared`, `fluence`, and the intermediate intensities. Keep the instrumentation rule: reuse production helpers, no re-derived physics.
- Step 4 — Run the PyTorch harness with the same pixel and write the log:
  ```bash
  KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src '"\\
    python reports/2025-10-cli-flags/phase_e/trace_harness.py \\
    --pixel-slow 1039 \\
    --pixel-fast 685 \\
    --emit-scaling \\
    > reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
  "'```
- Step 5 — Build the ratio table and Markdown summary:
  ```bash
  KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src '"\\
    python reports/2025-10-cli-flags/phase_j/analyze_scaling.py \\
    --c-log reports/2025-10-cli-flags/phase_j/trace_c_scaling.log \\
    --py-log reports/2025-10-cli-flags/phase_j/trace_py_scaling.log \\
    --out reports/2025-10-cli-flags/phase_j/scaling_chain.md
  "'```
- Step 6 — Append the key deltas and artifact list to docs/fix_plan.md Attempt #28 once the analysis is ready (do not change simulator code in this loop).

Pitfalls To Avoid:
- Do not modify `src/nanobrag_torch/simulator.py` yet; Evidence loop ends before implementation.
- Skip pytest and nb-compare entirely; running tests violates the Evidence phase gate.
- Always set `KMP_DUPLICATE_LIB_OK=TRUE` before importing torch to avoid MKL crashes.
- Keep the supervisor command arguments identical between C and PyTorch runs; even tiny deviations invalidate parity.
- Do not overwrite Phase H/I logs — store new assets under `phase_j/` only.
- Avoid `.cpu()`, `.cuda()`, or `.item()` on tensors that might become differentiable; the harness should remain device-neutral.
- Respect the instrumentation rule: reuse production helpers, no ad-hoc recomputation of physics constants.
- Do not delete or rename any files referenced in `docs/index.md`; Protected Assets rule still applies.
- Record every command (success or failure) in the scaling Markdown so Attempt #28 has a complete audit trail.
- Remember this is a single loop — no branching into Phase K tasks until the evidence is logged and acknowledged.

Pointers:
- plans/active/cli-noise-pix0/plan.md:122 — Full Phase J checklist and exit criteria.
- docs/fix_plan.md:448 — Next actions bound to Phase J artifacts (Attempt #28 expectations).
- reports/2025-10-cli-flags/phase_i/supervisor_command/README.md:1 — Baseline parity failure metrics (sum_ratio 124,538×) we are explaining.
- src/nanobrag_torch/simulator.py:904 — Present normalization path to compare against trace findings later.
- specs/spec-a-core.md:446 — Normative description of `I` and scaling factors to keep in mind while instrumenting.

Next Up: After Phase J artifacts are captured and Attempt #28 is logged, the following loop should tackle Phase K1 (implement the normalization fix using the new evidence) on a fresh pass.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:04] bash -lc "cat <<'EOF' > input.md
Summary: Capture C vs PyTorch scaling diagnostics for the supervisor command before touching simulator code. Establish the first mismatched factor in the normalization chain so we can plan fixes confidently.
Phase: Evidence
Focus: [CLI-FLAGS-003] Phase J — Intensity Scaling Evidence
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts:
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
- reports/2025-10-cli-flags/phase_j/scaling_chain.md
- reports/2025-10-cli-flags/phase_j/analyze_scaling.py
- reports/2025-10-cli-flags/phase_j/attempted_scaling_notes.md (only if fallback path required)
Do Now: CLI-FLAGS-003 Phase J1 — extend the existing trace harness to emit the full normalization chain, then run the C and PyTorch scaling traces for pixel (slow=1039, fast=685) and stash the raw logs in phase_j before editing any simulator code or tests.
If Blocked: If the harness update fails, fall back to logging "'`steps`, `omega`, `r_e''^2`, and `fluence` via `scripts/debug_pixel_trace.py` for the same pixel, capture everything under `reports/2025-10-cli-flags/phase_j/attempted_scaling_notes.md`, and ping me before attempting another change.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:6 — The 1.24538e5× scaling miss is now the top blocker for Goal #1; Phase J must happen before any fixes land.
- plans/active/cli-noise-pix0/plan.md:122 — Tasks J1–J3 detail the evidence package (C/Py logs, ratio analysis, fix_plan update) required to unblock normalization work.
- docs/fix_plan.md:448 — Next actions explicitly command us to deliver Phase J artifacts and log Attempt #28 before touching implementation; ignoring this would desync the living plan.
- specs/spec-a-core.md:446 — Normative definition of the intensity accumulator clarifies the order of ω, r_e², and fluence multipliers we have to match.
- docs/development/testing_strategy.md:51 — Parallel trace-driven validation is the mandated debugging workflow; our harness updates must satisfy it.
- src/nanobrag_torch/simulator.py:904 — Current normalization divides by `steps` and applies ω; the trace needs to confirm whether this matches C step-for-step.

How-To Map:
- Step 1 — Prepare output directory: `mkdir -p reports/2025-10-cli-flags/phase_j`
- Step 2 — Run the canonical C trace with scaling focus:
  ```bash
  export NB_C_BIN=./golden_suite_generator/nanoBragg
  $NB_C_BIN '"\\
    -mat A.mat \\
    -floatfile img.bin \\
    -hkl scaled.hkl \\
    -nonoise \\
    -nointerpolate \\
    -oversample 1 \\
    -exposure 1 \\
    -flux 1e18 \\
    -beamsize 1.0 \\
    -spindle_axis -1 0 0 \\
    -Xbeam 217.742295 \\
    -Ybeam 213.907080 \\
    -distance 231.274660 \\
    -lambda 0.976800 \\
    -pixel 0.172 \\
    -detpixels_x 2463 \\
    -detpixels_y 2527 \\
    -odet_vector -0.000088 0.004914 -0.999988 \\
    -sdet_vector -0.005998 -0.999970 -0.004913 \\
    -fdet_vector 0.999982 -0.005998 -0.000118 \\
    -pix0_vector_mm -216.336293 215.205512 -230.200866 \\
    -beam_vector 0.00051387949 0.0 -0.99999986 \\
    -Na 36 \\
    -Nb 47 \\
    -Nc 29 \\
    -osc 0.1 \\
    -phi 0 \\
    -phisteps 10 \\
    -detector_rotx 0 \\
    -detector_roty 0 \\
    -detector_rotz 0 \\
    -twotheta 0 \\
    -dump_pixel 1039 685 \\
    > reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
  "'```
- Step 3 — Update `reports/2025-10-cli-flags/phase_e/trace_harness.py` so it prints `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e_squared`, `fluence`, and the intermediate intensities. Keep the instrumentation rule: reuse production helpers, no re-derived physics.
- Step 4 — Run the PyTorch harness with the same pixel and write the log:
  ```bash
  KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src '"\\
    python reports/2025-10-cli-flags/phase_e/trace_harness.py \\
    --pixel-slow 1039 \\
    --pixel-fast 685 \\
    --emit-scaling \\
    > reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
  "'```
- Step 5 — Build the ratio table and Markdown summary:
  ```bash
  KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src '"\\
    python reports/2025-10-cli-flags/phase_j/analyze_scaling.py \\
    --c-log reports/2025-10-cli-flags/phase_j/trace_c_scaling.log \\
    --py-log reports/2025-10-cli-flags/phase_j/trace_py_scaling.log \\
    --out reports/2025-10-cli-flags/phase_j/scaling_chain.md
  "'```
- Step 6 — Append the key deltas and artifact list to docs/fix_plan.md Attempt #28 once the analysis is ready (do not change simulator code in this loop).

Pitfalls To Avoid:
- Do not modify `src/nanobrag_torch/simulator.py` yet; Evidence loop ends before implementation.
- Skip pytest and nb-compare entirely; running tests violates the Evidence phase gate.
- Always set `KMP_DUPLICATE_LIB_OK=TRUE` before importing torch to avoid MKL crashes.
- Keep the supervisor command arguments identical between C and PyTorch runs; even tiny deviations invalidate parity.
- Do not overwrite Phase H/I logs — store new assets under `phase_j/` only.
- Avoid `.cpu()`, `.cuda()`, or `.item()` on tensors that might become differentiable; the harness should remain device-neutral.
- Respect the instrumentation rule: reuse production helpers, no ad-hoc recomputation of physics constants.
- Do not delete or rename any files referenced in `docs/index.md`; Protected Assets rule still applies.
- Record every command (success or failure) in the scaling Markdown so Attempt #28 has a complete audit trail.
- Remember this is a single loop — no branching into Phase K tasks until the evidence is logged and acknowledged.

Pointers:
- plans/active/cli-noise-pix0/plan.md:122 — Full Phase J checklist and exit criteria.
- docs/fix_plan.md:448 — Next actions bound to Phase J artifacts (Attempt #28 expectations).
- reports/2025-10-cli-flags/phase_i/supervisor_command/README.md:1 — Baseline parity failure metrics (sum_ratio 124,538×) we are explaining.
- src/nanobrag_torch/simulator.py:904 — Present normalization path to compare against trace findings later.
- specs/spec-a-core.md:446 — Normative description of `I` and scaling factors to keep in mind while instrumenting.

Next Up: After Phase J artifacts are captured and Attempt #28 is logged, the following loop should tackle Phase K1 (implement the normalization fix using the new evidence) on a fresh pass.
EOF
' succeeded in 932ms:

[2025-10-06T10:19:04] tokens used: 196,719
[2025-10-06T10:19:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:07] thinking

**Counting lines**
[2025-10-06T10:19:08] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:09] bash -lc 'wc -l input.md' succeeded in 702ms:
     103 input.md
[2025-10-06T10:19:09] tokens used: 199,420
[2025-10-06T10:19:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:12] thinking

**Checking git status before updating documentation**
[2025-10-06T10:19:13] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:14] bash -lc 'git status --short' succeeded in 748ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T10:19:14] tokens used: 199,644
[2025-10-06T10:19:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:18] thinking

**Documenting plan update in memory file**
[2025-10-06T10:19:25] exec bash -lc "cat <<'EOF' >> galph_memory.md
## 2025-10-19 (galph loop — Phase J directive)
- "'`git pull --rebase` was clean; reviewed CLAUDE guardrails, spec shards, arch.md, config map, debugging + testing strategy, fix_plan, and active plans before action.
- Deep-dive confirmed Goal #1 is now blocked solely by a 1.24538e5× intensity gap even after polarization parity; Goal #2 (vectorization) remains paused until CLI parity lands (Phase A evidence still outstanding).
- Reviewed Ralph’s recent commits (`e8146c2`, `beadffc`): polarization default fix + new tests look solid; nb-compare tooling patch captured parity failure evidence without regressions. No course correction needed, but scaling issue persists.
- Updated `plans/active/cli-noise-pix0/plan.md` with new Phases J–L covering scaling evidence → normalization implementation → final parity; marked I3 as blocked and refreshed context to emphasise the scaling gap.
- Synced `docs/fix_plan.md` Next Actions with the Phase J checklist and noted that Attempt #27 directives are superseded; Phase K work now gated on Attempt #28 evidence.
- Regenerated `input.md` (Evidence phase) instructing Ralph to capture C/Py scaling traces, build `scaling_chain.md`, and log Attempt #28 before any simulator edits.
- Follow-ups for Ralph: deliver plan tasks J1–J3 (logs + analysis + fix_plan update) under `reports/2025-10-cli-flags/phase_j/`, then pause for supervisor review before touching normalization code.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:26] bash -lc "cat <<'EOF' >> galph_memory.md
## 2025-10-19 (galph loop — Phase J directive)
- "'`git pull --rebase` was clean; reviewed CLAUDE guardrails, spec shards, arch.md, config map, debugging + testing strategy, fix_plan, and active plans before action.
- Deep-dive confirmed Goal #1 is now blocked solely by a 1.24538e5× intensity gap even after polarization parity; Goal #2 (vectorization) remains paused until CLI parity lands (Phase A evidence still outstanding).
- Reviewed Ralph’s recent commits (`e8146c2`, `beadffc`): polarization default fix + new tests look solid; nb-compare tooling patch captured parity failure evidence without regressions. No course correction needed, but scaling issue persists.
- Updated `plans/active/cli-noise-pix0/plan.md` with new Phases J–L covering scaling evidence → normalization implementation → final parity; marked I3 as blocked and refreshed context to emphasise the scaling gap.
- Synced `docs/fix_plan.md` Next Actions with the Phase J checklist and noted that Attempt #27 directives are superseded; Phase K work now gated on Attempt #28 evidence.
- Regenerated `input.md` (Evidence phase) instructing Ralph to capture C/Py scaling traces, build `scaling_chain.md`, and log Attempt #28 before any simulator edits.
- Follow-ups for Ralph: deliver plan tasks J1–J3 (logs + analysis + fix_plan update) under `reports/2025-10-cli-flags/phase_j/`, then pause for supervisor review before touching normalization code.
EOF
' succeeded in 828ms:

[2025-10-06T10:19:26] tokens used: 200,353
[2025-10-06T10:19:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:30] thinking

**Reviewing changes before commit**
[2025-10-06T10:19:31] exec bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:31] bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' succeeded in 704ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184..38972db 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@ Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for sup
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
[2025-10-06T10:19:31] tokens used: 200,886
[2025-10-06T10:19:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:36] thinking

**Verifying documentation changes**
[2025-10-06T10:19:37] exec bash -lc 'git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:38] bash -lc 'git diff docs/fix_plan.md' succeeded in 728ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1..2bc43db 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
[2025-10-06T10:19:38] tokens used: 202,972
[2025-10-06T10:19:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:41] thinking

**Verifying changes with git diff**
[2025-10-06T10:19:42] exec bash -lc 'git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:42] bash -lc 'git diff input.md' succeeded in 723ms:
diff --git a/input.md b/input.md
index 8b2a640..4e08e48 100644
--- a/input.md
+++ b/input.md
@@ -1,143 +1,103 @@
-Summary: Generate definitive nb-compare evidence for the supervisor CLI command (Phase I3) and package it for plan closure review.
-Summary: Confirm polarization parity, pix0 alignment, and noise suppression while keeping artifacts organized under reports/.
-Phase: Validation
-Focus: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm (Phase I3 final parity)
+Summary: Capture C vs PyTorch scaling diagnostics for the supervisor command before touching simulator code. Establish the first mismatched factor in the normalization chain so we can plan fixes confidently.
+Phase: Evidence
+Focus: [CLI-FLAGS-003] Phase J — Intensity Scaling Evidence
 Branch: feature/spec-based-2
-Mapped tests: tests/test_cli_flags.py::TestCLIPolarization::test_default_polarization_parity
-Mapped tests: pytest --collect-only -q
-Artifacts: reports/2025-10-cli-flags/phase_i/supervisor_command/
-Artifacts: reports/2025-10-cli-flags/phase_i/supervisor_command/logs/
-Artifacts: reports/2025-10-cli-flags/phase_i/supervisor_command/artifacts/
-Do Now: [CLI-FLAGS-003] Phase I3 final parity — run `KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg nb-compare --outdir reports/2025-10-cli-flags/phase_i/supervisor_command --save-diff --threshold 0.999 -- -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0`)
-Do Now: Store stdout/stderr produced by nb-compare inside reports/2025-10-cli-flags/phase_i/supervisor_command/logs/ for later reference.
[2025-10-06T10:19:42] tokens used: 204,172
[2025-10-06T10:19:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:46] thinking

**Verifying staged changes**
[2025-10-06T10:19:46] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:47] bash -lc 'git status --short' succeeded in 762ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T10:19:47] tokens used: 206,967
[2025-10-06T10:19:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:50] thinking

**Staging all changes**
[2025-10-06T10:19:52] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:53] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 716ms:

[2025-10-06T10:19:53] tokens used: 207,227
[2025-10-06T10:19:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:19:56] thinking

**Committing with specified message**
[2025-10-06T10:19:57] exec bash -lc 'git commit -m "SUPERVISOR: Phase J gating - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:19:58] bash -lc 'git commit -m "SUPERVISOR: Phase J gating - tests: not run"' succeeded in 707ms:
[feature/spec-based-2 6791be4] SUPERVISOR: Phase J gating - tests: not run
 4 files changed, 148 insertions(+), 143 deletions(-)
[2025-10-06T10:19:58] tokens used: 207,455
[2025-10-06T10:19:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:20:01] thinking

**Preparing to push changes**
[2025-10-06T10:20:02] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T10:20:05] bash -lc 'git push' succeeded in 3.40s:
To github.com:hoidn/nanoBragg.git
   4d3ee81..6791be4  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T10:20:05] tokens used: 207,688
[2025-10-06T10:20:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |


[2025-10-06T10:20:23] thinking

**Summarizing analysis and plan updates**

I'll organize the final response by detailing Step 1’s key findings on intensity scaling gaps and possible approaches, summarize Step 2’s coin review and recent commits, update on plan modifications with precise file and line references, and outline next steps for Ralph—all while noting that no tests have run yet and including commit info.
[2025-10-06T10:20:23] codex

**Findings**
- CLI parity still fails by 1.24538e5× intensity (sum_ratio) even after polarization fixes; inspection of `src/nanobrag_torch/simulator.py:904` shows steps/ω scaling but we lack evidence on where the normalization diverges from the spec chain (`specs/spec-a-core.md:446`). Primary approach: gather matched scaling traces and ratio analysis before touching implementation.
- Long-term Goal #2 (vectorization) remains paused because Phase A evidence in `plans/active/vectorization.md:13` hasn’t started; we should resume only after CLI parity closes.
- Parallel trace workflow from `docs/development/testing_strategy.md:51` stays mandatory; Phase J will satisfy the Golden trace requirements and feed later fixes.

**Plan Updates**
- Added Phases J–L to the CLI plan so we have explicit evidence → implementation → parity closure flow; see `plans/active/cli-noise-pix0/plan.md:122` for the new checklist.
- Synced `[CLI-FLAGS-003]` next actions with the Plan J directive and noted that Attempt #27 instructions are superseded (`docs/fix_plan.md:448` and `docs/fix_plan.md:479`).
- Wrote `input.md` directing Ralph to execute Phase J1–J3 (scaling traces, ratio script, Attempt #28 log).

**Ralph Next Steps**
1. Extend the trace harness and capture the C/Py scaling logs plus `scaling_chain.md` (Phase J1–J2).
2. Log Attempt #28 in `docs/fix_plan.md` once analysis is ready, then pause for review before any normalization edits.

**Meta**
- Commit: `6791be4 SUPERVISOR: Phase J gating - tests: not run`.
- Tests: not run (Evidence phase only).
[2025-10-06T10:20:25] tokens used: 208,909
[2025-10-06T10:20:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 40e2da1468c4324dadf95215871ee484526fd76e..2bc43db3e947eac83824e02fe56c94c4c080175b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: Debug the 124,538× intensity scaling parity failure discovered in Attempt #27. Switch to debug.md prompt, generate parallel traces for on-peak pixels, and audit `simulator.py` final scaling logic (steps normalization, r_e², fluence, last-value Ω/polarization).
+- Next Actions (2025-10-19): Follow `plans/active/cli-noise-pix0/plan.md` Phase J before any implementation:
+  1. Capture C/PyTorch scaling traces for pixel (1039,685) logging `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, and `fluence` (artifact: `reports/2025-10-cli-flags/phase_j/trace_*_scaling.log`).
+  2. Produce `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with ratio analysis pinpointing the first mismatched factor; raise Attempt #28 once published.
+  3. Only after Phase J evidence, proceed to Phase K implementation tasks (normalization fix, regression tests, doc updates) and rerun Phase L parity command to retire Attempt #27 failure.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
@@ -476,7 +479,7 @@
         3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
         4. Missing last-value Ω/polarization multiply (per spec § oversample_* semantics with oversample=1)
       - **Tooling success:** nb-compare now handles non-standard detector dimensions (2463×2527 via -detpixels_x/-detpixels_y)
-    Next Actions: Execute parallel trace debugging (debug.md prompt) for on-peak pixel (C max at ~(452,532) or PyTorch max at (1039,685)). Compare step-by-step scaling: fluence calc, steps division, r_e² multiply, Ω/polarization last-value logic. Target finding first divergence in `simulator.py` final scaling code.
+    Next Actions: Superseded by 2025-10-19 directive; follow Phase J checklist in `plans/active/cli-noise-pix0/plan.md` before any implementation work.
   * [2025-10-17] Attempt #26 (ralph) — Result: success (Phase I polarization defaults complete). **BeamConfig.polarization_factor default aligned with C polar=1.0.**
     Metrics: CLI polarization tests 3/3 passed. Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning). Test collection: 632 tests collected.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8eb3184728bdd52fdf6cde77ce0c9faeb55e7994..38972dbec087ed0e99ef02aeca62e01222107043
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -3,6 +3,7 @@
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
 - Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
+- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 
 ### Phase A — Requirements & Trace Alignment
@@ -114,6 +115,39 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| I1 | Audit polarization inputs | [X] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
-| I2 | Implement polarization parity | [X] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
-| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
+| I2 | Implement polarization parity | [D] | ✅ Completed 2025-10-17. Updated BeamConfig.polarization_factor default to 1.0 (config.py:483-487). Added TestCLIPolarization with 3 tests (test_cli_flags.py:591-675). Tests verify default=1.0, -nopolar flag, and -polar override. |
+| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; blocked until Phase J evidence resolves normalization divergence. |
+
+### Phase J — Intensity Scaling Evidence
+Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
+Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
+Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| J1 | Capture single-pixel scaling traces | [ ] | Run C with `-dump_pixel 1039 685` (same supervisor command) and extend `trace_harness.py` to emit `steps`, `I_before_scaling`, `omega`, `polarization`, and intermediate sums. Store raw logs under `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log` and `trace_py_scaling.log`. |
+| J2 | Compute factor-by-factor ratios | [ ] | Author `reports/2025-10-cli-flags/phase_j/analyze_scaling.py` (CLI harness) to parse the Phase J traces, compute Py/C ratios for each factor, and write a Markdown table to `scaling_chain.md`. Include assertions that highlight the first ratio deviating >1e-6. |
+| J3 | Update fix_plan Attempt log | [ ] | Summarize findings in docs/fix_plan.md `[CLI-FLAGS-003]` Attempt #28, attaching artifact paths and marking I3 blocked pending Phase K implementation. |
+
+### Phase K — Normalization Implementation
+Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
+Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
+Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K1 | Implement normalization fix | [ ] | Modify `src/nanobrag_torch/simulator.py` per Phase J diagnosis (e.g., adjust `steps`, avoid double-multiplying omega, ensure r_e²/fluence ordering). Follow Runtime Guardrails: maintain vectorization and device neutrality. |
+| K2 | Add targeted regression tests | [ ] | Extend `tests/test_cli_flags.py` (or new `tests/test_cli_scaling.py`) with a normalized-intensity assertion using a reduced detector ROI, and add a micro test that checks `steps` division via a mock crystal (φ=2, mosaic=3). Capture pytest log under `reports/2025-10-cli-flags/phase_k/pytest.log`. |
+| K3 | Refresh documentation | [ ] | Update `README_PYTORCH.md` scaling section and add a note to `docs/architecture/pytorch_design.md` summarizing the normalization pipeline. Record evidence in `phase_k/notes.md`. |
+
+### Phase L — Final Parity & Regression Sweep
+Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
+Prereqs: Phases J–K complete; scaling regression tests green.
+Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
+| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
+| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   6791be4..a64029a  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=32...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=32
Updating a64029a..df979dc
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   a64029a..df979dc  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=32
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating df979dc..288a28b
Fast-forward
 docs/fix_plan.md                                   |  14 +
 plans/active/cli-noise-pix0/plan.md                |   6 +-
 .../2025-10-cli-flags/phase_j/analyze_scaling.py   | 187 +++++++++++++
 reports/2025-10-cli-flags/phase_j/scaling_chain.md |  30 ++
 .../2025-10-cli-flags/phase_j/trace_c_scaling.log  | 308 +++++++++++++++++++++
 .../2025-10-cli-flags/phase_j/trace_py_scaling.log |  51 ++++
 6 files changed, 593 insertions(+), 3 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_j/analyze_scaling.py
 create mode 100644 reports/2025-10-cli-flags/phase_j/scaling_chain.md
 create mode 100644 reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
 create mode 100644 reports/2025-10-cli-flags/phase_j/trace_py_scaling.log
From github.com:hoidn/nanoBragg
   df979dc..288a28b  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 288a28b..eadee8c
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   288a28b..eadee8c  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=33
Ralph completed iteration 32; proceeding to 33
