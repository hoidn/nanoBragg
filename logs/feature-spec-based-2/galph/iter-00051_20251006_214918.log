Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=51
To github.com:hoidn/nanoBragg.git
   bf42f7a..a341694  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T21:49:22] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T21:49:22] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: When the Phase is Evidence, you must not execute tests; any pytest command included here is provided for Ralph’s subsequent loop.
<Do Now guidelines>
Phase Gate (Evidence): If the active plan phase is Evidence, do not run pytest at all (including collection). Limit evidence gathering to non-test probes and command‑line tooling (e.g., scripts/validation/*, minimal parity CLIs). Do not include runnable tests in this loop.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T21:49:25] thinking

**Preparing to update repository**
[2025-10-06T21:49:26] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:28] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.24s:
Already up to date.
[2025-10-06T21:49:28] tokens used: 729

[2025-10-06T21:49:30] thinking

**Preparing to review memory files**
[2025-10-06T21:49:30] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:31] bash -lc 'cat galph_memory.md' succeeded in 696ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T21:49:31] tokens used: 1,537

[2025-10-06T21:49:34] thinking

**Checking for recent updates**
[2025-10-06T21:49:34] exec bash -lc 'tail -n 200 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:35] bash -lc 'tail -n 200 galph_memory.md' succeeded in 749ms:
- Regenerated input.md (100 lines) directing Ralph to implement the precedence fix, update tests/test_cli_flags.py, capture artifacts under reports/2025-10-cli-flags/phase_h/implementation/, and log Attempt #24.
- No code changes performed; repo remains clean aside from plan/input updates.
- Follow-ups for Ralph: execute H3b2 implementation + H3b3 regression rewrite, rerun targeted pytest node, update docs/fix_plan.md Attempt log with metrics, and stash validation artifacts before moving to Phase H4.
## 2025-10-06 (galph loop — Phase H4 prep)
- `git pull --rebase` clean; reviewed required docs and active plans.
- Phase analysis: CLI parity still blocked by +3.9 mm pix0 Y delta despite H3b2 precedence fix; vectorization plan untouched (Phase A evidence pending).
- Coin flip = heads → reviewed Ralph’s last iterations (commits 5a9a9ea, d6f158c, 60852bb). Precedence implementation productive but regression test currently tolerates 5 mm delta — flagged for tightening post-fix.
- Updated `plans/active/cli-noise-pix0/plan.md` context + Phase H3b2/H3b3 entries to reflect completion and refocused H4 guidance on C beam-centre recomputation. Synced docs/fix_plan.md Next Actions and refreshed pix0_mapping_analysis.md checklist.
- Authored new input.md (100 lines) directing Ralph to port C’s post-rotation Fbeam/Sbeam recomputation, rerun traces, tighten pytest tolerances, and archive artifacts under `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/`.
- Reminder for next loop: verify H4 implementation lands, tighten test tolerance to ≤5e-5 m, capture Attempt #25 evidence. Vectorization plan remains frozen until CLI parity cleared.
## 2025-10-17 (galph loop — H4 decomposition)
- Coin flip → tails; skipped retrospective commit audit per instructions.
- Deep-dive vs long-term goals: Goal 1 still blocked by pix0 parity; traced 1.14 mm Y delta to missing post-rotation `newvector` projection and stale `distance_corrected` updates in `src/nanobrag_torch/models/detector.py:326`. Goal 2 (vectorization) unchanged—Phase A evidence pending once CLI parity unblocks bandwidth.
- Debugging hypotheses documented for Ralph: (1) Absence of C’s `newvector` recomputation keeps Fbeam/Sbeam stale (highest confidence; next step is to port nanoBragg.c:1822-1859). (2) `distance_corrected` not refreshed after recompute may subtly skew downstream geometry—verify once H4a lands. (3) Beam-centre tensors may retain MOSFLM offsets under CUSTOM; confirm during implementation. Highest-confidence path is hypothesis #1 with direct code port as confirming step.
- Updated `plans/active/cli-noise-pix0/plan.md` Phase H to split H4 into H4a/H4b/H4c with explicit artifacts, tolerance targets, and pytest expectations for the pix0 recomputation work.
- Synced `docs/fix_plan.md` Next Actions with the new H4a–H4c breakdown so the ledger points Ralph to the updated plan.
- Regenerated `input.md` (100 lines) instructing Ralph to execute CLI-FLAGS-003 Phase H4a implementation, gather parity traces, tighten regression tolerances, and log Attempt #25 once complete.
- Follow-ups for Ralph: implement H4a per plan, capture parity evidence under `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/`, tighten tests/test_cli_flags tolerance, and update docs/fix_plan.md with Attempt #25 metrics before moving to H4b.

## 2025-10-18 (galph loop — Phase H4 staging)
[2025-10-06T21:49:35] tokens used: 15,194

[2025-10-06T21:49:37] thinking

**Checking latest Galph memory entries**
[2025-10-06T21:49:38] exec bash -lc 'tail -n 60 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:39] bash -lc 'tail -n 60 galph_memory.md' succeeded in 718ms:
- `git pull --rebase` clean; no incoming changes.
- Reviewed CLI parity status vs long-term goal #1. Diffed `phase_h6` traces and confirmed first divergence occurs at `beam_center_m` (PyTorch logging millimetres vs C metres).
- Updated `plans/active/cli-noise-pix0/plan.md` to mark H6b complete (Attempt #37) and refocused H6c task description on trace analysis.
- Refreshed `docs/fix_plan.md` Next Actions so bullet #1 now targets H6c diff/analysis rather than instrumentation.
- Authored new `input.md` (Evidence phase) directing Ralph to produce the trace diff, document findings, and log Attempt #38.
- Follow-up for Ralph: execute H6c diff per memo, update `reports/2025-10-cli-flags/phase_h6/analysis.md` + `reports/2025-10-cli-flags/phase_h5/parity_summary.md`, then record Attempt #38 in fix_plan before moving to H6d/H5c.

## 2025-10-26 (galph loop — H6e pivot evidence setup)
- `git pull --rebase` clean; reviewed Phase H6 artifacts plus docs/index/spec/arch/config map per SOP.
- Deep dive on pix0 traces shows C runs supervisor command in SAMPLE pivot while PyTorch config still defaults to BEAM when custom detector vectors are provided; this aligns with Attempt #38 residual deltas.
- Updated `plans/active/cli-noise-pix0/plan.md` Phase H6 to mark H6c done and add new rows H6e–H6g covering pivot evidence, config fix, and post-fix trace reruns.
- Refreshed `docs/fix_plan.md` Next Actions to require H6e pivot proof, H6f pivot logic change + regression test, then H6g trace rerun before resuming Phase K work.
- Issued new Evidence-phase memo (`input.md`) directing Ralph to capture pivot parity evidence and log it under `reports/2025-10-cli-flags/phase_h6/pivot_parity.md` (no code edits yet).
- Next follow-up for Ralph: execute H6e (document pivot mismatch), update parity_summary + fix_plan Attempt log, then proceed to H6f implementation in a subsequent loop.

## 2025-10-06 (galph loop — H6f pivot enforcement prep)
- `git pull --rebase` clean; reviewed CLI parity backlog vs long-term goal #1 and vectorization plan status (no edits required yet).
- Deep dive on pix0 gap: Phase H6 evidence confirms C forces SAMPLE pivot when custom vectors are supplied; PyTorch still defaults to BEAM. Normalization remains blocked until pivot + lattice parity close.
- Coin flip → heads: inspected Ralph’s last two commits (`5d0a34d`, `0b7eaf7`). Evidence quality is solid, but parity visuals landed in repo root (`img*_*.png`, `intimage*.jpeg`, `noiseimage_preview.jpeg`) — flagged for relocation into reports before further work.
- Updated `docs/fix_plan.md` Next Actions for CLI-FLAGS-003 to mark H6e done, add H6f-prep cleanup, and call H6f/H6g/H6 progressions (Attempt #40 reserved for post-fix evidence).
[2025-10-06T21:49:39] tokens used: 18,041

[2025-10-06T21:49:43] thinking

**Preparing to review key documentation**
[2025-10-06T21:49:44] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:45] bash -lc 'cat docs/index.md' succeeded in 796ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T21:49:45] tokens used: 20,614

[2025-10-06T21:49:48] thinking

**Reading spec file**
[2025-10-06T21:49:49] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:50] bash -lc 'cat specs/spec-a.md' succeeded in 697ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T21:49:50] tokens used: 41,199

[2025-10-06T21:49:55] thinking

**Reviewing referenced specification shards**
[2025-10-06T21:49:56] exec bash -lc "sed -n '1,160p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:49:56] bash -lc "sed -n '1,160p' specs/spec-a-core.md" succeeded in 692ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-06T21:49:56] tokens used: 43,122

[2025-10-06T21:49:59] thinking

**Deciding sufficiency of spec reading**
[2025-10-06T21:49:59] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:00] bash -lc "sed -n '1,200p' arch.md" succeeded in 858ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T21:50:00] tokens used: 46,050

[2025-10-06T21:50:03] thinking

**Locating specific documentation file**
[2025-10-06T21:50:03] exec bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:04] bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" succeeded in 674ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T21:50:04] tokens used: 48,606

[2025-10-06T21:50:05] thinking

**Opening debugging documentation**
[2025-10-06T21:50:06] exec bash -lc "sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:07] bash -lc "sed -n '1,200p' docs/debugging/debugging.md" succeeded in 676ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T21:50:07] tokens used: 50,535

[2025-10-06T21:50:08] thinking

**Opening testing strategy document**
[2025-10-06T21:50:09] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:09] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 702ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T21:50:09] tokens used: 52,823

[2025-10-06T21:50:17] thinking

**Reviewing documentation and planning next steps**
[2025-10-06T21:50:18] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:18] bash -lc 'ls plans/active' succeeded in 734ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T21:50:18] tokens used: 74,416

[2025-10-06T21:50:21] thinking

**Reviewing plans for long-term goals**
[2025-10-06T21:50:22] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:22] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 693ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
[2025-10-06T21:50:22] tokens used: 74,746

[2025-10-06T21:50:26] thinking

**Reviewing vectorization plan document**
[2025-10-06T21:50:27] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:27] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 696ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T21:50:27] tokens used: 80,371

[2025-10-06T21:50:30] thinking

**Searching documentation for CLI-FLAGS-003**
[2025-10-06T21:50:30] exec bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:31] bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 764ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T21:50:31] tokens used: 82,985

[2025-10-06T21:50:33] thinking

**Locating relevant section near line 448**
[2025-10-06T21:50:33] exec bash -lc "sed -n '448,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:34] bash -lc "sed -n '448,620p' docs/fix_plan.md" succeeded in 689ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
[2025-10-06T21:50:34] tokens used: 83,239

[2025-10-06T21:50:36] thinking

**Preparing to review documentation**
[2025-10-06T21:50:37] exec bash -lc "sed -n '1,200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:38] bash -lc "sed -n '1,200p' docs/fix_plan.md" succeeded in 710ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T21:50:38] tokens used: 86,356

[2025-10-06T21:50:45] thinking

**Organizing analysis steps**
[2025-10-06T21:50:46] exec bash -lc 'rg "nonoise" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:46] bash -lc 'rg "nonoise" -n' succeeded in 735ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:711:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1185:        # CLI-FLAGS-003: Honor -nonoise flag
context:248:            if(strstr(argv[i], "-nonoise") )
context:2276:            if(strstr(argv[i], "-nonoise") )
context:2609:        printf("\t-nonoise         \tdisable generating the noisefile\n");
context:6274:            if(strstr(argv[i], "-nonoise") )
context:8812:***-nonoise***
specs/spec-a-core.md:520:    - If -nonoise is set, a noise image SHALL NOT be written even if -noisefile is specified; otherwise, the noise image SHALL be generated by Poisson (or Gaussian approximation for large means) about the float image, then offset, clipped, and written with the same header conventions.
noisify.c:247:            if(strstr(argv[i], "-nonoise") )
specs/spec-a-parallel.md:285:    - -water <µm> background term; -noisefile|-noiseimage enables Poisson noise; -nonoise disables; -seed controls RNG. Poisson exact for small means, rejection up to 1e6, Gaussian approximation beyond.
docs/fix_plan.md:21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
docs/fix_plan.md:448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
docs/fix_plan.md:455:  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
docs/fix_plan.md:456:  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
docs/fix_plan.md:759:      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
docs/fix_plan.md:760:      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
docs/fix_plan.md:764:      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
docs/fix_plan.md:765:      - Float/int/PGM images still generated when -nonoise is active
docs/fix_plan.md:786:      - ✅ -nonoise suppresses noisefile generation (suppress_noise=True)
[2025-10-06T21:50:46] tokens used: 89,588

[2025-10-06T21:50:49] thinking

**Examining scaling parity and cross-product rescale**
[2025-10-06T21:50:49] exec bash -lc "sed -n '640,760p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:50] bash -lc "sed -n '640,760p' src/nanobrag_torch/models/crystal.py" succeeded in 681ms:
        ):
            # Apply misset rotation to initial reciprocal vectors only
            # C-code reference (nanoBragg.c lines 2025-2034):
            # rotate(a_star,a_star,misset[1],misset[2],misset[3]);
            # rotate(b_star,b_star,misset[1],misset[2],misset[3]);
            # rotate(c_star,c_star,misset[1],misset[2],misset[3]);
            from ..utils.geometry import angles_to_rotation_matrix, rotate_umat
            # Preserve gradient flow: convert to tensor only if not already a tensor
            misset_rad = []
            for angle in self.config.misset_deg:
                if isinstance(angle, torch.Tensor):
                    # Already a tensor - just convert dtype/device while preserving gradients
                    angle_tensor = angle.to(dtype=self.dtype, device=self.device)
                else:
                    # Scalar - create new tensor
                    angle_tensor = torch.tensor(angle, dtype=self.dtype, device=self.device)
                misset_rad.append(torch.deg2rad(angle_tensor))
            R_misset = angles_to_rotation_matrix(misset_rad[0], misset_rad[1], misset_rad[2])
            a_star = rotate_umat(a_star, R_misset)
            b_star = rotate_umat(b_star, R_misset)
[2025-10-06T21:50:50] tokens used: 91,416

[2025-10-06T21:50:53] thinking

**Verifying Mosflm gating implementation**
[2025-10-06T21:50:54] exec bash -lc 'rg "mosflm_a_star" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:50:55] bash -lc 'rg "mosflm_a_star" -n src/nanobrag_torch' succeeded in 687ms:
src/nanobrag_torch/__main__.py:432:        config['mosflm_a_star'] = a_star  # numpy array from read_mosflm_matrix
src/nanobrag_torch/__main__.py:844:                mosflm_a_star=config.get('mosflm_a_star'),
src/nanobrag_torch/models/crystal.py:548:            hasattr(self.config, "mosflm_a_star") and self.config.mosflm_a_star is not None
src/nanobrag_torch/models/crystal.py:555:                self.config.mosflm_a_star,
src/nanobrag_torch/models/crystal.py:689:            hasattr(self.config, "mosflm_a_star") and self.config.mosflm_a_star is not None
src/nanobrag_torch/config.py:126:    mosflm_a_star: Optional[np.ndarray] = None  # MOSFLM a* reciprocal vector (Å⁻¹)
[2025-10-06T21:50:55] tokens used: 93,494

[2025-10-06T21:51:01] thinking

**Evaluating gating logic and plan status**
[2025-10-06T21:51:02] exec bash -lc "sed -n '1,200p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:03] bash -lc "sed -n '1,200p' src/nanobrag_torch/config.py" succeeded in 745ms:
"""
Configuration dataclasses for nanoBragg PyTorch implementation.

This module defines strongly-typed configuration objects that are intended to
replace the large set of local variables and command-line parsing logic found
in the original C main() function. Each dataclass will correspond to a physical
component of the simulation (Crystal, Detector, Beam).

For a detailed mapping of these dataclass fields to the original nanoBragg.c 
command-line flags, including implicit conventions and common pitfalls, see:
docs/development/c_to_pytorch_config_map.md

C-Code Implementation Reference (from nanoBragg.c):
The configuration is currently handled by a large argument-parsing loop
in main(). The future dataclasses will encapsulate the variables set
in this block.

Representative examples from nanoBragg.c (lines 506-1101):

// Crystal Parameters
[2025-10-06T21:51:03] tokens used: 94,184

[2025-10-06T21:51:05] thinking

**Checking default polarization in BeamConfig**
[2025-10-06T21:51:05] exec bash -lc "sed -n '220,360p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:06] bash -lc "sed -n '220,360p' src/nanobrag_torch/config.py" succeeded in 694ms:
    custom_beam_vector: Optional[Tuple[float, float, float]] = None  # Incident beam direction (unit vector)

    # Detector absorption parameters (AT-ABS-001)
    detector_abs_um: Optional[Union[float, torch.Tensor]] = None  # Attenuation depth in micrometers
    detector_thick_um: Union[float, torch.Tensor] = 0.0  # Detector thickness in micrometers
    detector_thicksteps: int = 1  # Number of thickness layers for absorption calculation

    # ROI (Region of Interest) parameters (AT-ROI-001)
    roi_xmin: Optional[int] = None  # Fast axis minimum pixel (inclusive, 0-based)
    roi_xmax: Optional[int] = None  # Fast axis maximum pixel (inclusive, 0-based)
    roi_ymin: Optional[int] = None  # Slow axis minimum pixel (inclusive, 0-based)
    roi_ymax: Optional[int] = None  # Slow axis maximum pixel (inclusive, 0-based)

    # Mask parameters (AT-ROI-001)
    mask_array: Optional[torch.Tensor] = None  # Binary mask array (0=skip, non-zero=include)

    def __post_init__(self):
        """Validate configuration and set defaults.

        Implements AT-GEO-002 automatic pivot selection logic:
[2025-10-06T21:51:06] tokens used: 97,121

[2025-10-06T21:51:10] thinking

**Searching for BeamConfig class**
[2025-10-06T21:51:11] exec bash -lc 'rg "polarization_factor" -n src/nanobrag_torch/config.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:12] bash -lc 'rg "polarization_factor" -n src/nanobrag_torch/config.py' succeeded in 731ms:
510:    polarization_factor: float = 0.0  # Kahn polarization factor K in [0,1] (0.0 = compute from geometry, matches C default behavior)
[2025-10-06T21:51:12] tokens used: 99,370

[2025-10-06T21:51:16] thinking

**Reviewing context defaults in code**
[2025-10-06T21:51:17] exec bash -lc "sed -n '460,540p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:18] bash -lc "sed -n '460,540p' src/nanobrag_torch/config.py" succeeded in 691ms:
        # Check if axis differs from the convention default
        if self.detector_convention == DetectorConvention.MOSFLM:
            # MOSFLM default is [0, 0, -1]
            is_default = (abs(axis[0]) < 1e-6 and abs(axis[1]) < 1e-6 and abs(axis[2] + 1.0) < 1e-6)
        elif self.detector_convention == DetectorConvention.DENZO:
            # DENZO default is [0, 0, -1] (same as MOSFLM)
            is_default = (abs(axis[0]) < 1e-6 and abs(axis[1]) < 1e-6 and abs(axis[2] + 1.0) < 1e-6)
        elif self.detector_convention == DetectorConvention.XDS:
            # XDS default is [1, 0, 0]
            is_default = (abs(axis[0] - 1.0) < 1e-6 and abs(axis[1]) < 1e-6 and abs(axis[2]) < 1e-6)
        elif self.detector_convention == DetectorConvention.DIALS:
            # DIALS default is [0, 1, 0]
            is_default = (abs(axis[0]) < 1e-6 and abs(axis[1] - 1.0) < 1e-6 and abs(axis[2]) < 1e-6)
        elif self.detector_convention == DetectorConvention.ADXV:
            # ADXV default is [-1, 0, 0]
            is_default = (abs(axis[0] + 1.0) < 1e-6 and abs(axis[1]) < 1e-6 and abs(axis[2]) < 1e-6)
        else:
            # CUSTOM convention or unknown - default to False
            return False

[2025-10-06T21:51:18] tokens used: 100,478

[2025-10-06T21:51:22] thinking

**Verifying plan against current code and documentation**
[2025-10-06T21:51:23] exec bash -lc "sed -n '1,160p' docs/development/pytorch_runtime_checklist.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:24] bash -lc "sed -n '1,160p' docs/development/pytorch_runtime_checklist.md" succeeded in 738ms:
# PyTorch Runtime Checklist

Use this quick checklist before and after every PyTorch simulator edit. It distills the authoritative guidance from
`docs/architecture/pytorch_design.md`, `CLAUDE.md`, and the testing strategy.

1. **Vectorization**
   - Do not reintroduce Python loops that duplicate work already handled by batched tensor code.
   - When adding a new flow (sources, phi, mosaic, oversample), extend the existing broadcast shapes instead of looping.
   - Verify `_compute_physics_for_position` receives tensors with the expected batch dimensions.

2. **Device & Dtype Neutrality**
   - **Default dtype is float32** for performance and memory efficiency. Precision-critical operations (gradient checks, metric duality) explicitly override to float64 where required.
   - Materialize configuration tensors (beam, detector, crystal) on the execution device before the main loop.
   - Avoid per-iteration `.to()`, `.cpu()`, `.cuda()`, or tensor factories (`torch.tensor(...)`) inside compiled regions; cache constants once.
   - Run CPU **and** CUDA smoke commands (`pytest -v -m gpu_smoke`) when a GPU is available.

3. **torch.compile Hygiene**
   - Watch the console for Dynamo “graph break” warnings; treat them as blockers.
   - Benchmarks should reuse compiled functions; avoid changing shapes every call unless batching logic handles it.

[2025-10-06T21:51:24] tokens used: 102,156

[2025-10-06T21:51:28] thinking

**Analyzing codebase for CLI flags and vectorization issues**
[2025-10-06T21:51:28] exec bash -lc "sed -n '360,460p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:29] bash -lc "sed -n '360,460p' src/nanobrag_torch/__main__.py" succeeded in 681ms:
                        help='Disable progress meter')
    parser.add_argument('-progress', action='store_true',
                        help='Enable progress meter')
    parser.add_argument('-seed', type=int,
                        help='Noise RNG seed')
    parser.add_argument('-show_config', '-echo_config', action='store_true',
                        help='Print configuration parameters for debugging')

    # Performance options (PERF-PYTORCH-006)
    parser.add_argument('-dtype', type=str, choices=['float32', 'float64'],
                        default='float32',
                        help='Floating point precision (float32 for speed, float64 for accuracy)')
    parser.add_argument('-device', type=str, choices=['cpu', 'cuda'],
                        default='cpu',
                        help='Device for computation (cpu or cuda)')

    # Explicitly handle unsupported flags from the spec
    parser.add_argument('-dispstep', dest='_unsupported_dispstep',
                        action=UnsupportedFlagAction,
                        supported_alternative='-dispsteps <int>',
[2025-10-06T21:51:29] tokens used: 102,926

[2025-10-06T21:51:36] thinking

**Investigating mosflm array usage**
[2025-10-06T21:51:37] exec bash -lc "sed -n '500,620p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:37] bash -lc "sed -n '500,620p' src/nanobrag_torch/models/crystal.py" succeeded in 666ms:
        # Calculate cell volume using C-code formula
        aavg = (alpha_rad + beta_rad + gamma_rad) / 2.0
        skew = (
            torch.sin(aavg)
            * torch.sin(aavg - alpha_rad)
            * torch.sin(aavg - beta_rad)
            * torch.sin(aavg - gamma_rad)
        )
        skew = torch.abs(skew)  # Handle negative values

        # Handle degenerate cases where skew approaches zero
        # PERF-PYTORCH-004 Phase 1: Use clamp_min instead of torch.maximum to avoid allocating tensors inside compiled graph
        skew = skew.clamp_min(1e-12)

        V = 2.0 * self.cell_a * self.cell_b * self.cell_c * torch.sqrt(skew)
        # Ensure volume is not too small
        # PERF-PYTORCH-004 Phase 1: Use clamp_min instead of torch.maximum to avoid allocating tensors inside compiled graph
        V = V.clamp_min(1e-6)
        V_star = 1.0 / V

[2025-10-06T21:51:37] tokens used: 104,344

[2025-10-06T21:51:43] thinking

**Reviewing gating and polarization implementation**
[2025-10-06T21:51:45] exec bash -lc 'rg "suppress_noise" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:45] bash -lc 'rg "suppress_noise" -n src/nanobrag_torch' succeeded in 757ms:
src/nanobrag_torch/__main__.py:711:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1186:        if config.get('noisefile') and not config.get('suppress_noise', False):
[2025-10-06T21:51:45] tokens used: 106,178

[2025-10-06T21:51:48] thinking

**Scrolling to line 1180**
[2025-10-06T21:51:49] exec bash -lc "sed -n '1160,1205p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:50] bash -lc "sed -n '1160,1205p' src/nanobrag_torch/__main__.py" succeeded in 673ms:
                filepath=config['intfile'],
                image_data=scaled_int,
                pixel_size_mm=detector_config.pixel_size_mm,
                distance_mm=detector_config.distance_mm,
                wavelength_angstrom=beam_config.wavelength_A,
                beam_center_x_mm=detector_config.beam_center_s,
                beam_center_y_mm=detector_config.beam_center_f,
                close_distance_mm=detector_config.close_distance_mm,
                phi_deg=config.get('phi_deg', 0.0),
                osc_start_deg=config.get('phi_deg', 0.0),
                osc_range_deg=config.get('osc_deg', 0.0),
                twotheta_deg=config.get('twotheta_deg', 0.0),
                convention=detector_config.detector_convention.name,
                scale=1.0,  # Already scaled
                adc_offset=0.0  # Already applied ADC
            )
            print(f"Wrote SMV image to {config['intfile']}")

        if config.get('pgmfile'):
            # Write PGM per AT-CLI-006
[2025-10-06T21:51:50] tokens used: 106,511

[2025-10-06T21:51:52] thinking

**Checking pix0_vector_mm support**
[2025-10-06T21:51:52] exec bash -lc 'rg "pix0_vector" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:51:53] bash -lc 'rg "pix0_vector" -n' succeeded in 747ms:
c_instrumentation.patch:69:         trace_vec("pix0_vector", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
c_instrumentation.patch:91:+        trace_vec("pix0_vector", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
c_instrumentation.patch:95:     Fclose         = -dot_product(pix0_vector,fdet_vector);
c_instrumentation.patch:116:+                            trace_vec("pix0_vector", pix0_vector[1], pix0_vector[2], pix0_vector[3]);
c_instrumentation.patch:128:                         pixel_pos[1] = Fdet*fdet_vector[1]+Sdet*sdet_vector[1]+Odet*odet_vector[1]+pix0_vector[1];
c_instrumentation.patch:129:                         pixel_pos[2] = Fdet*fdet_vector[2]+Sdet*sdet_vector[2]+Odet*odet_vector[2]+pix0_vector[2];
c_instrumentation.patch:130:                         pixel_pos[3] = Fdet*fdet_vector[3]+Sdet*sdet_vector[3]+Odet*odet_vector[3]+pix0_vector[3];
SPEC_PROMPT.md:65:  - Unsupported example flags: Explicitly list any flags present in the examples but not recognized by this code (e.g., `-pix0_vector_mm` or `-matrix` if absent), and explain the closest supported equivalent if any.
SPEC_PROMPT.md:86:  - Pixel center construction: 3D position formula from `Fdet`/`Sdet`/`Odet` and `pix0_vector`; curved detector alternative.
src/nanobrag_torch/__main__.py:187:    parser.add_argument('-pix0_vector', nargs=3, type=float,
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:462:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:557:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:558:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:560:    if args.pix0_vector:
src/nanobrag_torch/__main__.py:561:        config['custom_pix0_vector'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:562:        # pix0_vector is in meters, convert to config
src/nanobrag_torch/__main__.py:563:        config['pix0_override_m'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:564:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:566:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
[2025-10-06T21:51:53] tokens used: 107,245

[2025-10-06T21:52:00] thinking

**Verifying gating implementation timeline**

I'm focusing on whether the gating and polarization fixes were actually implemented and validated, given the plan's note about the F_latt mismatch. I'll check recent commit history with `git log` to confirm if gating was added or modified after the last plan update.
[2025-10-06T21:52:02] exec bash -lc 'git log --oneline | head -n 10' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:03] bash -lc 'git log --oneline | head -n 10' succeeded in 810ms:
a341694 [SYNC i=51] actor=galph status=running
bf42f7a [SYNC i=51] actor=ralph → next=galph status=ok ralph_commit=271e2b6
271e2b6 CLI-FLAGS-003 Phase K3d: dtype sensitivity evidence - dtype NOT root cause
2d82b59 [SYNC i=50] actor=ralph status=running
7c4a1e1 [SYNC i=50] actor=galph → next=ralph status=ok galph_commit=bf8add5
bf8add5 SUPERVISOR: CLI parity plan update - tests: not run
d8bed8a [SYNC i=50] actor=galph status=running
d24d039 [SYNC i=50] actor=ralph → next=galph status=ok ralph_commit=5ac737f
5ac737f docs/fix_plan.md: Add Attempt #43 for CLI-FLAGS-003 Phase K3a-K3b
a89f6fd CLI-FLAGS-003 Phase K3a-K3b: Guard MOSFLM rescale + align polarization defaults
[2025-10-06T21:52:03] tokens used: 170,430

[2025-10-06T21:52:07] thinking

**Verifying task completion from recent commits**
[2025-10-06T21:52:08] exec bash -lc 'rg "Attempt #43" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:09] bash -lc 'rg "Attempt #43" -n docs/fix_plan.md' succeeded in 706ms:
462:  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
648:  * [2025-11-06] Attempt #43 (ralph loop) — Result: **PARTIAL SUCCESS** (Phase K3a-K3b complete). **MOSFLM rescale guard implemented + polarization default aligned with C.**
[2025-10-06T21:52:09] tokens used: 174,855
[2025-10-06T21:52:11] exec bash -lc "sed -n '620,700p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:12] bash -lc "sed -n '620,700p' docs/fix_plan.md" succeeded in 691ms:
      - `reports/2025-10-cli-flags/phase_h6/post_fix/trace_diff.txt` - Line-by-line C vs PyTorch diff
      - `reports/2025-10-cli-flags/phase_h6/post_fix/metadata.json` - Quantitative delta metrics
      - `reports/2025-10-cli-flags/phase_h6/post_fix/env_snapshot.txt` - Reproducibility snapshot (commit, Python, PyTorch versions)
      - `reports/2025-10-cli-flags/phase_h6/post_fix/attempt_notes.md` - Complete evidence summary with metrics tables and next actions
    Observations/Hypotheses:
      - **Phase H6f pivot fix validated:** SAMPLE pivot forcing (Attempt #40) successfully eliminated the 1.14 mm pix0 error; residual deltas now dominated by numerical precision (~3 μm).
      - **Convention handling confirmed:** TRACE_PY shows `detector_convention=CUSTOM`, verifying custom vector presence correctly triggers CUSTOM mode and SAMPLE pivot enforcement.
      - **Beam center consistency:** Fclose/Sclose match exactly (0.0 delta), confirming CLI parsing and mm→m conversion are correct.
      - **Geometry stability:** close_distance delta of 2.84 μm and r_factor delta of 6.8e-8 demonstrate numerical stability across the detector geometry pipeline.
      - **No unit regressions:** All trace values in meters (as required by detector hybrid unit system); no millimeter/Angstrom confusion.
      - **Phase H6g exit criteria met:** |Δpix0| = 2.85 μm << 50 μm threshold; evidence artifacts archived; ready for Phase K2.
    Next Actions: **Phase K2 required** — With pix0 parity confirmed, regenerate scaling-chain analysis with corrected SAMPLE pivot traces. Execute Phase K2 checklist from `plans/active/cli-noise-pix0/plan.md`: (1) rerun PyTorch trace harness for pixel (1039,685) with final geometry, (2) diff F_latt components against C baseline, (3) update `reports/2025-10-cli-flags/phase_j/scaling_chain.md` with post-H6 comparison, (4) archive refreshed traces under `phase_k/f_latt_fix/`, (5) proceed to Phase K3 regression test once F_latt parity is restored.
  * [2025-10-06] Attempt #42 (ralph loop) — Result: **EVIDENCE COMPLETE** (Phase K2/K2b). **Critical finding: MOSFLM rescaling is NOT the root cause of F_latt_b error.**
    Metrics: Evidence-only loop (per supervisor directive). Scaling ratios: F_latt_b C=38.63 vs Py=46.98 (21.6% error), polar C=0.913 vs Py=1.0 (9.6% error), I_final C=446 vs Py=497 (11.4% error). MOSFLM lattice vector analysis reveals perfect magnitude match (|b|_C = |b|_Py = 31.310 Å), ruling out rescale hypothesis.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log` - Fresh PyTorch trace for pixel (1039, 685) with SAMPLE pivot
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` - Script demonstrating C user_cell=0 vs user_cell=1 rescaling behavior
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/orientation_delta.md` - MOSFLM lattice vector comparison showing zero magnitude deltas
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` - Updated scaling chain analysis (C vs PyTorch ratios)
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_summary.md` - Existing summary from prior phase (not refreshed this loop)
[2025-10-06T21:52:12] tokens used: 175,184

[2025-10-06T21:52:15] thinking

**Continuing to read for context**
[2025-10-06T21:52:16] exec bash -lc "sed -n '700,780p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:17] bash -lc "sed -n '700,780p' docs/fix_plan.md" succeeded in 736ms:
      - `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/diff.log` - 11 lines, only filename difference
      - `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md` - Authoritative evidence report with dot-product derivation
    Observations/Hypotheses:
      - **Re-confirms 2025-10-06 evidence:** C ignores `-pix0_vector_mm` when custom detector vectors are supplied
      - **Dot-product derivation performed:** If override (-0.216336, 0.215206, -0.230201) were projected onto fdet/sdet, expected Fbeam≈-0.217596 m, Sbeam≈-0.212772 m. Actual C values: Fbeam=0.217889 m, Sbeam=0.215043 m. **Mismatch proves override not applied.**
      - **Precedence logic:** `if(custom_vectors) {compute_from_xbeam_ybeam(); ignore_override();} else if(override) {apply_override();} else {use_convention();}`
      - **PyTorch parity status:** Phase H3b2 (commit d6f158c) correctly skips override when custom vectors present, **matching C behavior exactly**
      - **1.14 mm pix0 delta root cause:** Not due to override precedence (that logic is correct). Must trace to different issue in Phase K normalization or Phase L parity sweep.
    Next Actions:
      - Revert Attempt #29 (Phase H5b) so pix0 overrides are ignored whenever custom detector vectors are supplied, restoring C precedence (logs to `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`).
      - After the revert, capture new PyTorch traces (`reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-22/`) and update `phase_h5/parity_summary.md` with pix0/F_latt deltas (<5e-5 m, <1e-3 relative error).
      - Record the follow-up attempt in this entry and then resume Phase K normalization work once geometry parity is confirmed.
  * [2025-10-22] Attempt #31 (ralph loop) — Result: **SUCCESS** (Phase H5b revert complete). **Custom vector pix0 override precedence restored to match C behavior.**
    Metrics: Targeted pytest 4/4 passed in 2.43s (TestCLIPix0Override suite). Core tests: cli_flags 26/26, detector_geometry 12/12, crystal_geometry 19/19 (57 passed, 1 warning).
    Artifacts:
      - `src/nanobrag_torch/models/detector.py:518-540` - Restored custom-vector guard matching C precedence
      - `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log` - Regression test results post-revert
      - `reports/2025-10-cli-flags/phase_h5/implementation_notes.md` - Documents revert implementation
    Observations/Hypotheses:
      - **Revert complete:** pix0 override now correctly skipped when custom detector vectors are present
[2025-10-06T21:52:17] tokens used: 176,758

[2025-10-06T21:52:21] thinking

**Reviewing dtype sensitivity report**
[2025-10-06T21:52:22] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:23] bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep' succeeded in 748ms:
dtype_sensitivity.json
dtype_sensitivity.md
float32_run.log
float64_run.log
trace_float32.json
trace_float64.json
[2025-10-06T21:52:23] tokens used: 179,385

[2025-10-06T21:52:26] thinking

**Opening markdown file**
[2025-10-06T21:52:27] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sensitivity.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:27] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sensitivity.md' exited 1 in 692ms:
cat: reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sensitivity.md: No such file or directory
[2025-10-06T21:52:27] tokens used: 179,631

[2025-10-06T21:52:30] thinking

**Checking file presence and spelling**
[2025-10-06T21:52:31] exec bash -lc 'ls -l reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:31] bash -lc 'ls -l reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep' succeeded in 728ms:
total 56
-rw-r--r--  1 ollie  staff   784 Oct  6 14:48 dtype_sensitivity.json
-rw-r--r--  1 ollie  staff  6515 Oct  6 14:48 dtype_sensitivity.md
-rw-r--r--  1 ollie  staff  1142 Oct  6 14:48 float32_run.log
-rw-r--r--  1 ollie  staff  2201 Oct  6 14:48 float64_run.log
-rw-r--r--  1 ollie  staff   526 Oct  6 14:48 trace_float32.json
-rw-r--r--  1 ollie  staff   545 Oct  6 14:48 trace_float64.json
[2025-10-06T21:52:31] tokens used: 179,874

[2025-10-06T21:52:34] thinking

**Checking path quoting issues**
[2025-10-06T21:52:35] exec bash -lc "cat 'reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/dtype_sensitivity.md'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:36] bash -lc "cat 'reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/dtype_sensitivity.md'" succeeded in 702ms:
# CLI-FLAGS-003 Phase K3d: Dtype Sensitivity Analysis

## Executive Summary

**Finding:** Float64 precision does **NOT** resolve the F_latt_b discrepancy.

**Conclusion:** The 21.6% F_latt_b drift between C and PyTorch is NOT caused by floating-point precision limitations. The root cause lies elsewhere in the orientation/geometry pipeline, most likely the MOSFLM rescaling issue documented in Phase K2b.

## Test Configuration

- **Date:** 2025-10-06
- **Commit:** (current HEAD)
- **Target Pixel:** (133, 134) - on-peak pixel from Phase J/K traces
- **Device:** CPU (for determinism per testing_strategy.md §2.5.1)
- **Test Case:** Supervisor command configuration (MOSFLM A.mat, λ=0.9768 Å)

## Quantitative Results

### Miller Index Precision

[2025-10-06T21:52:36] tokens used: 180,306

[2025-10-06T21:52:40] thinking

**Investigating rescaling discrepancy reports**
[2025-10-06T21:52:41] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:41] bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix' succeeded in 680ms:
analyze_output.txt
analyze_scaling.py
c_image.npy
dtype_sweep
metrics_after.json
mosflm_rescale.py
orientation_delta.md
py_image.npy
scaling_chain.md
scaling_summary.md
test_metrics_failure.json
trace_diff.txt
trace_py_after.log
trace_py_after_133134.log
[2025-10-06T21:52:41] tokens used: 182,468

[2025-10-06T21:52:44] thinking

**Checking new logs in scaling_chain.md**
[2025-10-06T21:52:44] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:45] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md' succeeded in 684ms:
# Scaling Chain Analysis: C vs PyTorch

**Pixel:** (slow=1039, fast=685)

## Key Findings

**First Divergence:** `I_before_scaling`
- C value: 1.480792010454e+15
- PyTorch value: 1.806530429487e+14
- Ratio (Py/C): 1.219976e-01

**Final Intensity Ratio (Py/C):** 1.114e+00

## Full Factor Comparison

| Factor | C Value | PyTorch Value | Ratio (Py/C) | Match? |
|--------|---------|---------------|--------------|--------|
| I_before_scaling | 1.480792e+15 | 1.806530e+14 | 1.219976e-01 | ❌ |
| steps | 1.000000e+01 | 1.000000e+01 | 1.000000e+00 | ✅ |
| r_e_sqr | 7.940792e-30 | 7.940792e-30 | 1.000000e+00 | ✅ |
[2025-10-06T21:52:45] tokens used: 182,751

[2025-10-06T21:52:48] thinking

**Checking document version**
[2025-10-06T21:52:49] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:49] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_summary.md' succeeded in 742ms:
# CLI-FLAGS-003 Phase K2: Scaling Chain Analysis Post SAMPLE-Pivot Fix

**Date:** 2025-10-06
**Commit:** 3d03af4f501f78462a626d15b04a955e5f839b8d
**Pixel:** (slow=1039, fast=685)

## Executive Summary

After implementing the SAMPLE-pivot fix in Phase H6, we regenerated PyTorch traces and recomputed scaling ratios. The analysis reveals:

- **Improved geometry:** F_latt_a and F_latt_c components now match C within ~3% error
- **Remaining blocker:** F_latt_b diverges by 21.6%, causing 25.5% error in total F_latt
- **Secondary issues:** Polarization factor still 1.0 in PyTorch vs 0.913 in C (9.6% error)
- **Final intensity:** 11.4% higher in PyTorch (497 vs 446) due to cascading errors

## Detailed Scaling Chain Analysis

### Perfect Matches (0% error)
- **F_cell:** 300.58 (both) ✅
- **steps:** 10 (both) ✅
[2025-10-06T21:52:49] tokens used: 183,335

[2025-10-06T21:52:52] thinking

**Inspecting recent commit for gating changes**
[2025-10-06T21:52:53] exec bash -lc 'git show a89f6fd --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:54] bash -lc 'git show a89f6fd --stat' succeeded in 728ms:
commit a89f6fda55dc0b2b59e88b634313a53198c62a8a
Author: ollie <ohoidn>
Date:   Mon Oct 6 14:26:30 2025 -0700

    CLI-FLAGS-003 Phase K3a-K3b: Guard MOSFLM rescale + align polarization defaults
    
    ## Changes
    
    ### K3a: MOSFLM Rescale Guard (crystal.py:668-720)
    - Added conditional check to skip cross-product rescaling when MOSFLM
      reciprocal vectors are provided via -mat flag
    - C code sets user_cell=0 when MOSFLM matrices supplied, skipping
      vector_rescale path
    - PyTorch now matches this behavior: rescale only when cell parameters
      provided WITHOUT MOSFLM orientation
    - Verified: mosflm_rescale.py shows perfect 0.0 Å delta for all vectors
    
    ### K3b: Polarization Default Alignment (config.py:504-512)
    - Changed BeamConfig.polarization_factor default from 1.0 to 0.0
    - Matches C behavior: polar resets to 0.0 per pixel (nanoBragg.c:2912),
[2025-10-06T21:52:54] tokens used: 185,536

[2025-10-06T21:52:57] thinking

**Reviewing new metrics file**
[2025-10-06T21:52:57] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/test_metrics_failure.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:52:58] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/test_metrics_failure.json' succeeded in 693ms:
{
  "c_sum": 1627779.0,
  "py_sum": 2360700.5,
  "sum_ratio": 1.4502586126327515,
  "c_max": 27169.591796875,
  "py_max": 57948.49609375,
  "max_ratio": 2.1328437328338623,
  "correlation": 0.17430058003328258
}
[2025-10-06T21:52:58] tokens used: 186,859

[2025-10-06T21:53:04] thinking

**Investigating metric discrepancies**
[2025-10-06T21:53:04] exec bash -lc 'git show 271e2b6 --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:05] bash -lc 'git show 271e2b6 --stat' succeeded in 734ms:
commit 271e2b64d32f687801bbd7fd0f2c2704a99ea756
Author: ollie <ohoidn>
Date:   Mon Oct 6 14:48:23 2025 -0700

    CLI-FLAGS-003 Phase K3d: dtype sensitivity evidence - dtype NOT root cause
    
    Evidence-only loop completing Phase K3d per input.md directive.
    
    Key finding: Float32 vs float64 precision does NOT explain F_latt_b
    discrepancy. Both dtypes produce F_latt_b ≈ 2.33 (93.98% error vs
    C's 38.63). Dtype improvement is only 0.39%, ruling out rounding as
    significant error source.
    
    Metrics:
    - F_latt_b: float32=2.33, float64=2.33, C=38.63 (93.98% error both)
    - Miller index precision: h_frac Δ=1.09e-06 (4.12e-06% rel error)
    - F_latt precision: Δ=1.19e-03 (0.39% rel error)
    - Conclusion: Systematic geometric error, not precision issue
    
    Artifacts:
[2025-10-06T21:53:05] tokens used: 262,050

[2025-10-06T21:53:08] thinking

**Analyzing current issues and new data**
[2025-10-06T21:53:09] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/orientation_delta.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:10] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/orientation_delta.md' succeeded in 738ms:
/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py:84: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
Please either pass the dim explicitly or simply use torch.linalg.cross.
The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at /pytorch/aten/src/ATen/native/Cross.cpp:63.)
  b_cross_c = torch.cross(b_star_t, c_star_t)
================================================================================
MOSFLM Lattice Vector Rescaling Comparison
================================================================================

MOSFLM A.mat Reciprocal Vectors:
  a* = [-0.0290511  -0.02939588  0.01074988]
  b* = [-0.00312639  0.01043764 -0.03285667]
  c* = [ 0.02596044 -0.01433302 -0.01060661]

Derived Cell Parameters:
  a = 26.751388 Å
  b = 31.309964 Å
  c = 33.673354 Å
  α = 88.686974°
  β = 71.529482°
  γ = 68.137528°
[2025-10-06T21:53:10] tokens used: 263,160

[2025-10-06T21:53:15] thinking

**Analyzing gating effects on metrics**
[2025-10-06T21:53:17] exec bash -lc 'head -n 60 reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:17] bash -lc 'head -n 60 reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt' succeeded in 716ms:
# Scaling Chain Analysis: C vs PyTorch

Pixel: (slow=1039, fast=685)

## Factor-by-Factor Comparison

| Factor | C Value | PyTorch Value | Ratio (Py/C) | Match? |
|--------|---------|---------------|--------------|--------|
| I_before_scaling | 1.480792e+15 | 1.806530e+14 | 1.219976e-01 | ❌ |
| steps | 1.000000e+01 | 1.000000e+01 | 1.000000e+00 | ✅ |
| r_e_sqr | 7.940792e-30 | 7.940792e-30 | 1.000000e+00 | ✅ |
| fluence_photons_per_m2 | 1.000000e+24 | 1.000000e+24 | 1.000000e+00 | ✅ |
| polar | 9.125758e-01 | 1.000000e+00 | 1.095799e+00 | ❌ |
| omega_pixel | 4.158679e-07 | 4.158604e-07 | 9.999821e-01 | ❌ |
| I_pixel_final | 4.462541e+02 | 4.971766e+02 | 1.114111e+00 | ❌ |

## Normalization Formula

Expected (from C code):
```
[2025-10-06T21:53:17] tokens used: 265,256

[2025-10-06T21:53:20] thinking

**Checking trace_diff.txt for changes**
[2025-10-06T21:53:21] exec bash -lc 'head -n 40 reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_diff.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:21] bash -lc 'head -n 40 reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_diff.txt' succeeded in 702ms:
--- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log	2025-10-06 03:22:03.165000376 -0700
+++ reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log	2025-10-06 13:31:20.985565166 -0700
@@ -1,308 +1,75 @@
-WARNING: auto-generating odet_vector
-nanoBragg nanocrystal diffraction simulator - James Holton and Ken Frankel 5-17-17
-custom convention selected.
-pivoting detector around sample
-DETECTOR_FAST_AXIS 0.999982004873912 -0.00599800002923425 -0.000118000000575132
-DETECTOR_SLOW_AXIS -0.0059979996566955 -0.999969942765222 -0.0049129997187971
-DETECTOR_NORMAL_AXIS -8.85282813644494e-05 0.00491361907271126 -0.999987924182263
-DETECTOR_PIX0_VECTOR -0.216475836204836 0.216343050492215 -0.230192414300537
-XDS incident beam: 0.00063187 0.00490992 0.999988
-reading A.mat
-TRACE: Raw matrix values from file:
-TRACE:   a_star (raw) = [-0.0283771, -0.0287139, 0.0105005]
-TRACE:   b_star (raw) = [-0.00305386, 0.0101955, -0.0320944]
-TRACE:   c_star (raw) = [0.0253582, -0.0140005, -0.0103605]
-TRACE:   lambda0 = 0.9768 Angstroms
-TRACE:   scaling factor = 1e-10/lambda0 = 1.02375
-TRACE: After wavelength correction:
[2025-10-06T21:53:21] tokens used: 266,108

[2025-10-06T21:53:25] thinking

**Comparing trace lengths and planning analysis**
[2025-10-06T21:53:26] exec bash -lc 'ls reports | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:27] bash -lc 'ls reports | head' succeeded in 687ms:
2025-09-29-AT-PARALLEL-002
2025-09-29-AT-PARALLEL-004
2025-09-29-AT-PARALLEL-006
2025-09-29-AT-PARALLEL-012
2025-09-29-debug-traces-002
2025-09-29-debug-traces-006
2025-09-29-debug-traces-012
2025-09-30-AT-012-debug
2025-09-30-AT-012-peakmatch
2025-09-30-AT-PARALLEL-012
[2025-10-06T21:53:27] tokens used: 268,091

[2025-10-06T21:53:29] thinking

**Checking for vectorization artifacts**
[2025-10-06T21:53:31] exec bash -lc "find reports -maxdepth 1 -type d -name '*vectorization*'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:32] bash -lc "find reports -maxdepth 1 -type d -name '*vectorization*'" succeeded in 702ms:

[2025-10-06T21:53:32] tokens used: 268,413

[2025-10-06T21:53:36] thinking

**Preparing to evaluate vectorization plan**
[2025-10-06T21:53:36] exec bash -lc 'rg -n "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:37] bash -lc 'rg -n "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 721ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
1280:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-06T21:53:37] tokens used: 268,670

[2025-10-06T21:53:39] thinking

**Reading entry**
[2025-10-06T21:53:40] exec bash -lc "sed -n '1280,1380p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:41] bash -lc "sed -n '1280,1380p' docs/fix_plan.md" succeeded in 672ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions:
  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-06T21:53:41] tokens used: 268,959

[2025-10-06T21:53:48] thinking

**Reviewing parity issues and metrics**
[2025-10-06T21:53:49] exec bash -lc 'git show a89f6fd''^:reports/2025-10-cli-flags/phase_k/f_latt_fix/test_metrics_failure.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:53:50] bash -lc 'git show a89f6fd''^:reports/2025-10-cli-flags/phase_k/f_latt_fix/test_metrics_failure.json' succeeded in 737ms:
{
  "c_sum": 1627779.0,
  "py_sum": 2376257.0,
  "sum_ratio": 1.459815502166748,
  "c_max": 27169.591796875,
  "py_max": 58772.1953125,
  "max_ratio": 2.163160800933838,
  "correlation": 0.17327933200876186
}
[2025-10-06T21:53:50] tokens used: 270,732

[2025-10-06T21:54:09] thinking

**Investigating correlation and CLI parity**
[2025-10-06T21:54:10] exec bash -lc 'rg "F_latt" -n reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:11] bash -lc 'rg "F_latt" -n reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' succeeded in 968ms:
48:TRACE_PY: F_latt_a 35.9573598805798
49:TRACE_PY: F_latt_b 46.9838162313509
50:TRACE_PY: F_latt_c 26.4683259730135
51:TRACE_PY: F_latt 44715.9601587609
[2025-10-06T21:54:11] tokens used: 271,336

[2025-10-06T21:54:14] thinking

**Searching for matching trace in C log**
[2025-10-06T21:54:15] exec bash -lc 'rg "F_latt" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:16] bash -lc 'rg "F_latt" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 694ms:
185:TRACE_C: F_latt_a 35.8890618450812
186:TRACE_C: F_latt_b 38.6324938361129
187:TRACE_C: F_latt_c 25.7024842831081
188:TRACE_C: F_latt 35636.0822038919
[2025-10-06T21:54:16] tokens used: 290,968

[2025-10-06T21:54:19] thinking

**Investigating fractional Miller indices**
[2025-10-06T21:54:19] exec bash -lc 'rg "h_frac" -n reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:20] bash -lc 'rg "h_frac" -n reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' exited 1 in 711ms:

[2025-10-06T21:54:20] tokens used: 291,458

[2025-10-06T21:54:23] thinking

**Considering alternative variable names**
[2025-10-06T21:54:24] exec bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:25] bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log" succeeded in 697ms:
# Tracing pixel (slow=1039, fast=685)
# Trace complete
TRACE_PY:detector_convention=CUSTOM
TRACE_PY:angles_rad=rotx:0 roty:0 rotz:0 twotheta:0
TRACE_PY:beam_center_m=Xclose:0.217742295 Yclose:0.21390708 pixel_mm:0.172
TRACE_PY:initial_fdet=0.999982 -0.005998 -0.000118
TRACE_PY:initial_sdet=-0.005998 -0.99997 -0.004913
TRACE_PY:initial_odet=-8.8e-05 0.004914 -0.999988
TRACE_PY:Fclose_m=0.217742295
TRACE_PY:Sclose_m=0.21390708
TRACE_PY:close_distance_m=0.231274663460392
TRACE_PY:ratio=0.999987814780285
TRACE_PY:distance_m=0.23127748162732
TRACE_PY:term_fast_before_rot=-0.21773837563869 0.00130601828541 2.569359081e-05
TRACE_PY:term_slow_before_rot=0.00128301466584 0.2139006627876 0.00105092548404
TRACE_PY:term_close_before_rot=-2.03521703845145e-05 0.00113648369624436 -0.23127188816443
TRACE_PY:pix0_before_rotation=-0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY:pix0_after_rotz=-0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY:pix0_after_twotheta=-0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY:fdet_after_rotz=0.999982 -0.005998 -0.000118
[2025-10-06T21:54:25] tokens used: 291,707

[2025-10-06T21:54:28] thinking

**Noting hkl_frac values for comparison**
[2025-10-06T21:54:29] exec bash -lc 'rg "hkl_frac" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:30] bash -lc 'rg "hkl_frac" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 698ms:
183:TRACE_C: hkl_frac 2.00120331912649 1.99279793937568 -12.9907668789699
[2025-10-06T21:54:30] tokens used: 293,498

[2025-10-06T21:54:43] thinking

**Investigating fractional differences in scattering vectors**

I'm comparing fractional hkl values between PyTorch and C, noticing a notable mismatch in the k component which might explain discrepancies in F_latt. I plan to trace through the pipeline, especially checking how `rot_b` and `rot_b_angstroms` are computed in both Pyro and C implementations to pinpoint the cause of this k difference.
[2025-10-06T21:54:44] exec bash -lc 'rg "rot_b_angstroms" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:45] bash -lc 'rg "rot_b_angstroms" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 739ms:
178:TRACE_C: rot_b_angstroms -11.4986968432508 0.671588233999813 -29.1143056268565
[2025-10-06T21:54:45] tokens used: 293,967

[2025-10-06T21:54:57] thinking

**Analyzing rotation vector discrepancies**
[2025-10-06T21:54:58] exec bash -lc 'rg "rot_a_angstroms" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:54:58] bash -lc 'rg "rot_a_angstroms" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 815ms:
177:TRACE_C: rot_a_angstroms -14.3562690335399 -21.8805340763623 -5.5476578307123
[2025-10-06T21:54:58] tokens used: 294,441

[2025-10-06T21:55:03] thinking

**Comparing vector components for debugging**
[2025-10-06T21:55:04] exec bash -lc 'rg "rot_a_star" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:55:05] bash -lc 'rg "rot_a_star" -n reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 717ms:
180:TRACE_C: rot_a_star_A_inv -0.0290510954135954 -0.0293958845208845 0.0107498771498771
[2025-10-06T21:55:05] tokens used: 294,709

[2025-10-06T21:55:12] thinking

**Comparing rotation vector differences**
[2025-10-06T21:55:14] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:55:14] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py" succeeded in 704ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K2b: MOSFLM Lattice Vector Rescaling Mismatch

This script demonstrates the discrepancy between C and PyTorch lattice vector
calculation when using MOSFLM A.mat orientation matrices.

Issue: PyTorch always rescales cross products to match cell parameters, but C
       only does this when user_cell=1 (i.e., when -cell was explicitly provided).
       When using -matrix A.mat without -cell, C skips the rescale step.

C Reference: golden_suite_generator/nanoBragg.c:2140-2149
```c
if(user_cell)
{
    /* a,b,c and V_cell were generated above */

    /* force the cross-product vectors to have proper magnitude: b_star X c_star = a*V_cell */
    vector_rescale(b_star_cross_c_star,b_star_cross_c_star,a[0]/V_cell);
    vector_rescale(c_star_cross_a_star,c_star_cross_a_star,b[0]/V_cell);
[2025-10-06T21:55:14] tokens used: 347,980

[2025-10-06T21:55:28] thinking

**Analyzing crystal rotation discrepancies**
[2025-10-06T21:55:29] exec bash -lc 'rg "def get_rotated_real_vectors" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:55:30] bash -lc 'rg "def get_rotated_real_vectors" -n src/nanobrag_torch/models/crystal.py' succeeded in 873ms:
814:    def get_rotated_real_vectors(self, config: "CrystalConfig") -> Tuple[
[2025-10-06T21:55:30] tokens used: 351,505
[2025-10-06T21:55:33] exec bash -lc "sed -n '780,960p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:55:33] bash -lc "sed -n '780,960p' src/nanobrag_torch/models/crystal.py" succeeded in 728ms:
    def b(self) -> torch.Tensor:
        """Real-space lattice vector b (Angstroms)."""
        return self._compute_cell_tensors_cached()["b"]

    @property
    def c(self) -> torch.Tensor:
        """Real-space lattice vector c (Angstroms)."""
        return self._compute_cell_tensors_cached()["c"]

    @property
    def a_star(self) -> torch.Tensor:
        """Reciprocal-space lattice vector a* (Angstroms^-1)."""
        return self._compute_cell_tensors_cached()["a_star"]

    @property
    def b_star(self) -> torch.Tensor:
        """Reciprocal-space lattice vector b* (Angstroms^-1)."""
        return self._compute_cell_tensors_cached()["b_star"]

    @property
[2025-10-06T21:55:33] tokens used: 351,677

[2025-10-06T21:56:04] thinking

**Analyzing rotation vector discrepancies**
[2025-10-06T21:56:05] exec bash -lc 'rg "def rotate_axis" -n src/nanobrag_torch/utils/geometry.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:56:05] bash -lc 'rg "def rotate_axis" -n src/nanobrag_torch/utils/geometry.py' succeeded in 874ms:
78:def rotate_axis(v: torch.Tensor, axis: torch.Tensor, phi: torch.Tensor) -> torch.Tensor:
[2025-10-06T21:56:05] tokens used: 355,848
[2025-10-06T21:56:10] exec bash -lc "sed -n '78,140p' src/nanobrag_torch/utils/geometry.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:56:10] bash -lc "sed -n '78,140p' src/nanobrag_torch/utils/geometry.py" succeeded in 664ms:
def rotate_axis(v: torch.Tensor, axis: torch.Tensor, phi: torch.Tensor) -> torch.Tensor:
    """
    Rotate vectors around arbitrary axes using Rodrigues' formula.

    Args:
        v: Vectors to rotate with shape (..., 3)
        axis: Unit vectors defining rotation axes with shape (..., 3)
        phi: Rotation angles in radians

    Returns:
        torch.Tensor: Rotated vectors with shape (..., 3)
    """
    # Ensure axis is unit vector for stability
    axis_unit, _ = unitize(axis)

    # Rodrigues' formula: v_rot = v*cos(phi) + (axis × v)*sin(phi) + axis*(axis·v)*(1-cos(phi))
    cos_phi = torch.cos(phi).unsqueeze(-1)
    sin_phi = torch.sin(phi).unsqueeze(-1)

    axis_dot_v = dot_product(axis_unit, v).unsqueeze(-1)
[2025-10-06T21:56:10] tokens used: 357,065

[2025-10-06T21:56:16] thinking

**Investigating tensor conversions**
[2025-10-06T21:56:17] exec bash -lc 'rg "self.cell_a" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:56:17] bash -lc 'rg "self.cell_a" -n src/nanobrag_torch/models/crystal.py' succeeded in 692ms:
69:        self.cell_a = torch.as_tensor(
78:        self.cell_alpha = torch.as_tensor(
128:        self.cell_a = self.cell_a.to(device=self.device, dtype=self.dtype)
131:        self.cell_alpha = self.cell_alpha.to(device=self.device, dtype=self.dtype)
150:        if (self.cell_a <= 0).any() or (self.cell_b <= 0).any() or (self.cell_c <= 0).any():
154:        for angle_name, angle in [('alpha', self.cell_alpha), ('beta', self.cell_beta), ('gamma', self.cell_gamma)]:
161:        for angle_name, angle in [('alpha', self.cell_alpha), ('beta', self.cell_beta), ('gamma', self.cell_gamma)]:
490:        alpha_rad = torch.deg2rad(self.cell_alpha)
514:        V = 2.0 * self.cell_a * self.cell_b * self.cell_c * torch.sqrt(skew)
522:        b_star_length = self.cell_c * self.cell_a * torch.sin(beta_rad) * V_star
523:        c_star_length = self.cell_a * self.cell_b * torch.sin(gamma_rad) * V_star
601:                / (self.cell_a * self.cell_b * self.cell_c * sin_gamma_star_safe)
[2025-10-06T21:56:17] tokens used: 357,949

[2025-10-06T21:56:20] thinking

**Examining class definition**
[2025-10-06T21:56:21] exec bash -lc "sed -n '1,200p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:56:22] bash -lc "sed -n '1,200p' src/nanobrag_torch/models/crystal.py" succeeded in 716ms:
"""
Crystal model for nanoBragg PyTorch implementation.

This module defines the Crystal class responsible for managing unit cell,
orientation, and structure factor data.

NOTE: The default parameters in this file are configured to match the 'simple_cubic'
golden test case, which uses a 10 Å unit cell and a 500×500×500 cell crystal size.
"""

from typing import Optional, Tuple

import math
import torch

from ..config import CrystalConfig, BeamConfig
from ..utils.geometry import angles_to_rotation_matrix
from ..io.hkl import read_hkl_file, try_load_hkl_or_fdump


[2025-10-06T21:56:22] tokens used: 358,365

[2025-10-06T21:56:30] thinking

**Investigating numerical discrepancies in tensor computations**
[2025-10-06T21:56:31] exec bash -lc 'rg "b_star_cross_c_star" -n reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:56:31] bash -lc 'rg "b_star_cross_c_star" -n reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' exited 1 in 720ms:

[2025-10-06T21:56:31] tokens used: 360,865

[2025-10-06T21:56:46] thinking

**Analyzing volume scaling discrepancy hypothesis**

I'm exploring why the pyro and C traces differ in computed cell vectors, focusing on how each uses volume scaling with cross products; I plan to verify this by recomputing real vectors from reciprocal vectors using data from the trace with high precision in Python.
[2025-10-06T21:56:49] exec bash -lc "python - <<'PY'
import numpy as np

a_star = np.array([-0.0290510954135954, -0.0293958845208845, 0.0107498771498771])
b_star = np.array([-0.0031263923013923, 0.0104376433251433, -0.0328566748566749])
c_star = np.array([0.0259604422604423, -0.014333015970516, -0.0106066134316134])

b_cross_c = np.cross(b_star, c_star)
c_cross_a = np.cross(c_star, a_star)
a_cross_b = np.cross(a_star, b_star)

V_star = np.dot(a_star, b_cross_c)
V_cell = 1.0 / V_star

# Real vectors using V_cell (C-style? also pyro currently)
a_vec = b_cross_c * V_cell
b_vec = c_cross_a * V_cell
c_vec = a_cross_b * V_cell

print('V_star', V_star)
print('V_cell', V_cell)
print('a_vec', a_vec)
print('b_vec', b_vec)
print('c_vec', c_vec)
print('magnitudes', np.linalg.norm(a_vec), np.linalg.norm(b_vec), np.linalg.norm(c_vec))

# Now compute using pyro style after rescale? This is same as above? we multiplied by V_cell.

PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:56:50] bash -lc "python - <<'PY'
import numpy as np

a_star = np.array([-0.0290510954135954, -0.0293958845208845, 0.0107498771498771])
b_star = np.array([-0.0031263923013923, 0.0104376433251433, -0.0328566748566749])
c_star = np.array([0.0259604422604423, -0.014333015970516, -0.0106066134316134])

b_cross_c = np.cross(b_star, c_star)
c_cross_a = np.cross(c_star, a_star)
a_cross_b = np.cross(a_star, b_star)

V_star = np.dot(a_star, b_cross_c)
V_cell = 1.0 / V_star

# Real vectors using V_cell (C-style? also pyro currently)
a_vec = b_cross_c * V_cell
b_vec = c_cross_a * V_cell
c_vec = a_cross_b * V_cell

print('V_star', V_star)
print('V_cell', V_cell)
print('a_vec', a_vec)
print('b_vec', b_vec)
print('c_vec', c_vec)
print('magnitudes', np.linalg.norm(a_vec), np.linalg.norm(b_vec), np.linalg.norm(c_vec))

# Now compute using pyro style after rescale? This is same as above? we multiplied by V_cell.

PY
" succeeded in 984ms:
V_star 4.051493406725393e-05
V_cell 24682.25663011129
a_vec [-14.35626903 -21.87179285  -5.58202083]
b_vec [-11.49869684   0.71732003 -29.11321478]
c_vec [ 21.06995003 -24.38929625  -9.75265167]
magnitudes 26.75138761703569 31.309964100634794 33.67335415843306
[2025-10-06T21:56:50] tokens used: 362,777

[2025-10-06T21:57:00] thinking

**Analyzing vector discrepancies between Pyro and C code**

I’m investigating why the cross product method matches Pyro’s vector but differs from C’s value, suspecting that C applies extra rotation or rescaling steps. I plan to check how C computes `rot_b`, especially in `nanoBragg.c`, to understand orientation or scaling differences possibly caused by rotation order or magnitude enforcement.
[2025-10-06T21:57:03] exec bash -lc "python - <<'PY'
import numpy as np
b = np.array([-11.4986968432508, 0.671588233999813, -29.1143056268565])
print(np.linalg.norm(b))
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:03] bash -lc "python - <<'PY'
import numpy as np
b = np.array([-11.4986968432508, 0.671588233999813, -29.1143056268565])
print(np.linalg.norm(b))
PY
" succeeded in 933ms:
31.309964100634815
[2025-10-06T21:57:03] tokens used: 363,945

[2025-10-06T21:57:14] thinking

**Analyzing orientation differences between implementations**
[2025-10-06T21:57:14] exec bash -lc "sed -n '2000,2120p' nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:15] bash -lc "sed -n '2000,2120p' nanoBragg.c" exited 1 in 903ms:
sed: nanoBragg.c: No such file or directory
[2025-10-06T21:57:15] tokens used: 364,628

[2025-10-06T21:57:18] thinking

**Locating nanoBragg.c file**
[2025-10-06T21:57:19] exec bash -lc "sed -n '2000,2120p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:19] bash -lc "sed -n '2000,2120p' golden_suite_generator/nanoBragg.c" succeeded in 673ms:
        sin_alpha_star = a[0]*V_star/b_star[0]/c_star[0];
        sin_beta_star  = b[0]*V_star/a_star[0]/c_star[0];
        sin_gamma_star = c[0]*V_star/a_star[0]/b_star[0];
        cos_alpha_star = (cos(beta)*cos(gamma)-cos(alpha))/(sin(beta)*sin(gamma));
        cos_beta_star  = (cos(gamma)*cos(alpha)-cos(beta))/(sin(gamma)*sin(alpha));
        cos_gamma_star = (cos(alpha)*cos(beta)-cos(gamma))/(sin(alpha)*sin(beta));
        if(sin_alpha_star>1.0000001 || sin_alpha_star<-1.0000001 ||
           sin_beta_star >1.0000001 || sin_beta_star <-1.0000001 ||
           sin_gamma_star>1.0000001 || sin_gamma_star<-1.0000001 ||
           cos_alpha_star>1.0000001 || cos_alpha_star<-1.0000001 ||
           cos_beta_star >1.0000001 || cos_beta_star <-1.0000001 ||
           cos_gamma_star>1.0000001 || cos_gamma_star<-1.0000001 )
        {
            printf("WARNING: oddball reciprocal cell angles:\n");
            printf("sin(alpha_star) = %.25g\n",sin_alpha_star);
            printf("cos(alpha_star) = %.25g\n",cos_alpha_star);
            printf("sin(beta_star)  = %.25g\n",sin_beta_star);
            printf("cos(beta_star)  = %.25g\n",cos_beta_star);
            printf("sin(gamma_star) = %.25g\n",sin_gamma_star);
            printf("cos9gamma_star) = %.25g\n",cos_gamma_star);
[2025-10-06T21:57:19] tokens used: 364,773

[2025-10-06T21:57:23] thinking

**Checking vector computation details**
[2025-10-06T21:57:24] exec bash -lc "sed -n '2120,2250p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:25] bash -lc "sed -n '2120,2250p' golden_suite_generator/nanoBragg.c" succeeded in 708ms:
    
    cross_product(a_star,b_star,a_star_cross_b_star);
    cross_product(b_star,c_star,b_star_cross_c_star);
    cross_product(c_star,a_star,c_star_cross_a_star);
    
    printf("TRACE:   Cross product results:\n");
    printf("TRACE:     a_star x b_star = [%g, %g, %g]\n", a_star_cross_b_star[1], a_star_cross_b_star[2], a_star_cross_b_star[3]);
    printf("TRACE:     b_star x c_star = [%g, %g, %g]\n", b_star_cross_c_star[1], b_star_cross_c_star[2], b_star_cross_c_star[3]);
    printf("TRACE:     c_star x a_star = [%g, %g, %g]\n", c_star_cross_a_star[1], c_star_cross_a_star[2], c_star_cross_a_star[3]);

    /* reciprocal lattice vector "a_star" is defined as perpendicular to both b and c, and must also preserve volume
       converse is true for direct-space lattice: a is perpendicular to both b_star and c_star
       a = ( b_star cross c_star ) / V_star    */

    /* reciprocal unit cell volume, but is it lambda-corrected? */
    V_star = dot_product(a_star,b_star_cross_c_star);
    printf("TRACE: Reciprocal cell volume calculation:\n");
    printf("TRACE:   V_star = a_star . (b_star x c_star) = %g\n", V_star);

    /* make sure any user-supplied cell takes */
[2025-10-06T21:57:25] tokens used: 367,519

[2025-10-06T21:57:30] thinking

**Investigating precision differences**
[2025-10-06T21:57:34] exec bash -lc "python - <<'PY'
import numpy as np

a_star = np.array([-0.0290510954135954, -0.0293958845208845, 0.0107498771498771], dtype=np.float32)
b_star = np.array([-0.0031263923013923, 0.0104376433251433, -0.0328566748566749], dtype=np.float32)
c_star = np.array([0.0259604422604423, -0.014333015970516, -0.0106066134316134], dtype=np.float32)

b_cross_c = np.cross(b_star, c_star)
c_cross_a = np.cross(c_star, a_star)
a_cross_b = np.cross(a_star, b_star)

V_star = np.dot(a_star, b_cross_c)
V_cell = 1.0 / V_star

a_vec = b_cross_c * V_cell
b_vec = c_cross_a * V_cell
c_vec = a_cross_b * V_cell
print('V_star', V_star)
print('b_vec', b_vec)
print('magnitudes', np.linalg.norm(b_vec))
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:35] bash -lc "python - <<'PY'
import numpy as np

a_star = np.array([-0.0290510954135954, -0.0293958845208845, 0.0107498771498771], dtype=np.float32)
b_star = np.array([-0.0031263923013923, 0.0104376433251433, -0.0328566748566749], dtype=np.float32)
c_star = np.array([0.0259604422604423, -0.014333015970516, -0.0106066134316134], dtype=np.float32)

b_cross_c = np.cross(b_star, c_star)
c_cross_a = np.cross(c_star, a_star)
a_cross_b = np.cross(a_star, b_star)

V_star = np.dot(a_star, b_cross_c)
V_cell = 1.0 / V_star

a_vec = b_cross_c * V_cell
b_vec = c_cross_a * V_cell
c_vec = a_cross_b * V_cell
print('V_star', V_star)
print('b_vec', b_vec)
print('magnitudes', np.linalg.norm(b_vec))
PY
" succeeded in 940ms:
V_star 4.051493e-05
b_vec [-11.498697    0.7173196 -29.113216 ]
magnitudes 31.309965
[2025-10-06T21:57:35] tokens used: 371,359

[2025-10-06T21:57:40] thinking

**Investigating result precision and transformations**
[2025-10-06T21:57:41] exec bash -lc 'rg "rot_b_angstroms" -n golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:42] bash -lc 'rg "rot_b_angstroms" -n golden_suite_generator/nanoBragg.c' succeeded in 706ms:
3120:                                        printf("TRACE_C: rot_b_angstroms %.15g %.15g %.15g\n", b[1]*1e10, b[2]*1e10, b[3]*1e10);
[2025-10-06T21:57:42] tokens used: 372,174

[2025-10-06T21:57:48] thinking

**Analyzing unit conversions in code**
[2025-10-06T21:57:48] exec bash -lc 'rg "1.e-10" -n golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:49] bash -lc 'rg "1.e-10" -n golden_suite_generator/nanoBragg.c' exited 1 in 800ms:

[2025-10-06T21:57:49] tokens used: 373,289

[2025-10-06T21:57:52] thinking

**Searching for conversion factor**
[2025-10-06T21:57:53] exec bash -lc 'rg "1e-10" -n golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:57:54] bash -lc 'rg "1e-10" -n golden_suite_generator/nanoBragg.c' succeeded in 743ms:
976:                dmin = atof(argv[i+1])*1e-10;
2066:            printf("TRACE:   scaling factor = 1e-10/lambda0 = %g\n", 1e-10/lambda0);
2068:            vector_scale(a_star,a_star,1e-10/lambda0);
2069:            vector_scale(b_star,b_star,1e-10/lambda0);
2070:            vector_scale(c_star,c_star,1e-10/lambda0);
2286:    vector_scale(a,a,1e-10);
2287:    vector_scale(b,b,1e-10);
2288:    vector_scale(c,c,1e-10);
[2025-10-06T21:57:54] tokens used: 373,497

[2025-10-06T21:57:59] thinking

**Analyzing vector scaling and conversions**
[2025-10-06T21:57:59] exec bash -lc "sed -n '2260,2340p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:00] bash -lc "sed -n '2260,2340p' golden_suite_generator/nanoBragg.c" succeeded in 1.02s:
    alpha_star = atan2(sin_alpha_star,cos_alpha_star);
    beta_star  = atan2(sin_beta_star ,cos_beta_star );
    gamma_star = atan2(sin_gamma_star,cos_gamma_star);

    printf("Unit Cell: %g %g %g %g %g %g\n", a[0],b[0],c[0],alpha*RTD,beta*RTD,gamma*RTD);
    printf("Recp Cell: %g %g %g %g %g %g\n", a_star[0],b_star[0],c_star[0],alpha_star*RTD,beta_star*RTD,gamma_star*RTD);
    printf("volume = %g A^3\n",V_cell);

    /* print out the real-space matrix */
    printf("real-space cell vectors (Angstrom):\n");
    printf("     %-10s  %-10s  %-10s\n","a","b","c");
    printf("X: %11.8f %11.8f %11.8f\n",a[1],b[1],c[1]);
    printf("Y: %11.8f %11.8f %11.8f\n",a[2],b[2],c[2]);
    printf("Z: %11.8f %11.8f %11.8f\n",a[3],b[3],c[3]);
    printf("reciprocal-space cell vectors (Angstrom^-1):\n");
    printf("     %-10s  %-10s  %-10s\n","a_star","b_star","c_star");
    printf("X: %11.8f %11.8f %11.8f\n",a_star[1],b_star[1],c_star[1]);
    printf("Y: %11.8f %11.8f %11.8f\n",a_star[2],b_star[2],c_star[2]);
    printf("Z: %11.8f %11.8f %11.8f\n",a_star[3],b_star[3],c_star[3]);

[2025-10-06T21:58:00] tokens used: 374,023

[2025-10-06T21:58:10] thinking

**Investigating rotation and unit conversion**
[2025-10-06T21:58:11] exec bash -lc "sed -n '2940,3140p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:11] bash -lc "sed -n '2940,3140p' golden_suite_generator/nanoBragg.c" succeeded in 682ms:
    //                  Fdet = pixel_size*fpixel;
    //                  Sdet = pixel_size*spixel;

                        /* construct detector subpixel position in 3D space */
//                      pixel_X = distance;
//                      pixel_Y = Sdet-Ybeam;
//                      pixel_Z = Fdet-Xbeam;
                        pixel_pos[1] = Fdet*fdet_vector[1]+Sdet*sdet_vector[1]+Odet*odet_vector[1]+pix0_vector[1];
                        pixel_pos[2] = Fdet*fdet_vector[2]+Sdet*sdet_vector[2]+Odet*odet_vector[2]+pix0_vector[2];
                        pixel_pos[3] = Fdet*fdet_vector[3]+Sdet*sdet_vector[3]+Odet*odet_vector[3]+pix0_vector[3];
                        pixel_pos[0] = 0.0;
                        if(curved_detector) {
                            /* construct detector pixel that is always "distance" from the sample */
                            vector[1] = distance*beam_vector[1];
                            vector[2] = distance*beam_vector[2] ;
                            vector[3] = distance*beam_vector[3];
                            /* treat detector pixel coordinates as radians */
                            rotate_axis(vector,newvector,sdet_vector,pixel_pos[2]/distance);
                            rotate_axis(newvector,pixel_pos,fdet_vector,pixel_pos[3]/distance);
//                          rotate(vector,pixel_pos,0,pixel_pos[3]/distance,pixel_pos[2]/distance);
[2025-10-06T21:58:11] tokens used: 376,188

[2025-10-06T21:58:16] thinking

**Investigating rotate_axis usage**
[2025-10-06T21:58:17] exec bash -lc 'rg "rotate_axis(ap" -n golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:18] bash -lc 'rg "rotate_axis(ap" -n golden_suite_generator/nanoBragg.c' exited 2 in 699ms:
rg: regex parse error:
    (?:rotate_axis(ap)
    ^
error: unclosed group
[2025-10-06T21:58:18] tokens used: 379,022

[2025-10-06T21:58:21] thinking

**Considering syntax adjustments**
[2025-10-06T21:58:22] exec bash -lc "rg \"rotate_axis\\(ap\" -n golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:23] bash -lc "rg \"rotate_axis\\(ap\" -n golden_suite_generator/nanoBragg.c" exited 1 in 692ms:

[2025-10-06T21:58:23] tokens used: 379,178

[2025-10-06T21:58:26] thinking

**Searching for rotate_axis usage**
[2025-10-06T21:58:27] exec bash -lc "rg \"rotate_axis\\(\" -n golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:27] bash -lc "rg \"rotate_axis\\(\" -n golden_suite_generator/nanoBragg.c" succeeded in 662ms:
101:double *rotate_axis(double *v, double *newv, double *axis, double phi);
1794:        rotate_axis(pix0_vector,pix0_vector,twotheta_axis,detector_twotheta);
1813:    rotate_axis(fdet_vector,fdet_vector,twotheta_axis,detector_twotheta);
1814:    rotate_axis(sdet_vector,sdet_vector,twotheta_axis,detector_twotheta);
1815:    rotate_axis(odet_vector,odet_vector,twotheta_axis,detector_twotheta);
2648:                rotate_axis(vector,newvector,polar_vector,vdiv);
2649:                rotate_axis(newvector,vector,vert_vector,hdiv);
2957:                            rotate_axis(vector,newvector,sdet_vector,pixel_pos[2]/distance);
2958:                            rotate_axis(newvector,pixel_pos,fdet_vector,pixel_pos[3]/distance);
3056:                                    rotate_axis(a0,ap,spindle_vector,phi);
3057:                                    rotate_axis(b0,bp,spindle_vector,phi);
3058:                                    rotate_axis(c0,cp,spindle_vector,phi);
3704:double *rotate_axis(double *v, double *newv, double *axis, double phi) {
[2025-10-06T21:58:27] tokens used: 379,286

[2025-10-06T21:58:32] thinking

**Examining rotation code behavior**
[2025-10-06T21:58:32] exec bash -lc "sed -n '3030,3080p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:33] bash -lc "sed -n '3030,3080p' golden_suite_generator/nanoBragg.c" succeeded in 694ms:
                            }

                            /* we now have enough to fix the polarization factor */
                            if (polar == 0.0 || oversample_polar)
                            {
                                /* need to compute polarization factor */
                                polar = polarization_factor(polarization,incident,diffracted,polar_vector);
                            }

                            /* sweep over phi angles */
                            for(phi_tic = 0; phi_tic < phisteps; ++phi_tic)
                            {
                                phi = phi0 + phistep*phi_tic;

                                if( phi != 0.0 )
                                {
                                    /* rotate about spindle if neccesary */
                                    if(fpixel==512 && spixel==512 && source==0 && phi_tic==0) {
                                        printf("TRACE: Phi rotation (phi=%g degrees):\n", phi*RTD);
                                        printf("TRACE:   spindle_vector = [%g, %g, %g]\n", spindle_vector[1], spindle_vector[2], spindle_vector[3]);
[2025-10-06T21:58:33] tokens used: 379,832

[2025-10-06T21:58:39] thinking

**Investigating initial vector values**
[2025-10-06T21:58:40] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_j/trace_c_scaling.log" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:58:40] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_j/trace_c_scaling.log" succeeded in 738ms:
WARNING: auto-generating odet_vector
nanoBragg nanocrystal diffraction simulator - James Holton and Ken Frankel 5-17-17
custom convention selected.
pivoting detector around sample
DETECTOR_FAST_AXIS 0.999982004873912 -0.00599800002923425 -0.000118000000575132
DETECTOR_SLOW_AXIS -0.0059979996566955 -0.999969942765222 -0.0049129997187971
DETECTOR_NORMAL_AXIS -8.85282813644494e-05 0.00491361907271126 -0.999987924182263
DETECTOR_PIX0_VECTOR -0.216475836204836 0.216343050492215 -0.230192414300537
XDS incident beam: 0.00063187 0.00490992 0.999988
reading A.mat
TRACE: Raw matrix values from file:
TRACE:   a_star (raw) = [-0.0283771, -0.0287139, 0.0105005]
TRACE:   b_star (raw) = [-0.00305386, 0.0101955, -0.0320944]
TRACE:   c_star (raw) = [0.0253582, -0.0140005, -0.0103605]
TRACE:   lambda0 = 0.9768 Angstroms
TRACE:   scaling factor = 1e-10/lambda0 = 1.02375
TRACE: After wavelength correction:
TRACE:   a_star = [-0.0290511, -0.0293959, 0.0107499] |a_star| = 0.0427041
TRACE:   b_star = [-0.00312639, 0.0104376, -0.0328567] |b_star| = 0.0346162
TRACE:   c_star = [0.0259604, -0.014333, -0.0106066] |c_star| = 0.0314941
[2025-10-06T21:58:40] tokens used: 381,060

[2025-10-06T21:59:24] thinking

**Investigating rotation discrepancies**
[2025-10-06T21:59:24] exec bash -lc 'rg "rot_b" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:59:25] bash -lc 'rg "rot_b" -n src/nanobrag_torch/simulator.py' succeeded in 944ms:
23:    rot_b: torch.Tensor,
26:    rot_b_star: torch.Tensor,
75:        rot_a, rot_b, rot_c: Rotated real-space lattice vectors (N_phi, N_mos, 3)
76:        rot_a_star, rot_b_star, rot_c_star: Rotated reciprocal vectors (N_phi, N_mos, 3)
179:            rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0)
184:            rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0).unsqueeze(0)
191:        rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0)
195:    k = dot_product(scattering_broadcast, rot_b_broadcast)
273:                          k_frac.unsqueeze(-1) * rot_b_star.unsqueeze(0).unsqueeze(0).unsqueeze(0) +
278:                          k_frac.unsqueeze(-1) * rot_b_star.unsqueeze(0).unsqueeze(0) +
290:                          k_frac.unsqueeze(-1) * rot_b_star.unsqueeze(0).unsqueeze(0).unsqueeze(0) +
295:                          k_frac.unsqueeze(-1) * rot_b_star.unsqueeze(0).unsqueeze(0) +
614:    def _compute_physics_for_position(self, pixel_coords_angstroms, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star, incident_beam_direction=None, wavelength=None, source_weights=None):
626:            rot_a, rot_b, rot_c: Rotated real-space lattice vectors (N_phi, N_mos, 3)
627:            rot_a_star, rot_b_star, rot_c_star: Rotated reciprocal vectors (N_phi, N_mos, 3)
657:            rot_b=rot_b,
660:            rot_b_star=rot_b_star,
796:            (rot_a, rot_b, rot_c), (rot_a_star, rot_b_star, rot_c_star) = (
801:            rot_b = rot_b.to(device=self.device, dtype=self.dtype)
804:            rot_b_star = rot_b_star.to(device=self.device, dtype=self.dtype)
[2025-10-06T21:59:25] tokens used: 387,617

[2025-10-06T21:59:46] thinking

**Analyzing unit discrepancies in physics computation**

I'm investigating why the pyro and C pipelines produce different orientation values and resulting dot products, focusing on unit differences and rotation steps. I’m considering if pyro’s use of Angstroms versus C’s meters or differences in applying the phi rotation and axis normalization cause the disparities. Let's check the detailed vector calculations and unit conversions to pinpoint where the pipelines diverge.
[2025-10-06T21:59:48] exec bash -lc "python - <<'PY'
import numpy as np
scattering = np.array([-4016134701.82206, 1483170371.49559, 935911580.509501])
b = np.array([-11.4986968432508, 0.671588233999813, -29.1143056268565]) * 1e-10
k = np.dot(b, scattering)
print('k', k)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:59:49] bash -lc "python - <<'PY'
import numpy as np
scattering = np.array([-4016134701.82206, 1483170371.49559, 935911580.509501])
b = np.array([-11.4986968432508, 0.671588233999813, -29.1143056268565]) * 1e-10
k = np.dot(b, scattering)
print('k', k)
PY
" succeeded in 989ms:
k 1.9927979393756956
[2025-10-06T21:59:49] tokens used: 392,592

[2025-10-06T21:59:54] thinking

**Verifying units for pyro calculations**
[2025-10-06T21:59:56] exec bash -lc "python - <<'PY'
import numpy as np
scattering_py = np.array([-4016089437.67211, 1483159643.01972, 935890270.422901])
b_py = np.array([-11.4986968432508, 0.717320030990266, -29.1132147806318])
# Since scattering_py units are 1/Angstrom, we can dot with Angstrom vector
k_py = np.dot(b_py, scattering_py)
print('k_py', k_py)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:59:56] bash -lc "python - <<'PY'
import numpy as np
scattering_py = np.array([-4016089437.67211, 1483159643.01972, 935890270.422901])
b_py = np.array([-11.4986968432508, 0.717320030990266, -29.1132147806318])
# Since scattering_py units are 1/Angstrom, we can dot with Angstrom vector
k_py = np.dot(b_py, scattering_py)
print('k_py', k_py)
PY
" succeeded in 777ms:
k_py 19996920606.34209
[2025-10-06T21:59:56] tokens used: 439,487

[2025-10-06T22:00:02] thinking

**Verifying unit consistency in pyro scattering**
[2025-10-06T22:00:03] exec bash -lc "sed -n '620,740p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:03] bash -lc "sed -n '620,740p' src/nanobrag_torch/simulator.py" succeeded in 722ms:
        kernel caching with torch.compile.

        See docstring of `compute_physics_for_position` for full documentation.

        Args:
            pixel_coords_angstroms: Pixel/subpixel coordinates in Angstroms (S, F, 3) or (batch, 3)
            rot_a, rot_b, rot_c: Rotated real-space lattice vectors (N_phi, N_mos, 3)
            rot_a_star, rot_b_star, rot_c_star: Rotated reciprocal vectors (N_phi, N_mos, 3)
            incident_beam_direction: Optional incident beam direction (defaults to self.incident_beam_direction)
            wavelength: Optional wavelength (defaults to self.wavelength)
            source_weights: Optional per-source weights for multi-source accumulation

        Returns:
            intensity: Computed intensity |F|^2 integrated over phi and mosaic
        """
        # Use provided values or defaults
        if incident_beam_direction is None:
            incident_beam_direction = self.incident_beam_direction
        if wavelength is None:
            wavelength = self.wavelength
[2025-10-06T22:00:03] tokens used: 441,003

[2025-10-06T22:00:07] thinking

**Searching compiled compute function**
[2025-10-06T22:00:07] exec bash -lc 'rg "_compiled_compute_physics" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:08] bash -lc 'rg "_compiled_compute_physics" -n src/nanobrag_torch/simulator.py' succeeded in 712ms:
598:            self._compiled_compute_physics = compute_physics_for_position
602:                    self._compiled_compute_physics = torch.compile(mode="max-autotune")(
606:                    self._compiled_compute_physics = torch.compile(mode="reduce-overhead")(
612:                self._compiled_compute_physics = compute_physics_for_position
654:        return self._compiled_compute_physics(
[2025-10-06T22:00:08] tokens used: 442,879

[2025-10-06T22:00:12] thinking

**Searching for compute_physics_for_position function**
[2025-10-06T22:00:12] exec bash -lc 'rg "def compute_physics_for_position" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:13] bash -lc 'rg "def compute_physics_for_position" -n src/nanobrag_torch/simulator.py' succeeded in 709ms:
19:def compute_physics_for_position(
[2025-10-06T22:00:13] tokens used: 444,550
[2025-10-06T22:00:17] exec bash -lc "sed -n '1,220p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:17] bash -lc "sed -n '1,220p' src/nanobrag_torch/simulator.py" succeeded in 711ms:
"""
Main Simulator class for nanoBragg PyTorch implementation.

This module orchestrates the entire diffraction simulation, taking Crystal and
Detector objects as input and producing the final diffraction pattern.
"""

from typing import Optional, Callable

import torch

from .config import BeamConfig, CrystalConfig, CrystalShape
from .models.crystal import Crystal
from .models.detector import Detector
from .utils.geometry import dot_product
from .utils.physics import sincg, sinc3, polarization_factor


def compute_physics_for_position(
    # Geometry inputs
[2025-10-06T22:00:17] tokens used: 444,797

[2025-10-06T22:00:24] thinking

**Analyzing Pyro wavelength units**
[2025-10-06T22:00:24] exec bash -lc 'rg "self.wavelength" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:25] bash -lc 'rg "self.wavelength" -n src/nanobrag_torch/simulator.py' succeeded in 712ms:
505:        self.wavelength = torch.tensor(self.beam_config.wavelength_A, device=self.device, dtype=self.dtype)
629:            wavelength: Optional wavelength (defaults to self.wavelength)
639:            wavelength = self.wavelength
766:            wavelength_m = self.wavelength * 1e-10  # Convert from Angstroms to meters
1241:                    lambda_m = self.wavelength.item() * 1e-10
1243:                    print(f"TRACE_PY: lambda_angstroms {self.wavelength.item():.15g}")
1246:                    scattering_vec_ang_inv = (diffracted_vec - incident_vec) / self.wavelength
1275:                    scattering_vec = (diffracted_unit - incident_unit) / self.wavelength
[2025-10-06T22:00:25] tokens used: 447,881

[2025-10-06T22:00:30] thinking

**Investigating wavelength unit handling**
[2025-10-06T22:00:31] exec bash -lc "sed -n '740,840p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:31] bash -lc "sed -n '740,840p' src/nanobrag_torch/simulator.py" succeeded in 751ms:
            oversample_thick: Apply absorption per subpixel. Defaults to detector config.

        Returns:
            torch.Tensor: Final diffraction image with shape (spixels, fpixels).
        """
        # Get oversampling parameters from detector config if not provided
        if oversample is None:
            oversample = self.detector.config.oversample
        if oversample_omega is None:
            oversample_omega = self.detector.config.oversample_omega
        if oversample_polar is None:
            oversample_polar = self.detector.config.oversample_polar
        if oversample_thick is None:
            oversample_thick = self.detector.config.oversample_thick

        # Auto-select oversample if set to -1 (matches C behavior)
        if oversample == -1:
            # Calculate maximum crystal dimension in meters
            xtalsize_max = max(
                abs(self.crystal.config.cell_a * 1e-10 * self.crystal.config.N_cells[0]),  # a*Na in meters
[2025-10-06T22:00:31] tokens used: 448,264

[2025-10-06T22:00:35] thinking

**Investigating unit conversions in physics calculations**
[2025-10-06T22:00:36] exec bash -lc 'rg "pixel_coords_angstroms" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:36] bash -lc 'rg "pixel_coords_angstroms" -n src/nanobrag_torch/simulator.py' succeeded in 716ms:
21:    pixel_coords_angstroms: torch.Tensor,
74:        pixel_coords_angstroms: Pixel/subpixel coordinates in Angstroms (S, F, 3) or (batch, 3)
105:        pixel_coords_angstroms * pixel_coords_angstroms, dim=-1, keepdim=True
110:    diffracted_beam_unit = pixel_coords_angstroms / pixel_magnitudes
114:    original_n_dims = pixel_coords_angstroms.dim()  # 2 for (batch, 3), 3 for (S, F, 3)
329:        # Need diffracted beam direction: pixel_coords_angstroms normalized
330:        pixel_magnitudes = torch.norm(pixel_coords_angstroms, dim=-1, keepdim=True).clamp_min(1e-12)
331:        diffracted_beam_unit = pixel_coords_angstroms / pixel_magnitudes
614:    def _compute_physics_for_position(self, pixel_coords_angstroms, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star, incident_beam_direction=None, wavelength=None, source_weights=None):
625:            pixel_coords_angstroms: Pixel/subpixel coordinates in Angstroms (S, F, 3) or (batch, 3)
655:            pixel_coords_angstroms=pixel_coords_angstroms,
987:            pixel_coords_angstroms = pixel_coords_meters * 1e10
1000:                    pixel_coords_angstroms, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star,
1009:                    pixel_coords_angstroms, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star
1020:                pixel_coords_angstroms * pixel_coords_angstroms, dim=-1, keepdim=True
[2025-10-06T22:00:36] tokens used: 449,878

[2025-10-06T22:00:45] thinking

**Investigating scattering vector units**
[2025-10-06T22:00:46] exec bash -lc "sed -n '1200,1280p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:47] bash -lc "sed -n '1200,1280p' src/nanobrag_torch/simulator.py" succeeded in 876ms:
                # Output pix0_vector first
                pix0 = self.detector.pix0_vector
                print(f"TRACE_PY: pix0_vector_meters {pix0[0].item():.15g} {pix0[1].item():.15g} {pix0[2].item():.15g}")

                # Output detector basis vectors
                fdet = self.detector.fdet_vec
                sdet = self.detector.sdet_vec
                print(f"TRACE_PY: fdet_vec {fdet[0].item():.15g} {fdet[1].item():.15g} {fdet[2].item():.15g}")
                print(f"TRACE_PY: sdet_vec {sdet[0].item():.15g} {sdet[1].item():.15g} {sdet[2].item():.15g}")

                # Trace coordinate information
                if pixel_coords_meters is not None:
                    coords = pixel_coords_meters[target_slow, target_fast]
                    print(f"TRACE_PY: pixel_pos_meters {coords[0].item():.15g} {coords[1].item():.15g} {coords[2].item():.15g}")

                    # Calculate airpath and omega
                    airpath_m = torch.sqrt(torch.sum(coords * coords)).item()
                    print(f"TRACE_PY: R_distance_meters {airpath_m:.15g}")

                    # Calculate omega (same formula as in main calculation)
[2025-10-06T22:00:47] tokens used: 451,354

[2025-10-06T22:00:56] thinking

**Analyzing scattering vector computations**
[2025-10-06T22:00:58] exec bash -lc "python - <<'PY'
diffracted = [-0.391777736781811, 0.144875033930166, -0.908582098385091]
incident = [0.00051387949, 0.0, -0.99999986]
wavelength = 0.9768
scattering = [(d - i)/wavelength for d, i in zip(diffracted, incident)]
b = [-11.4986968432508, 0.717320030990266, -29.1132147806318]
k = sum(s * bi for s, bi in zip(scattering, b))
print('scattering', scattering)
print('k', k)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:00:58] bash -lc "python - <<'PY'
diffracted = [-0.391777736781811, 0.144875033930166, -0.908582098385091]
incident = [0.00051387949, 0.0, -0.99999986]
wavelength = 0.9768
scattering = [(d - i)/wavelength for d, i in zip(diffracted, incident)]
b = [-11.4986968432508, 0.717320030990266, -29.1132147806318]
k = sum(s * bi for s, bi in zip(scattering, b))
print('scattering', scattering)
print('k', k)
PY
" succeeded in 858ms:
scattering [-0.40160894376721024, 0.14831596430197172, 0.09358902704229013]
k 1.9996920606341992
[2025-10-06T22:00:58] tokens used: 453,758

[2025-10-06T22:01:03] thinking

**Validating variable match**
[2025-10-06T22:01:04] exec bash -lc "python - <<'PY'
diffracted = [-0.391782158179886, 0.14487608188769, -0.908580024779756]
incident = [0.000513879494092498, 0.0, -0.999999867963924]
wavelength = 0.9768
scattering = [(d - i)/wavelength for d, i in zip(diffracted, incident)]
b = [-11.4986968432508, 0.671588233999813, -29.1143056268565]
k = sum(s * bi for s, bi in zip(scattering, b))
print('scattering', scattering)
print('k', k)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:01:05] bash -lc "python - <<'PY'
diffracted = [-0.391782158179886, 0.14487608188769, -0.908580024779756]
incident = [0.000513879494092498, 0.0, -0.999999867963924]
wavelength = 0.9768
scattering = [(d - i)/wavelength for d, i in zip(diffracted, incident)]
b = [-11.4986968432508, 0.671588233999813, -29.1143056268565]
k = sum(s * bi for s, bi in zip(scattering, b))
print('scattering', scattering)
print('k', k)
PY
" succeeded in 719ms:
scattering [-0.40161347018220567, 0.1483170371495598, 0.09359115805095011]
k 1.9927979393756925
[2025-10-06T22:01:05] tokens used: 454,945

[2025-10-06T22:01:31] thinking

**Analyzing vector and orientation discrepancies**
[2025-10-06T22:01:33] exec bash -lc "python - <<'PY'
import numpy as np
b = np.array([-11.4986968432508, 0.717320030990266, -29.1132147806318])
axis = np.array([-1.0, 0.0, 0.0])
axis = axis / np.linalg.norm(axis)

import math

def rotate(vec, angle_deg):
    angle_rad = math.radians(angle_deg)
    cos = math.cos(angle_rad)
    sin = math.sin(angle_rad)
    axis_vec = axis
    return (
        vec * cos + np.cross(axis_vec, vec) * sin + axis_vec * np.dot(axis_vec, vec) * (1 - cos)
    )

for deg in [0.01, 0.02, 0.05, 0.06, 0.07, 0.08, 0.09]:
    rotated = rotate(b, deg)
    print(deg, rotated)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:01:34] bash -lc "python - <<'PY'
import numpy as np
b = np.array([-11.4986968432508, 0.717320030990266, -29.1132147806318])
axis = np.array([-1.0, 0.0, 0.0])
axis = axis / np.linalg.norm(axis)

import math

def rotate(vec, angle_deg):
    angle_rad = math.radians(angle_deg)
    cos = math.cos(angle_rad)
    sin = math.sin(angle_rad)
    axis_vec = axis
    return (
        vec * cos + np.cross(axis_vec, vec) * sin + axis_vec * np.dot(axis_vec, vec) * (1 - cos)
    )

for deg in [0.01, 0.02, 0.05, 0.06, 0.07, 0.08, 0.09]:
    rotated = rotate(b, deg)
    print(deg, rotated)
PY
" succeeded in 794ms:
0.01 [-11.49869684   0.71223881 -29.11333953]
0.02 [-11.49869684   0.70715756 -29.1134634 ]
0.05 [-11.49869684   0.69191369 -29.11382967]
0.06 [-11.49869684   0.68683236 -29.11394999]
0.07 [-11.49869684   0.681751   -29.11406942]
0.08 [-11.49869684   0.67666963 -29.11418797]
0.09 [-11.49869684   0.67158823 -29.11430563]
[2025-10-06T22:01:34] tokens used: 457,949

[2025-10-06T22:02:02] thinking

**Analyzing phi rotation discrepancies**
[2025-10-06T22:02:05] exec bash -lc "python - <<'PY'
diffracted = [-0.391777736781811, 0.144875033930166, -0.908582098385091]
incident = [0.00051387949, 0.0, -0.99999986]
wavelength = 0.9768
scattering = [(d - i)/wavelength for d, i in zip(diffracted, incident)]

import numpy as np
axis = np.array([-1.0, 0.0, 0.0])
axis = axis / np.linalg.norm(axis)

def rotate(vec, angle_deg):
    angle_rad = np.deg2rad(angle_deg)
    cos = np.cos(angle_rad)
    sin = np.sin(angle_rad)
    return (
        vec * cos + np.cross(axis, vec) * sin + axis * np.dot(axis, vec) * (1 - cos)
    )

b = np.array([-11.4986968432508, 0.717320030990266, -29.1132147806318])
for deg in [0, 0.09]:
    b_rot = rotate(b, deg)
    k = np.dot(scattering, b_rot)
    print(deg, k)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:02:06] bash -lc "python - <<'PY'
diffracted = [-0.391777736781811, 0.144875033930166, -0.908582098385091]
incident = [0.00051387949, 0.0, -0.99999986]
wavelength = 0.9768
scattering = [(d - i)/wavelength for d, i in zip(diffracted, incident)]

import numpy as np
axis = np.array([-1.0, 0.0, 0.0])
axis = axis / np.linalg.norm(axis)

def rotate(vec, angle_deg):
    angle_rad = np.deg2rad(angle_deg)
    cos = np.cos(angle_rad)
    sin = np.sin(angle_rad)
    return (
        vec * cos + np.cross(axis, vec) * sin + axis * np.dot(axis, vec) * (1 - cos)
    )

b = np.array([-11.4986968432508, 0.717320030990266, -29.1132147806318])
for deg in [0, 0.09]:
    b_rot = rotate(b, deg)
    k = np.dot(scattering, b_rot)
    print(deg, k)
PY
" succeeded in 1.10s:
0 1.9996920606341992
0.09 1.992807213827471
[2025-10-06T22:02:06] tokens used: 461,055

[2025-10-06T22:02:19] thinking

**Analyzing phi orientation mismatch**
[2025-10-06T22:02:20] exec bash -lc "sed -n '220,420p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:02:21] bash -lc "sed -n '220,420p' src/nanobrag_torch/simulator.py" succeeded in 912ms:
    # {
    #     /* xtal is a paralelpiped */
    #     double F_latt_a = 1.0, F_latt_b = 1.0, F_latt_c = 1.0;
    #     if(Na>1){
    #         F_latt_a = sincg(M_PI*h,Na);
    #         F_latt *= F_latt_a;
    #     }
    #     if(Nb>1){
    #         F_latt_b = sincg(M_PI*k,Nb);
    #         F_latt *= F_latt_b;
    #     }
    #     if(Nc>1){
    #         F_latt_c = sincg(M_PI*l,Nc);
    #         F_latt *= F_latt_c;
    #     }
    # }
    # ```
    #
    # Per specs/spec-a-core.md §4.3:
    # "SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc)"
[2025-10-06T22:02:21] tokens used: 462,789

[2025-10-06T22:02:35] thinking

**Analyzing lattice factor discrepancies**

I’m reviewing differences in lattice factor calculations, focusing on orientation mismatches between pyro and C approaches, especially around the phi angle handling and fractional Miller index `k`. There’s a need to verify if pyro uses only phi=0 cases while C aggregates over phi, so I want to compare per-phi `F_latt_b` values and test hypotheses about rotation directions and aggregator sorting that could explain the intensity sum differences. I'll also prepare to run Python computations to confirm these ideas.
[2025-10-06T22:02:39] exec bash -lc "python - <<'PY'
import math

def sincg(x, N):
    if N <= 1:
        return 1.0
    denom = math.sin(x)
    if abs(denom) < 1e-12:
        return float(N)
    return math.sin(N * x) / (math.sin(x))

k_phi0 = 1.9996920606341992
k_phi9 = 1.9927979393756925
Nb = 47
F_latt_b_phi0 = sincg(math.pi * k_phi0, Nb)
F_latt_b_phi9 = sincg(math.pi * k_phi9, Nb)
print('F_latt_b_phi0', F_latt_b_phi0)
print('F_latt_b_phi9', F_latt_b_phi9)
print('ratio', F_latt_b_phi0 / F_latt_b_phi9)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:02:40] bash -lc "python - <<'PY'
import math

def sincg(x, N):
    if N <= 1:
        return 1.0
    denom = math.sin(x)
    if abs(denom) < 1e-12:
        return float(N)
    return math.sin(N * x) / (math.sin(x))

k_phi0 = 1.9996920606341992
k_phi9 = 1.9927979393756925
Nb = 47
F_latt_b_phi0 = sincg(math.pi * k_phi0, Nb)
F_latt_b_phi9 = sincg(math.pi * k_phi9, Nb)
print('F_latt_b_phi0', F_latt_b_phi0)
print('F_latt_b_phi9', F_latt_b_phi9)
print('ratio', F_latt_b_phi0 / F_latt_b_phi9)
PY
" succeeded in 927ms:
F_latt_b_phi0 46.98381431822479
F_latt_b_phi9 38.632493836142984
ratio 1.216173476076987
[2025-10-06T22:02:40] tokens used: 466,537

[2025-10-06T22:02:59] thinking

**Analyzing phi orientation impact on pyro vs C results**

I'm comparing how pyro and C handle the phi orientation indexing and summation for lattice factors and intensities. It looks like pyro’s F_latt_b corresponds mostly to phi=0, while C’s logging is at phi=9, which might explain the intensity differences. I’m checking whether the phi dimension ordering, indexing, or scaling differs between them, and also investigating if pyro correctly normalizes by the number of phi steps during intensity aggregation. Next, I'll search for where pyro’s `steps` variable is used to confirm this.
[2025-10-06T22:03:02] exec bash -lc 'rg "steps" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:03:03] bash -lc 'rg "steps" -n src/nanobrag_torch/simulator.py' succeeded in 1.03s:
458:            if hasattr(crystal_config, 'phi_steps'):
459:                self.crystal.config.phi_steps = crystal_config.phi_steps
716:                            for(phi_tic = 0; phi_tic < phisteps; ++phi_tic)
792:        # Get rotated lattice vectors for all phi steps and mosaic domains
837:        # Calculate normalization factor (steps)
838:        # Per spec AT-SAM-001: "Final per-pixel scale SHALL divide by steps"
839:        # PERF-PYTORCH-004 P3.0c: Per AT-SRC-001 "steps = sources; intensity contributions SHALL sum with per-source λ and weight, then divide by steps"
842:        phi_steps = self.crystal.config.phi_steps
846:        steps = source_norm * phi_steps * mosaic_domains * oversample * oversample  # Include sources and oversample^2
935:            # Normalize by the total number of steps
936:            subpixel_physics_intensity_all = subpixel_physics_intensity_all / steps
1012:            # Normalize by steps
1013:            normalized_intensity = intensity / steps
1315:                    # Calculate I_before_scaling (this is before r_e^2 * fluence / steps)
1324:                    print(f"TRACE_PY: steps {self.crystal.config.phi_steps}")
1459:        thicksteps = self.detector.config.detector_thicksteps
1489:        delta_z = thickness_m / thicksteps
1494:            t_indices = torch.arange(thicksteps, device=intensity.device, dtype=intensity.dtype)
1497:            # Shape: (thicksteps, 1, 1) for broadcasting with (S, F)
1507:            capture_fractions = exp_start_all - exp_end_all  # Shape: (thicksteps, S, F)
[2025-10-06T22:03:03] tokens used: 468,136

[2025-10-06T22:03:11] thinking

**Investigating intensity discrepancy causes**

I'm analyzing how intensity is computed, noting that division by steps matches in both implementations so it’s not the cause of the difference. The mismatch in F_latt values puzzles me, especially since pyro’s final intensity matches the phi=0 orientation but aggregated intensity doesn’t seem to include contributions from other phi values. To understand this, I’m planning to compute an average F_latt_b across multiple phi samples to see if the aggregate should be closer to that average, as the C code sums over phi. This will help clarify if the discrepancy arises from how phi contributions are aggregated or canceled.
[2025-10-06T22:03:24] exec bash -lc "python - <<'PY'
import math

k_values = []
phi0 = 0.0
phistep = 0.01
Nb = 47

# Using C scattering vector (should be same across phi)
scattering = [-0.40161347018220567, 0.1483170371495598, 0.09359115805095011]
# base b0
b0 = [-11.4986968432508, 0.717320030990266, -29.1132147806318]
axis = [-1.0, 0.0, 0.0]
axis_norm = (axis[0]**2 + axis[1]**2 + axis[2]**2)**0.5
axis = [a/axis_norm for a in axis]

def rotate(vec, angle_deg):
    import numpy as np
    angle_rad = math.radians(angle_deg)
    cos = math.cos(angle_rad)
    sin = math.sin(angle_rad)
    vx = vec
    ax, ay, az = axis
    x, y, z = vx
    cross = [ay*z - az*y, az*x - ax*z, ax*y - ay*x]
    dot = ax*x + ay*y + az*z
    return [x*cos + cross[0]*sin + ax*dot*(1-cos),
            y*cos + cross[1]*sin + ay*dot*(1-cos),
            z*cos + cross[2]*sin + az*dot*(1-cos)]


def sincg(x, N):
    if N <= 1:
        return 1.0
    denom = math.sin(x)
    if abs(denom) < 1e-12:
        return float(N)
    return math.sin(N * x) / (denom)

values = []
for tic in range(10):
    phi = phi0 + phistep * tic
    b = rotate(b0, phi)
    k = sum(s * bi for s, bi in zip(scattering, b))
    values.append((phi, k, sincg(math.pi * k, Nb)))

for phi, k, F_latt_b in values:
    print(phi, k, F_latt_b)

avg = sum(v[2] for v in values) / len(values)
print('avg F_latt_b', avg)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:03:24] bash -lc "python - <<'PY'
import math

k_values = []
phi0 = 0.0
phistep = 0.01
Nb = 47

# Using C scattering vector (should be same across phi)
scattering = [-0.40161347018220567, 0.1483170371495598, 0.09359115805095011]
# base b0
b0 = [-11.4986968432508, 0.717320030990266, -29.1132147806318]
axis = [-1.0, 0.0, 0.0]
axis_norm = (axis[0]**2 + axis[1]**2 + axis[2]**2)**0.5
axis = [a/axis_norm for a in axis]

def rotate(vec, angle_deg):
    import numpy as np
    angle_rad = math.radians(angle_deg)
    cos = math.cos(angle_rad)
    sin = math.sin(angle_rad)
    vx = vec
    ax, ay, az = axis
    x, y, z = vx
    cross = [ay*z - az*y, az*x - ax*z, ax*y - ay*x]
    dot = ax*x + ay*y + az*z
    return [x*cos + cross[0]*sin + ax*dot*(1-cos),
            y*cos + cross[1]*sin + ay*dot*(1-cos),
            z*cos + cross[2]*sin + az*dot*(1-cos)]


def sincg(x, N):
    if N <= 1:
        return 1.0
    denom = math.sin(x)
    if abs(denom) < 1e-12:
        return float(N)
    return math.sin(N * x) / (denom)

values = []
for tic in range(10):
    phi = phi0 + phistep * tic
    b = rotate(b0, phi)
    k = sum(s * bi for s, bi in zip(scattering, b))
    values.append((phi, k, sincg(math.pi * k, Nb)))

for phi, k, F_latt_b in values:
    print(phi, k, F_latt_b)

avg = sum(v[2] for v in values) / len(values)
print('avg F_latt_b', avg)
PY
" succeeded in 946ms:
0.0 1.9996828375702669 46.9828303547402
0.01 1.9989175295333519 46.80023317230956
0.02 1.998152301279213 46.419378600988026
0.03 1.9973871528311586 45.84323743179093
0.04 1.9966220842124975 45.07626499884011
0.05 1.9958570954465347 44.124359730554
0.06 1.9950921865565734 42.994808687130146
0.07 1.9943273575659133 41.696220636007396
0.08 1.9935626084978528 40.23844733856767
0.09 1.992797939375688 38.63249383613337
avg F_latt_b 43.88082747870614
[2025-10-06T22:03:24] tokens used: 470,076

[2025-10-06T22:03:39] thinking

**Analyzing phi sampling discrepancies**

I'm investigating why the lattice factor from C trace doesn’t match the average and suspect differences in phi sampling between PyTorch and C. The key idea is that PyTorch samples at phi bin starts while C may sample at bin ends, causing intensity and rotation differences. I'll consider verifying this by logging detailed phi values and checking scattering vector computations across both implementations.
[2025-10-06T22:03:41] exec bash -lc "python - <<'PY'
import math
scattering_py = [-0.40160894376721024, 0.14831596430197172, 0.09358902704229013]
scattering_c = [-0.40161347018220567, 0.1483170371495598, 0.09359115805095011]
b_py = [-11.4986968432508, 0.717320030990266, -29.1132147806318]
b_c = [-11.4986968432508, 0.671588233999813, -29.1143056268565]

k_py = sum(s * b for s, b in zip(scattering_py, b_py))
k_c = sum(s * b for s, b in zip(scattering_c, b_c))
k_mix1 = sum(s * b for s, b in zip(scattering_c, b_py))
k_mix2 = sum(s * b for s, b in zip(scattering_py, b_c))
print('k_py', k_py)
print('k_c', k_c)
print('k_mix1 (C scattering, Py b)', k_mix1)
print('k_mix2 (Py scattering, C b)', k_mix2)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:03:42] bash -lc "python - <<'PY'
import math
scattering_py = [-0.40160894376721024, 0.14831596430197172, 0.09358902704229013]
scattering_c = [-0.40161347018220567, 0.1483170371495598, 0.09359115805095011]
b_py = [-11.4986968432508, 0.717320030990266, -29.1132147806318]
b_c = [-11.4986968432508, 0.671588233999813, -29.1143056268565]

k_py = sum(s * b for s, b in zip(scattering_py, b_py))
k_c = sum(s * b for s, b in zip(scattering_c, b_c))
k_mix1 = sum(s * b for s, b in zip(scattering_c, b_py))
k_mix2 = sum(s * b for s, b in zip(scattering_py, b_c))
print('k_py', k_py)
print('k_c', k_c)
print('k_mix1 (C scattering, Py b)', k_mix1)
print('k_mix2 (Py scattering, C b)', k_mix2)
PY
" succeeded in 879ms:
k_py 1.9996920606341992
k_c 1.9927979393756925
k_mix1 (C scattering, Py b) 1.9996828375702669
k_mix2 (Py scattering, C b) 1.9928072138274757
[2025-10-06T22:03:42] tokens used: 472,167

[2025-10-06T22:03:57] thinking

**Analyzing orientation differences in phi grids**

I'm piecing together that the main discrepancy comes from how PyTorch and C handle phi angle orientation in their calculations, especially with the `b` vector. It looks like C might be using the last phi index while PyTorch uses the first, causing a notable difference in lattice factors. I'm planning to verify this by logging specific rotated vectors at critical phi indices and compare contributions more closely to confirm the hypothesis and decide on adjusting the phi grid or aggregation method next.
[2025-10-06T22:04:00] exec bash -lc "python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:04:01] bash -lc "python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" succeeded in 1.17s:
heads
[2025-10-06T22:04:01] tokens used: 474,171

[2025-10-06T22:04:05] thinking

**Reviewing recent commits**
[2025-10-06T22:04:06] exec bash -lc 'git log --oneline | head -n 12' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:04:06] bash -lc 'git log --oneline | head -n 12' succeeded in 715ms:
a341694 [SYNC i=51] actor=galph status=running
bf42f7a [SYNC i=51] actor=ralph → next=galph status=ok ralph_commit=271e2b6
271e2b6 CLI-FLAGS-003 Phase K3d: dtype sensitivity evidence - dtype NOT root cause
2d82b59 [SYNC i=50] actor=ralph status=running
7c4a1e1 [SYNC i=50] actor=galph → next=ralph status=ok galph_commit=bf8add5
bf8add5 SUPERVISOR: CLI parity plan update - tests: not run
d8bed8a [SYNC i=50] actor=galph status=running
d24d039 [SYNC i=50] actor=ralph → next=galph status=ok ralph_commit=5ac737f
5ac737f docs/fix_plan.md: Add Attempt #43 for CLI-FLAGS-003 Phase K3a-K3b
a89f6fd CLI-FLAGS-003 Phase K3a-K3b: Guard MOSFLM rescale + align polarization defaults
cdc5caf [SYNC i=49] actor=ralph status=running
707a1f5 [SYNC i=49] actor=galph → next=ralph status=ok galph_commit=8a958d9
[2025-10-06T22:04:06] tokens used: 475,293

[2025-10-06T22:04:39] thinking

**Planning detailed commit review and plan update**

I’m mapping out how to analyze recent commits for regressions and productivity on CLI parity issues, focusing on gating, polarization, and lattice mismatch. I need to update the active plan to add new tasks investigating phi rotation mismatches, document relevant files, and structure new subtasks (K3e, K3f) to gather and address per-phi differences before editing plan and fix_plan accordingly.
[2025-10-06T22:04:53] tokens used: 479,092

[2025-10-06T22:04:57] thinking

**Verifying patch line formatting**
[2025-10-06T22:04:58] exec bash -lc "sed -n '100,160p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:04:59] bash -lc "sed -n '100,160p' plans/active/cli-noise-pix0/plan.md" succeeded in 900ms:
| --- | --- | --- | --- |
| G1 | Extend CLI config to retain A* vectors | [D] | ✅ Commit 28fc584 stores MOSFLM reciprocal vectors from `-mat` in `parse_and_validate_args` and threads them into `CrystalConfig`; 26-case CLI regression sweep captured in Attempt #15 notes. |
| G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
| G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |

### Phase H — Lattice Structure Factor Alignment
Goal: Ensure the CLI-provided beam vector propagates through Detector→Simulator and bring scattering/lattice parity back in line before polarization work.
Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
Exit Criteria: Trace comparison shows `pix0_vector` components matching C within 5e-5 m, `h`, `k`, `l` fractional components within 1e-3, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).

Update 2025-10-17: Attempt #22 proved the projection-based override mapping pushes pix0 off by 2.16e-1 m; Attempt #23 (now superseded) inferred the C code ignored `-pix0_vector_mm` when custom detector vectors are present. Phase J traces captured on 2025-10-21 demonstrate the override IS honoured (C recomputes `Fbeam/Sbeam` ≈0.2179/0.2139 m), so PyTorch must re-apply overrides even in the custom-vector path.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
| H3b1 | Capture C vs PyTorch pix0/F/S references (override on/off) | [D] | ✅ 2025-10-17 Attempt #23: Stored paired C traces (`reports/2025-10-cli-flags/phase_h/implementation/c_trace_with_override.log` / `_without_override.log`), PyTorch traces, and `pix0_mapping_analysis.md`; evidence proves C geometry is identical with or without `-pix0_vector_mm` when custom vectors are supplied. |
| H3b2 | Implement pix0 precedence (custom vectors > override) | [D] | ✅ 2025-10-06 Attempt #24 (commit d6f158c). `Detector._calculate_pix0_vector` now skips overrides when any custom detector vector is supplied; override logic only executes in the no-custom-vectors path. Validation: `tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_vector_mm_beam_pivot` (CPU) and evidence log `reports/2025-10-cli-flags/phase_h/implementation/pix0_override_validation.md`. Residual pix0 Y-delta (≈3.9 mm) traced to missing post-rotation `Fbeam/Sbeam` recomputation and deferred to H4. |
| H3b3 | Repair CLI regression + artifacts for precedence | [D] | ✅ 2025-10-06 Attempt #24. Regression test now covers BOTH precedence cases (custom vectors ignored, standard path applies override) and records expected C pix0 vector in `pix0_expected.json`. CUDA parametrisation remains skipped until parity fix lands; tolerance temporarily relaxed to 5 mm pending H4 geometry alignment. |
[2025-10-06T22:04:59] tokens used: 481,614

[2025-10-06T22:05:03] thinking

**Continuing to verify table lines**
[2025-10-06T22:05:04] exec bash -lc "sed -n '200,320p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:05] bash -lc "sed -n '200,320p' plans/active/cli-noise-pix0/plan.md" succeeded in 700ms:

[2025-10-06T22:05:05] tokens used: 483,261

[2025-10-06T22:05:09] thinking

**Checking file length**
[2025-10-06T22:05:09] exec bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:10] bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' succeeded in 728ms:
     198 plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:05:10] tokens used: 483,467

[2025-10-06T22:05:13] thinking

**Extracting file segment near bottom**
[2025-10-06T22:05:14] exec bash -lc "sed -n '120,198p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:15] bash -lc "sed -n '120,198p' plans/active/cli-noise-pix0/plan.md" succeeded in 705ms:
| H4a | Port post-rotation beam-centre recomputation | [D] | ✅ 2025-10-17 Attempt #25: Ported nanoBragg.c lines 1846-1860 into `Detector._calculate_pix0_vector`; see `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/implementation.md`. |
| H4b | Refresh traces and parity evidence | [D] | ✅ 2025-10-17 Attempt #25: Stored C/PyTorch traces in `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/trace_c.log` and `trace_py.log`; `summary.md` records pix0 deltas ≤1.3e-8 m and `F_latt` agreement <0.2%. |
| H4c | Tighten regression test + targeted pytest | [D] | ✅ 2025-10-17 Attempt #25: Updated regression tolerance to 5e-5 m (CPU and CUDA parametrised) and captured `pytest_h4c.log`; Attempt #25 logged in docs/fix_plan.md. |

### Phase H5 — Custom Vector Pix0 Override Parity
Goal: Bring PyTorch pix0 precedence back in line with C when custom detector vectors accompany `-pix0_vector_mm`, eliminating the 1.14 mm delta driving the `F_latt` mismatch.
Prereqs: Phase H4 artifacts available; C precedence proof in `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`.
Exit Criteria: Detector traces with custom vectors show `pix0_vector`, `Fbeam`, and `Sbeam` matching C within 5e-5 m, and fractional h/k/l plus `F_latt_a/b/c` align within 1e-3 relative difference before resuming normalization work.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| H5a | Verify C precedence with explicit derivation | [D] | ✅ 2025-10-22 Attempt #30. C traces stored under `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/` prove geometry is identical with or without `-pix0_vector_mm` when custom vectors are present. `c_precedence_2025-10-22.md` carries the dot-product derivation. |
| H5b | Revert PyTorch override when custom vectors supplied | [D] | ✅ 2025-10-22 Attempt #31 (commit 831b670). `Detector._calculate_pix0_vector` now gates pix0 overrides behind a `has_custom_vectors` check; regression log captured in `reports/2025-10-cli-flags/phase_h5/pytest_h5b_revert.log`. Comments cite `c_precedence_2025-10-22.md`. |
| H5c | Capture updated PyTorch traces & compare | [P] | ✅ Attempt #35 (2025-10-24) captured `reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-24/trace_py.stdout` and refreshed `parity_summary.md`, but deltas remain large (ΔF = −1136 µm, ΔS = +139 µm). Keep this row in progress until follow-up Phase H6 diagnostics shrink |Δpix0| below the 5e-5 m threshold. |

### Phase H6 — Pix0 Divergence Isolation
Goal: Instrument both implementations to pinpoint the exact step in `_calculate_pix0_vector()` where the PyTorch BEAM-pivot math diverges from nanoBragg.c when custom detector vectors are present.
Prereqs: Phase H5 artifacts archived (`reports/2025-10-cli-flags/phase_h5/py_traces/2025-10-24/`), C precedence proof in `reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`, familiarity with `docs/architecture/detector.md` §5 and specs/spec-a-cli.md precedence rules.
Exit Criteria: New traces under `reports/2025-10-cli-flags/phase_h6/` showing matched step-by-step values, the first divergence documented in `parity_summary.md`, and docs/fix_plan Attempt #36 logging the diagnosis with remediation guidance.

[2025-10-06T22:05:15] tokens used: 483,694

[2025-10-06T22:05:19] thinking

**Searching for Phase K table**
[2025-10-06T22:05:20] exec bash -lc "sed -n '198,260p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:20] bash -lc "sed -n '198,260p' plans/active/cli-noise-pix0/plan.md" succeeded in 738ms:
| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
[2025-10-06T22:05:20] tokens used: 485,429

[2025-10-06T22:05:29] thinking

**Searching for Phase K section**
[2025-10-06T22:05:30] exec bash -lc 'rg "Phase K" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:31] bash -lc 'rg "Phase K" -n plans/active/cli-noise-pix0/plan.md' succeeded in 701ms:
7:- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
9:- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
10:- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
17:  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
149:| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
161:| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; remains blocked pending Phase K fixes (orientation rescale + polarization default). |
172:| J3 | Update fix_plan Attempt log | [D] | ✅ 2025-10-19: Attempt #28 logged in `docs/fix_plan.md` with complete metrics, artifacts, and hypothesis (F_latt calculation error in sincg lattice shape factor). Phase I3 remains blocked pending Phase K F_latt fix. |
174:### Phase K — Normalization Implementation
[2025-10-06T22:05:31] tokens used: 486,399

[2025-10-06T22:05:34] thinking

**Navigating to line 174**
[2025-10-06T22:05:35] exec bash -lc "sed -n '174,210p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:36] bash -lc "sed -n '174,210p' plans/active/cli-noise-pix0/plan.md" succeeded in 681ms:
### Phase K — Normalization Implementation
Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
| K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
| K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
| K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |

### Phase L — Final Parity & Regression Sweep
Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
Prereqs: Phases J–K complete; scaling regression tests green.
Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.

[2025-10-06T22:05:36] tokens used: 487,098

[2025-10-06T22:05:40] thinking

**Preparing to apply patch to table**
[2025-10-06T22:05:51] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -183,6 +183,8 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
[2025-10-06T22:05:51] apply_patch(auto_approved=true) exited 0 in 15ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:05:51] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..8d9c8a99fe2caedd2ae3d072577a24ae83fe3e67
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -181,10 +181,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:05:51] tokens used: 489,355
[2025-10-06T22:05:51] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..8d9c8a99fe2caedd2ae3d072577a24ae83fe3e67
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -181,10 +181,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:05:54] thinking

**Preparing to insert context snippet update**
[2025-10-06T22:05:55] exec bash -lc "sed -n '1,40p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:05:56] bash -lc "sed -n '1,40p' plans/active/cli-noise-pix0/plan.md" succeeded in 958ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.
[2025-10-06T22:05:56] tokens used: 491,101
[2025-10-06T22:05:56] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..8d9c8a99fe2caedd2ae3d072577a24ae83fe3e67
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -181,10 +181,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:06:01] thinking

**Updating changelog with new entry**
[2025-10-06T22:06:08] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -14,2 +14,3 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
[2025-10-06T22:06:08] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:06:08] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:06:08] tokens used: 493,348
[2025-10-06T22:06:08] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:06:14] thinking

**Updating Next Actions in docs/fix_plan.md**
[2025-10-06T22:06:15] exec bash -lc "sed -n '448,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:06:16] bash -lc "sed -n '448,520p' docs/fix_plan.md" succeeded in 930ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
[2025-10-06T22:06:16] tokens used: 494,452
[2025-10-06T22:06:16] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:06:36] thinking

**Updating progress and next steps**

I’m revising the status line to reflect completed tasks K3a, K3b, and K3d, and noting that per-φ investigation is still pending despite K3d and dtype done. The "First Divergence" section will be updated to highlight the φ mismatch as the new cause, replacing the old pyro rescale explanation, and mentioning that the cross product rescale is now fixed. I’ll also update the Next Actions bullet list to include new phases K3e and K3f with their specific tasks, plus a note to rerun regression (K3c) and scaling after these fixes, all while incorporating new attempt entries like Attempt #43. I plan to apply these updates carefully to keep the record clear and consistent.
[2025-10-06T22:06:52] tokens used: 656,445
[2025-10-06T22:06:52] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:06:55] thinking

**Adjusting heading matching pattern**
[2025-10-06T22:07:06] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -450,3 +450,3 @@
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
@@ -456,8 +456,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
[2025-10-06T22:07:06] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T22:07:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:07:06] tokens used: 661,163
[2025-10-06T22:07:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:07:14] thinking

**Verifying bullet list formatting and preparing input memo**
[2025-10-06T22:07:15] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:07:16] bash -lc 'cat input.md' succeeded in 1.03s:
Summary: Quantify float32 vs float64 impact on the CLI scaling chain before touching normalization code.
Phase: Evidence
Focus: CLI-FLAGS-003 — Phase K3d dtype-sensitivity sweep
Branch: main
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/
Do Now: CLI-FLAGS-003 K3d dtype sensitivity; NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py
If Blocked: If the float64 run crashes, capture stdout/stderr to dtype_sweep/attempt_failed.log, rerun once at default dtype for comparison, and log config + traceback in Attempt History.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:173 — K3d demands dtype evidence before we reopen implementation work on normalization.
- docs/fix_plan.md:448 — New Next Actions gate K3a/K3c on confirming whether rounding causes the 21.6% F_latt drift.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md — Current float32 ratios show F_latt_b≈46.98 vs C 38.63, so we need a dtype control run.
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log — C baseline keeps h=2.0012, so compare PyTorch float64 traces against this reference.
- src/nanobrag_torch/simulator.py:250 — sincg inputs depend on precise h/k/l; confirming dtype sensitivity de-risks code changes here.
How-To Map:
- Ensure editable install is active and NB_C_BIN remains pointed at golden_suite_generator/nanoBragg.
- From repo root run:
  1) `NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`.
  2) Move generated logs/JSON into `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/` (stamp subdir).
  3) Record key deltas (hkl_frac, F_latt_*, polar) comparing float32 vs float64 in `dtype_sweep/dtype_sensitivity.md`.
[2025-10-06T22:07:16] tokens used: 663,135
[2025-10-06T22:07:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:07:37] thinking

**Formulating detailed phase instructions**

I’m working through how to structure new input instructions for the K3e phase, balancing code modification requirements with what to include under Do Now commands. The plan likely sets Phase to Implementation since script extension is needed, so I’m sorting out precise commands for running and instrumenting both Python and C traces, along with artifact paths and mapped test settings, aiming for clear, actionable guidance that fits the plan constraints.
[2025-10-06T22:07:50] exec bash -lc "cat <<'EOF' > input.md
Summary: Capture per-φ Miller index + lattice traces (C vs PyTorch) so we can nail the φ-grid mismatch before touching normalization.
Phase: Implementation
Focus: CLI-FLAGS-003 — Phase K3e per-φ Miller index parity
Branch: main
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/
Do Now: CLI-FLAGS-003 K3e per-φ parity; PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py --per-phi --outdir reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/
If Blocked: If the script lacks "'`--per-phi`, scaffold it first; if C trace instrumentation fails to build, save the compile error to per_phi/attempt_failed.log and fall back to copying Attempt #43 trace with manual φ annotations.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:176 — K3e mandates a per-φ dump before any further normalization work.
- docs/fix_plan.md:451 — Next Actions now pivot on resolving the φ-grid mismatch (k≈1.9997 vs 1.9928).
- reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log — Current log only shows φ₀; we need the full 0…9 sweep.
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log — Baseline C trace to mirror when instrumenting φ ticks.
- specs/spec-a-core.md §4.3 — Sincg sensitivity confirms why Δk≈7e-3 blows up F_latt_b, so evidence must quantify k per φ.
How-To Map:
- Extend `reports/…/analyze_scaling.py` to accept `--per-phi` and emit JSON/markdown tables of `φ_tic`, `h`, `k`, `l`, `F_latt_{a,b,c}` for both C and PyTorch; store files under the timestamped folder inside per_phi/.
- Patch `golden_suite_generator/nanoBragg.c` instrumentation (copy Attempt #43 scaffolding) to log `TRACE_C_PHI φ_tic=<idx> k=<val> F_latt_b=<val>`; rebuild via `make -C golden_suite_generator`.
- Run the PyTorch side command (above) with `NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg` so the script can invoke C and PyTorch back-to-back.
- Capture stdout/stderr to `per_phi/<timestamp>/run.log`, and drop a summary markdown (`per_phi_summary.md`) with the first φ where Δk > 5e-4.
- Leave the dtype sweep artifacts untouched; reference them when summarising findings.
Pitfalls To Avoid:
- Do not regress existing scaling artifacts—create a fresh timestamped subdir.
- No pytest in this loop; focus on traces.
- Keep edits confined to the script + instrumentation; core simulator code stays untouched until φ mismatch is proven.
- Respect Protected Assets (docs/index.md listings).
- Clean rebuild the C binary after instrumentation to avoid stale traces.
- Ensure command runs with `KMP_DUPLICATE_LIB_OK=TRUE` to prevent MKL clashes.
- Document commit hash + torch version in the summary for reproducibility.
- Avoid hard-coded `.cpu()`/`.cuda()` in new logging helpers.
- Don’t push; hand back evidence first.
Pointers:
- plans/active/cli-noise-pix0/plan.md:180
- docs/fix_plan.md:451
- reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- src/nanobrag_torch/models/crystal.py:828
- golden_suite_generator/nanoBragg.c:3038
- specs/spec-a-core.md §4.3
Next Up:
1. After per-φ evidence, implement φ sampling fix (K3f) and rerun scaling-chain validation.
2. Once F_latt parity holds, close K3c with targeted pytest + doc refresh before attempting Phase L.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:07:51] bash -lc "cat <<'EOF' > input.md
Summary: Capture per-φ Miller index + lattice traces (C vs PyTorch) so we can nail the φ-grid mismatch before touching normalization.
Phase: Implementation
Focus: CLI-FLAGS-003 — Phase K3e per-φ Miller index parity
Branch: main
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/
Do Now: CLI-FLAGS-003 K3e per-φ parity; PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py --per-phi --outdir reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/
If Blocked: If the script lacks "'`--per-phi`, scaffold it first; if C trace instrumentation fails to build, save the compile error to per_phi/attempt_failed.log and fall back to copying Attempt #43 trace with manual φ annotations.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:176 — K3e mandates a per-φ dump before any further normalization work.
- docs/fix_plan.md:451 — Next Actions now pivot on resolving the φ-grid mismatch (k≈1.9997 vs 1.9928).
- reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log — Current log only shows φ₀; we need the full 0…9 sweep.
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log — Baseline C trace to mirror when instrumenting φ ticks.
- specs/spec-a-core.md §4.3 — Sincg sensitivity confirms why Δk≈7e-3 blows up F_latt_b, so evidence must quantify k per φ.
How-To Map:
- Extend `reports/…/analyze_scaling.py` to accept `--per-phi` and emit JSON/markdown tables of `φ_tic`, `h`, `k`, `l`, `F_latt_{a,b,c}` for both C and PyTorch; store files under the timestamped folder inside per_phi/.
- Patch `golden_suite_generator/nanoBragg.c` instrumentation (copy Attempt #43 scaffolding) to log `TRACE_C_PHI φ_tic=<idx> k=<val> F_latt_b=<val>`; rebuild via `make -C golden_suite_generator`.
- Run the PyTorch side command (above) with `NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg` so the script can invoke C and PyTorch back-to-back.
- Capture stdout/stderr to `per_phi/<timestamp>/run.log`, and drop a summary markdown (`per_phi_summary.md`) with the first φ where Δk > 5e-4.
- Leave the dtype sweep artifacts untouched; reference them when summarising findings.
Pitfalls To Avoid:
- Do not regress existing scaling artifacts—create a fresh timestamped subdir.
- No pytest in this loop; focus on traces.
- Keep edits confined to the script + instrumentation; core simulator code stays untouched until φ mismatch is proven.
- Respect Protected Assets (docs/index.md listings).
- Clean rebuild the C binary after instrumentation to avoid stale traces.
- Ensure command runs with `KMP_DUPLICATE_LIB_OK=TRUE` to prevent MKL clashes.
- Document commit hash + torch version in the summary for reproducibility.
- Avoid hard-coded `.cpu()`/`.cuda()` in new logging helpers.
- Don’t push; hand back evidence first.
Pointers:
- plans/active/cli-noise-pix0/plan.md:180
- docs/fix_plan.md:451
- reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- src/nanobrag_torch/models/crystal.py:828
- golden_suite_generator/nanoBragg.c:3038
- specs/spec-a-core.md §4.3
Next Up:
1. After per-φ evidence, implement φ sampling fix (K3f) and rerun scaling-chain validation.
2. Once F_latt parity holds, close K3c with targeted pytest + doc refresh before attempting Phase L.
EOF
' succeeded in 896ms:

[2025-10-06T22:07:51] tokens used: 666,354
[2025-10-06T22:07:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:07:58] thinking

**Preparing git status and commit**
[2025-10-06T22:07:59] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:08:00] bash -lc 'git status --short' succeeded in 939ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:08:00] tokens used: 667,566
[2025-10-06T22:08:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:08:04] thinking

**Appending summary to galph_memory.md**
[2025-10-06T22:08:11] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/galph_memory.md
@@ -1292 +1292,9 @@
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
[2025-10-06T22:08:11] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-06T22:08:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:08:11] tokens used: 674,770
[2025-10-06T22:08:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:08:14] thinking

**Noticing changes in galph_memory**
[2025-10-06T22:08:14] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:08:15] bash -lc 'git status --short' succeeded in 940ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:08:15] tokens used: 675,662
[2025-10-06T22:08:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:08:23] thinking

**Preparing commit with SUPERVISOR message**
[2025-10-06T22:08:25] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:08:26] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 935ms:

[2025-10-06T22:08:26] tokens used: 675,927
[2025-10-06T22:08:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:08:42] thinking

**Preparing commit message**
[2025-10-06T22:08:44] exec bash -lc 'git commit -m "SUPERVISOR: CLI parity plan update - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:08:45] bash -lc 'git commit -m "SUPERVISOR: CLI parity plan update - tests: not run"' succeeded in 890ms:
[feature/spec-based-2 dfe079a] SUPERVISOR: CLI parity plan update - tests: not run
 4 files changed, 53 insertions(+), 44 deletions(-)
[2025-10-06T22:08:45] tokens used: 676,191
[2025-10-06T22:08:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:08:50] thinking

**Pushing changes to remote**
[2025-10-06T22:08:51] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:08:54] bash -lc 'git push' succeeded in 2.55s:
To github.com:hoidn/nanoBragg.git
   a341694..dfe079a  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T22:08:54] tokens used: 676,483
[2025-10-06T22:08:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:08:59] thinking

**Preparing file references with line numbers**
[2025-10-06T22:09:00] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,60p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:09:01] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,60p'" succeeded in 727ms:
     1	## Context
     2	- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
     3	- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
     4	- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
     5	- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
     6	- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
     7	- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
     8	- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
     9	- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
    10	- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
    11	- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
    12	- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
    13	- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
    14	- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
    15	- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
    16	- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
    17	- Documentation anchors for this focus:
    18	  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
    19	  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
    20	  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
[2025-10-06T22:09:01] tokens used: 676,782
[2025-10-06T22:09:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:09:05] thinking

**Requesting line numbers for table entries**
[2025-10-06T22:09:06] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '174,210p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:09:07] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '174,210p'" succeeded in 698ms:
   174	
   175	### Phase K — Normalization Implementation
   176	Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
   177	Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
   178	Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.
   179	
   180	| ID | Task Description | State | How/Why & Guidance |
   181	| --- | --- | --- | --- |
   182	| K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
   183	| K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
   184	| K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
   185	| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
   186	| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
   187	| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
   188	| K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
   189	| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
   190	| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
   191	
   192	### Phase L — Final Parity & Regression Sweep
   193	Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
[2025-10-06T22:09:07] tokens used: 678,448
[2025-10-06T22:09:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:09:10] thinking

**Noting plan citation requirement**
[2025-10-06T22:09:12] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '448,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:09:13] bash -lc "nl -ba docs/fix_plan.md | sed -n '448,520p'" succeeded in 685ms:
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
   458	- Next Actions (2025-11-07 refresh):
   459	  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
   460	  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
   461	  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
   462	- Attempts History:
   463	  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
   464	    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
   465	    Artifacts:
   466	      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
   467	      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-06T22:09:13] tokens used: 680,010
[2025-10-06T22:09:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:09:16] thinking

**Preparing line number references**
[2025-10-06T22:09:17] exec bash -lc 'nl -ba galph_memory.md | tail -n 40' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:09:18] bash -lc 'nl -ba galph_memory.md | tail -n 40' succeeded in 752ms:
  1261	- Coin flip → tails, so skipped historical commit audit; focused on evidence planning.
  1262	- Authored new `input.md` (Evidence phase) instructing Ralph to rerun the trace harness with pivot fix, capture diff vs C trace, compute deltas, run ROI nb-compare, and prepare Attempt #41 notes; memo also emphasises no pytest this loop.
  1263	- Key gap notes: normalization tasks K2/K3 still blocked pending H6g; vectorization plan untouched (Phase A baseline scripts outstanding).
  1264	- Follow-up for Ralph: execute H6g evidence capture, archive artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`, then log Attempt #41 in `docs/fix_plan.md` with measured |Δpix0| before touching normalization.
  1265	
  1266	## 2025-10-27 (galph loop — K2 evidence staging)
  1267	- `git pull --rebase` clean; synced with origin before review.
  1268	- Read docs/index.md, specs/spec-a.*, arch.md, config map, debugging SOP, testing_strategy.md to refresh guardrails for CLI parity + scaling work.
  1269	- Verified CLI-FLAGS-003 Attempt #41 already landed: pix0 deltas ≤2.85 µm with SAMPLE pivot. Updated `plans/active/cli-noise-pix0/plan.md` context (new 2025-10-27 snapshot) and marked H6g `[D]`; expanded Phase K2 guidance to demand quantitative ratios explaining `test_metrics_failure.json`.
  1270	- Refreshed `docs/fix_plan.md` Next Actions so K2 (scaling harness rerun + ratio analysis) and K3 (targeted pytest + docs) are the only blockers before Phase L. Issued replacement Evidence memo in `input.md` targeting K2 harness rerun and scaling markdown refresh.
  1271	- Coin flip → heads: reviewed Ralph’s last commits. `ea8092f` (H6f) adds solid pivot forcing + regression test ✅. `921780a` only updates fix_plan. `0b7eaf7` still leaves parity PNG/JPEG artifacts in repo root (img*_*.png, intimage*.jpeg, noiseimage_preview.jpeg) — remind Ralph to relocate/delete once evidence obligations satisfied.
  1272	- Noted that `reports/2025-10-cli-flags/phase_k/f_latt_fix/test_metrics_failure.json` still reflects pre-pivot ratios (corr≈0.173); next loop must regenerate after SAMPLE pivot to see if F_cell/F_latt remain off.
  1273	- Vectorization plan remains untouched; Phase A baselines for tricubic/absorption still pending once CLI parity unblocks bandwidth.
  1274	- Follow-up for Ralph: execute Phase K2 per new memo, write updated scaling metrics (including F_cell vs C), keep Attempt #41 notes intact, and stage plan for K3 if ratios finally align.
  1275	
  1276	## 2025-10-31 (galph loop — K2 rescope)
  1277	- Evidence review shows PyTorch still rescales MOSFLM cross products; C only does so when `user_cell` is set. Root cause for F_latt_b ≈ +21.6% identified. K2b added to plan with required `mosflm_rescale.py` artifact.
  1278	- Noted BeamConfig Kahn factor should default to 0.0 (C `polarization`). Reopened Phase I2 and updated fix_plan next steps to include default realignment during K3.
  1279	- Issued new Evidence memo (input.md) directing Ralph to rerun trace harness, refresh scaling markdown, and capture orientation deltas before touching normalization code.
  1280	
[2025-10-06T22:09:18] tokens used: 681,741
[2025-10-06T22:09:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:09:31] thinking

**Preparing final response summary**

I’m organizing the final answer with clear bullet points covering the F_latt mismatch cause, plan and fix_plan updates with line references, commit reviews highlighting key changes and ongoing issues, the coin flip result, and next steps including per-φ evidence gathering and verification. This will help the user easily scan the main findings and suggested actions.
[2025-10-06T22:09:32] codex

**Highlights**
- Updated the CLI parity plan to capture the newly identified φ-grid mismatch: dtype sweep shows PyTorch logging `k≈1.9997` at φ₀ while nanoBragg logs `k≈1.9928` at φ₉, now recorded in the plan context (`plans/active/cli-noise-pix0/plan.md:15`).  
- Phase K3 tasks now reflect latest progress—K3a/K3b/K3d marked done and new K3e/K3f entries added for per-φ evidence and sampling fixes (`plans/active/cli-noise-pix0/plan.md:185-190`).  
- `docs/fix_plan.md` mirrors those changes: status notes the completed subphases and Next Actions now prioritise the per-φ dump followed by the φ sampling fix before rerunning normalization tests (`docs/fix_plan.md:451-461`).  
- Coin flip came up heads; recent work looks productive—commit a89f6fd cleanly lands the MOSFLM guard + polarization default, and 271e2b6 delivers a thorough dtype study, but parity still fails pending the φ investigation.  
- Issued a fresh supervisor memo directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and archive matched C/PyTorch φ traces under `per_phi/` (`input.md:1-31`).  
- Supervisor log updated with today’s focus on the φ mismatch and the new marching orders (`galph_memory.md:1294-1300`).  
- Tests: not run.  

**Next steps for Ralph**
1. Implement K3e: modify the scaling analysis script, capture per-φ JSON/markdown for both implementations, and drop the results in `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/`.  
2. Once evidence is in place, proceed to K3f to align φ sampling and rerun the targeted scaling regression.
[2025-10-06T22:09:37] tokens used: 684,561
[2025-10-06T22:09:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8c88fbe74fac3b6f71dfeba5cf752b56b2ca8b5..fa25dd057db2b28ce961f8aa6094066cf1841d99
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,18 +448,17 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
+- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
-- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
-  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
-  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
-  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). After SAMPLE-pivot parity (Attempts #40–41) and MOSFLM/polarization fixes (Attempt #43) the remaining blocker is a φ-grid mismatch: PyTorch traces report `k≈1.9997` (φ=0°) while C reports `k≈1.9928` (φ=0.09°), inflating `F_latt_b` by ≈21.6% and leaving final intensity ≈11% high.
+- Next Actions (2025-11-07 refresh):
+  1. Phase K3e — extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to dump per-φ (`φ_tic=0…9`) Miller indices and lattice factors for both implementations; rerun C with augmented TRACE_C logging and file the comparison under `reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/` (include diff + summary markdown).
+  2. Phase K3f — once K3e isolates the offset, adjust PyTorch φ sampling (`Crystal.get_rotated_real_vectors` / simulator loop) to mirror nanoBragg.c, regenerate the scaling-chain memo, and stage code/tests/docs updates.
+  3. Phase K3c — after K3f lands, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh documentation (`docs/architecture/pytorch_design.md`, `docs/development/testing_strategy.md`), and log Attempt #45 with post-fix metrics.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0..e8ce3e497fea5a8728a3023735f443e625acaf04
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1290,3 +1290,11 @@
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
 - Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
+
+## 2025-11-07 (galph loop — K3e per-φ parity setup)
+- `git pull --rebase` clean at start; reviewed plan/fix_plan, dtype sweep confirmed precision not root cause.
+- Deep dive: PyTorch trace logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°); rotating PyTorch `b` by 0.09° reproduces C values ⇒ φ-grid mismatch now primary blocker.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3a/K3b/K3d to `[D]`, added K3e (per-φ evidence) & K3f (φ sampling fix) plus new gap snapshot noting φ issue.
+- Synced `docs/fix_plan.md` Next Actions with new tasks (per-φ trace capture & sampling fix); status line now reflects K3a/K3b/K3d completion.
+- Authored `input.md` (Implementation phase) directing Ralph to extend `analyze_scaling.py` with `--per-phi`, instrument nanoBragg.c, and dump matched C/PyTorch φ traces under `reports/…/per_phi/`.
+- Follow-up for Ralph: execute K3e per memo, produce per-φ JSON/MD logs, then we can plan the φ sampling fix (K3f) next loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ce3d6d9e5aa0c85d10a8389a405a0bad711fc448..0aabb03a815535e73efd06ceb041f23f791c4f64
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -12,6 +12,7 @@
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
+- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -181,10 +182,12 @@
 | K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
 | K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
-| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
-| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
-| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
+| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
+| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
+| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
+| K3e | Capture per-φ Miller index parity | [ ] | Extend `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` to emit per-φ (`φ_tic=0…9`) dumps of `h`, `k`, `l`, and `F_latt_{a,b,c}` for C vs PyTorch. Instrument C trace (clone Attempt #43 patch) to log φ tick + lattice factors, archive results in `phase_k/f_latt_fix/per_phi/`, and identify the first φ where Δk exceeds 5e-4. |
+| K3f | Align φ sampling with C + validate fix | [ ] | Once K3e isolates the offset (expected φ-grid mismatch), adjust `Crystal.get_rotated_real_vectors`/simulator sampling to mirror nanoBragg.c, regenerate scaling_chain.md, rerun targeted pytest, and capture Attempt #45 metrics before closing Phase K3. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   dfe079a..751c1b7  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=51...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=51
Updating 751c1b7..987c4f1
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   751c1b7..987c4f1  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=51
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 987c4f1..2467064
Fast-forward
 docs/fix_plan.md                                   |  24 +-
 golden_suite_generator/nanoBragg.c                 |   5 +
 plans/active/cli-noise-pix0/plan.md                |   4 +-
 .../f_latt_fix/per_phi/comparison_summary.md       |  49 +++
 .../per_phi/per_phi_c_20251006-151228.log          |  10 +
 .../per_phi/per_phi_pytorch_20251006-151228.json   | 154 +++++++++
 .../per_phi/per_phi_summary_20251006-151228.md     |  26 ++
 scripts/compare_per_phi_traces.py                  | 157 +++++++++
 scripts/trace_per_phi.py                           | 354 +++++++++++++++++++++
 9 files changed, 777 insertions(+), 6 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_c_20251006-151228.log
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_pytorch_20251006-151228.json
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/per_phi_summary_20251006-151228.md
 create mode 100644 scripts/compare_per_phi_traces.py
 create mode 100644 scripts/trace_per_phi.py
From github.com:hoidn/nanoBragg
   987c4f1..2467064  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 2467064..82bbc42
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   2467064..82bbc42  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=52
Ralph completed iteration 51; proceeding to 52
